<library>


    <!-- Map View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="mapview"
        bgcolor="0xffff00"
        width="${gApp.worldCols * this.tileSize}"
        height="${gApp.worldRows * this.tileSize}"
        clip="true"
    >


        <attribute name="active" value="true"/>
        <attribute name="updateDelay" value="100"/>
        <attribute name="lastUpdateTime" value="0"/>
        <attribute name="loading" value="false"/>
        <attribute name="tileSize" value="16"/>
        <attribute name="phase" value="0"/>
        <attribute name="overlay" value="0"/>
        <attribute name="dragging" value="false"/>
        <attribute name="dragDownX" value="0"/>
        <attribute name="dragDownY" value="0"/>
        <attribute name="dragDownViewX" value="0"/>
        <attribute name="dragDownViewY" value="0"/>
	<attribute name="idleDelegate" value="null"/>
	<attribute name="idlePending" value="null"/>
        <attribute name="mapChanged" value="false"/>
        <attribute name="editTileView" value="null"/>
	<attribute name="viewRectChanged" value="false"/>


        <handler name="oninit" args="arg"><![CDATA[
            //Debug.write("==== mapview oninit", this);
            this.updateInterests();
            this.updateMap();
	    this.updateViewLocation();
          ]]>
        </handler>


        <handler name="onactive" args="arg"><![CDATA[
            if (!this.inited) {
                return;
            }
            //Debug.write("==== mapview onactive", this, this.active);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onvisible" args="arg"><![CDATA[
            if (!this.inited) {
                return;
            }
            //Debug.write("==== mapview onvisible", this, this.active);
            this.updateInterests();
          ]]>
        </handler>


	<method name="updateMap"><![CDATA[
	    this.mapChanged = true;
	    this.scheduleIdle();
	  ]]>
	</method>


	<method name="updateViewLocation"><![CDATA[
	    this.viewRectChanged = true;
	    this.scheduleIdle();
	  ]]>
	</method>


	<method name="scheduleIdle"><![CDATA[
	    if (this.idlePending) {
	        return;
	    }

	    if (!this.idleDelegate) {
	        this.idleDelegate = new lz.Delegate(this, 'handleIdle');
	    }

	    lz.IdleService.LzIdle.callOnIdle(this.idleDelegate);

	    this.idlePending = true;
	  ]]>
	</method>


	<method name="handleIdle" args="ignore"><![CDATA[
	    this.idlePending = false;
	    if (this.mapChanged) {
	        if (!this.loading) {
		    this.mapChanged = false;
		    this.updateMapNow();
		}
	    }
	    if (this.viewRectChanged) {
	        this.viewRectChanged = false;
		this.drawViewRect();
	    }

	    if (this.dragging) {
	        this.updateDrag();
	        this.scheduleIdle();
	    }
	  ]]>
	</method>


        <method name="updateInterests"><![CDATA[
            //Debug.write("==== mapView updateInterests", this, "active", this.active, "visible", this.visible);
            if (this.active && this.visible) {
                gApp.expressInterest(this, ['map']);
            } else {
                gApp.revokeInterest(this, ['map']);
            }

            //this.updateMap();
          ]]>
        </method>


        <method name="handleUpdate" args="args"><![CDATA[
            //Debug.write("==== mapview handleUpdate", this, args['variable'], args);

            var variable = args['variable'];

            switch (variable) {

                case 'map': {
                    this.updateMap();
                    break;
                }

            }

          ]]>
        </method>


        <method name="startDragging"><![CDATA[
	    var editTileView = this.editTileView;
	    if (!editTileView) {
	        return;
	    }

	    this.setAttribute("dragging", true);
	    this.setAttribute("dragDownX", this.getMouse("x"));
	    this.setAttribute("dragDownY", this.getMouse("y"));
	    this.setAttribute("dragDownViewX", editTileView.viewX);
	    this.setAttribute("dragDownViewY", editTileView.viewY);
	  ]]>
        </method>


        <method name="stopDragging"><![CDATA[
	    this.updateDrag();
	    this.setAttribute("dragging", false);
	  ]]>
        </method>


	<method name="updateDrag"><![CDATA[
	    var editTileView = this.editTileView;
	    if (!editTileView) {
	        return;
	    }

	    var x = this.getMouse("x");
	    var y = this.getMouse("y");
	    var dragDownX = this.dragDownX;
	    var dragDownY = this.dragDownY;
	    var dragDownViewX = this.dragDownViewX;
	    var dragDownViewY = this.dragDownViewY;
	    var tileSize = this.tileSize;
	    var dx = (x - dragDownX) / tileSize;
	    var dy = (y - dragDownY) / tileSize;
	    var viewX = dragDownViewX + dx;
	    var viewY = dragDownViewY + dy;
	    //Debug.write("x,y", x, y, "dragDownX,Y", dragDownX, dragDownY, "dragDownViewX,Y", dragDownViewX, dragDownViewY, "tileSize",  tileSize, "dx,y", dx, dy, "viewX,Y", viewX, viewY);
	    editTileView.scrollView(viewX, viewY);
	  ]]>
	</method>
	

        <method name="updateMapNow"><![CDATA[
            //Debug.write("updateMapNow", this, this.active);
            this.setAttribute("bgcolor", Math.floor(Math.random() * 0xffffff));

            var sessionID = gApp.sessionID;
            var tileSize = this.tileSize;
            var width = gApp.worldCols * tileSize;
            var height = gApp.worldRows * tileSize;
            var overlay = gApp.overlay;
            var uniqueID = gApp.makeUniqueID();
            var src = 
                "http:/server/micropolisGetMapImage?sessionID=" + 
                sessionID +
                "&width=" +
                width +
                "&height=" +
                height +
                "&overlay=" +
                overlay +
                "&uniqueID=" +
                uniqueID;
            //Debug.write(this, "SRC", src)
            var phase = this.phase;
            this.phase = phase ? 0 : 1;
            var v = this.v['view' + phase];
            v.setAttribute("resource", src);
            v.bringToFront();
            this.setAttribute("loading", true);
            //Debug.write("loading view" + phase, src);
          ]]>
        </method>


        <method name="handleLoaded" args="v, success"><![CDATA[
            //Debug.write("handleLoaded", this, "v", v, "success", success);
            this.setAttribute("loading", false);

	    this.loading = false;
	    this.handleIdle(null);
          ]]>
        </method>


	<method name="drawViewRect"><![CDATA[
	    var dv = this.dv;
	    var editTileView = this.editTileView;

	    dv.clear();
	    
	    if (!editTileView) {
	        return;
	    }

	    var tileSize = this.tileSize;
	    var viewRect = editTileView.getViewRect();
	    var x = viewRect[0] * tileSize;
	    var y = viewRect[1] * tileSize;
	    var width = viewRect[2] * tileSize;
	    var height = viewRect[3] * tileSize;

	    dv.beginPath();
	    dv.rect(x - 2, y - 2, width + 4, height + 4);
	    dv.strokeStyle = 0xffffff;
   	    dv.lineWidth = 3;
	    dv.stroke();

	    dv.beginPath();
	    dv.rect(x - 2, y - 2, width + 4, height + 4);
	    dv.strokeStyle = 0x000000;
	    dv.lineWidth = 1;
	    dv.stroke();

/*
	    // For debugging the tile scroll extra look-ahead rectangle.
	    viewRect = editTileView.getTileRect();
	    x = viewRect[0] * tileSize;
	    y = viewRect[1] * tileSize;
	    width = viewRect[2] * tileSize;
	    height = viewRect[3] * tileSize;

	    dv.beginPath();
	    dv.rect(x, y, width, height);
	    dv.strokeStyle = 0xffff00;
	    dv.lineWidth = 1;
	    dv.stroke();
*/

	  ]]>
	</method>


        <view name="v"
            width="${parent.width}"
            height="${parent.height}"
        >

            <view name="view0">
                <handler name="onload"><![CDATA[
                    //Debug.write("view0 onload");
                    classroot.handleLoaded(this, true);
                  ]]>
                </handler>
                <handler name="onerror"><![CDATA[
                    //Debug.write("view0 onerror");
                    classroot.handleLoaded(this, false);
                  ]]>
                </handler>
            </view>

            <view name="view1">
                <handler name="onload"><![CDATA[
                    //Debug.write("view1 onload");
                    classroot.handleLoaded(this, true);
                  ]]>
                </handler>
                <handler name="onerror"><![CDATA[
                    //Debug.write("view1 onerror");
                    classroot.handleLoaded(this, false);
                  ]]>
                </handler>
            </view>

        </view>

	<drawview name="dv"
	    width="${parent.width}"
	    height="${parent.height}"
	/>

    </class>


</library>
