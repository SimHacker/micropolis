<library>


    <!-- Evaluation View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="evaluationview"
        clip="true"
    >


	<attribute name="active" value="true"/>

	<attribute name="problemNames" value="$once{[
	    'Crime',
	    'Pollution',
	    'Housing',
	    'Taxes',
	    'Traffic',
	    'Unemployment',
	    'Fire'
	]}"/>

	<attribute name="categoryNames" value="$once{[
	    'Village',
	    'Town',
	    'City',
	    'Capital',
	    'Metropolis',
	    'Megalopolis'
	]}"/>

	<attribute name="levelNames" value="$once{[
	    'Easy',
	    'Medium',
	    'Hard'
	]}"/>

        <attribute name="narrowColumnWidth" value="125"/>
        <attribute name="mediumColumnWidth" value="150"/>
        <attribute name="wideColumnWidth" value="175"/>
        <attribute name="indent" value="5"/>
        <attribute name="textSize" value="10"/>


	<handler name="oninit"><![CDATA[
	    //Debug.write("==== evaluationview oninit", this);
	  ]]>
	</handler>


	<handler name="onevaluation" args="args" reference="gApp"><![CDATA[
	    //Debug.write("evaluationview onevaluation gApp", args);
	    this.redrawView();
	  ]]>
	</handler>


	<method name="redrawView"><![CDATA[
	    var year = 1900;
	    var population = 0;
	    var migration = 0;
	    var assessedValue = 0;
	    var category = 0;
	    var gameLevel = 0;
	    var currentScore = 0;
	    var annualChange = 0;
	    var goodJob = 50;
	    var worstProblems = [];

	    var d = gApp.evaluation;
	    //Debug.write("==== evaluationView redrawView d", d);

	    if (d) {
	         year = d['year'];
	         population = d['population'];
		 migration = d['migration'];
		 assessedValue = d['assessedValue'];
		 category = d['category'];
		 gameLevel = d['gameLevel'];
                 currentScore = d['currentScore'];
                 annualChange = d['annualChange'],
                 goodJob = d['goodJob'];
                 worstProblems = d['worstProblems'];
	    }

	    population = gApp.formatNumber(population, null);
	    //Debug.write("population", population, this.v.populationView.t, this.v.populationView.t.text);
	    if (this.v.populationView.t.text != population) {
		this.v.populationView.t.setAttribute(
		    "text",
		    population);
	    }

	    migration = gApp.formatNumber(migration, null);
	    //Debug.write("migration", migration, this.v.migrationView.t, this.v.migrationView.t.text);
	    if (this.v.migrationView.t.text != migration) {
		this.v.migrationView.t.setAttribute(
		    "text",
		    migration);
	    }

	    assessedValue = gApp.formatFunds(assessedValue);
	    //Debug.write("assessedValue", assessedValue, this.v.assessedValueView.t, this.v.assessedValueView.t.text);
	    if (this.v.assessedValueView.t.text != assessedValue) {
		this.v.assessedValueView.t.setAttribute(
		    "text",
		    assessedValue);
	    }

	    category = gApp._(categoryNames[category]);
	    //Debug.write("category", category, this.v.categoryView.t, this.v.categoryView.t.text);
	    if (this.v.categoryView.t.text != category) {
		this.v.categoryView.t.setAttribute(
		    "text",
		    category);
	    }

	    gameLevel = gApp._(this.levelNames[gameLevel]);
	    //Debug.write("gameLevel", gameLevel, this.v.gameLevelView.t, this.v.gameLevelView.t.text);
	    if (this.v.gameLevelView.t.text != gameLevel) {
		this.v.gameLevelView.t.setAttribute(
		    "text",
		    gameLevel);
	    }

	    currentScore = gApp.formatNumber(currentScore, null);
	    //Debug.write("currentScore", currentScore, this.v.currentScoreView.t, this.v.currentScoreView.t.text);
	    if (this.v.currentScoreView.t.text != currentScore) {
		this.v.currentScoreView.t.setAttribute(
		    "text",
		    currentScore);
	    }

	    annualChange = gApp.formatNumber(annualChange, null);
	    //Debug.write("annualChange", annualChange, this.v.annualChange.t, this.v.annualChange.t.text);
	    if (this.v.annualChange.t.text != annualChange) {
		this.v.annualChange.t.setAttribute(
		    "text",
		    annualChange);
	    }

	    var goodJobText =
	        gApp._('Approve:') + 
		' ' + 
		goodJob + 
		'%<br/>' +
		gApp._('Disapprove:') + 
		' ' + 
		(100 - goodJob) + 
		'%';

            //Debug.write("goodJob", goodJobText, this.v.goodJobView.t, this.v.goodJobView.t.text);
	    if (this.v.goodJobView.t.text != goodJobText) {
		this.v.goodJobView.t.setAttribute(
		    "text",
		    goodJobText);
	    }

	    var worstProblemsText = "";
	    var i;
	    var n = worstProblems.length;
	    var a = [];
	    for (i = 0; i < n; i++) {
		var pair = worstProblems[i];
		var problemNameIndex = pair[0];
		var problemPercent = pair[1]; 
		var s = 
		    gApp._(this.problemNames[problemNameIndex]) +
		    ": " + 
		    problemPercent +
		    "%";
	        a.push(s);
	    }
	    worstProblemsText = a.join('<br/>');
	    //Debug.write("worstProblems", worstProblemsText, this.v.worstProblemsView.t, this.v.worstProblemsView.t.text);
	    if (this.v.worstProblemsView.t.text != worstProblemsText) {
		this.v.worstProblemsView.t.setAttribute(
		    "text",
		    worstProblemsText);
	    }

	  ]]>
	</method>


	<view name="v"
	    width="${parent.width - 20}"
	    height="${parent.height - 45}"
	>

	    <handler name="onwidth"><![CDATA[
	        this.l.update();
	      ]]>
	    </handler>

	    <handler name="onheight"><![CDATA[
	        this.l.update();
	      ]]>
	    </handler>

	    <wrappinglayout name="l"
	        axis="x"
		xspacing="10"
		yspacing="5"
	    />


	    <view name="populationView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Population:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="migrationView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Migration:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width}"
		    text=""
		/>
	    </view>

	    <view name="assessedValueView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('City Value:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="categoryView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Category:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="gameLevelView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Game Level:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="currentScoreView"
	        width="${classroot.narrowColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Current Score:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="annualChange"
	        width="${classroot.mediumColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Annual Change:')}"
		    fontstyle="bold"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		/>
	    </view>

	    <view name="goodJobView"
	        width="${classroot.mediumColumnWidth}"
 	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Popularity:')}"
		    fontstyle="bold"
		    multiline="true"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		    multiline="true"
		/>
	    </view>

	    <view name="worstProblemsView"
	        width="${classroot.wideColumnWidth}"
	    >
	        <simplelayout axis="y"/>
		<text
		    width="${parent.width}"
		    text="${gApp._('Problems:')}"
		    fontstyle="bold"
		    multiline="true"
		/>
		<text name="t"
		    x="${classroot.indent}"
		    width="${parent.width - this.x}"
		    text=""
		    multiline="true"
		/>
	    </view>

	</view>

    </class>


</library>
