<library>


    <!-- History View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="historyview"
        clip="true"
    >


	<attribute name="history" value="null"/>
	<attribute name="active" value="true"/>
        <attribute name="uniqueID" value="null"/>
	<attribute name="yearLabels" value="$once{[]}"/>

	<attribute name="historyColors" value="$once{[
	    0x00ff00, /* Res: Light Green */
	    0x0000a0, /* Com: Dark Blue */
	    0xffff00, /* Ind: Yellow */
	    0x008000, /* Money: Dark Green */
	    0xff0000, /* Crime: Red */
	    0x507020  /* Pollution: Olive */
	]}"/>

	<attribute name="historyRanges" value="$once{[
	    [0, 768], /* Res */
	    [0, 768], /* Com */
	    [0, 768], /* Ind */
	    [0, 256], /* Money */
	    [0, 128], /* Crime */
	    [0, 128]  /* Pollution */
	]}"/>

	<attribute name="historyTypes" value="[
	    0, 1, 2, 3, 4, 5
	]"/>

	<attribute name="legendWidth" value="100"/>
	<attribute name="legendItemHeight" value="20"/>
	<attribute name="bottomEdgeHeight" value="30"/>
	<attribute name="gap" value="5"/>
	<attribute name="border" value="3"/>
	<attribute name="historyScale" value="1"/>
	<attribute name="historyCount" value="120"/>
	<attribute name="historyOffset" value="0"/>
	<attribute name="historyTypeCount" value="6"/>
	<attribute name="historyScaleCount" value="2"/>
	<attribute name="fillColorNormal" value="0xb0b0b0"/>
	<attribute name="fillColorSelected" value="0xffffff"/>
	<attribute name="strokeColor" value="0x000000"/>
	<attribute name="redrawDelegate" value="null"/>
	<attribute name="redrawDelay" value="100"/>
	<attribute name="redrawingSoon" value="false"/>


	<handler name="oninit" args="arg"><![CDATA[
	    //Debug.write("==== historyview oninit", this);
            this.uniqueID = gApp.makeUniqueID();
	    gApp.objectIDs[this.uniqueID] = this;
            this.updateInterests();
	  ]]>
	</handler>


	<handler name="ondestroy" args="arg"><![CDATA[
            gApp.removePoller(this);
	  ]]>
	</handler>


        <handler name="onactive"><![CDATA[
            //Debug.write("tileview onactive", this.active);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onvisible"><![CDATA[
            //Debug.write("tileview onvisible", this.visible);
            this.updateInterests();
          ]]>
        </handler>


	<handler name="onwidth" args="width"><![CDATA[
	    if (this.inited) {
    	        this.redrawSoon();
	    }
	  ]]>
	</handler>


	<handler name="onheight" args="height"><![CDATA[
	    if (this.inited) {
	        this.redrawSoon();
	    }
	  ]]>
	</handler>


	<handler name="onhistory" args="history"><![CDATA[
	    if (this.inited) {
	        this.redrawSoon();
	    }
	  ]]>
	</handler>


        <method name="updateInterests"><![CDATA[
            if (this.active && this.visible) {
                gApp.addPoller(this);
            } else {
                gApp.removePoller(this);
            }
          ]]>
        </method>


        <method name="poll"><![CDATA[
            //Debug.write("historyview poll", this);

	    return {
	        message: 'historyview',
	        id: this.uniqueID,
		scale: this.historyScale,
		count: this.historyCount,
		offset: this.historyOffset,
		types: this.historyTypes,
		width: this.width,
		height: this.height
            };
          ]]>
        </method>


	<method name="redrawSoon"><![CDATA[
	    if (this.redrawingSoon) {
	        return;
	    }

	    if (!this.redrawDelegate) {
	        this.redrawDelegate = 
		    new LzDelegate(this, 'handleRedraw');
	    }

	    lz.Timer.resetTimer(this.redrawDelegate, this.redrawDelay);
	    this.redrawingSoon = true;
	  ]]>
	</method>


	<method name="handleRedraw" args="arg"><![CDATA[
	    //Debug.write("================ handleRedraw", this, this.redrawingSoon, arg);
	    this.redrawingSoon = false;
	    lz.Timer.removeTimer(this.redrawDelegate);
	    this.drawHistory();
	  ]]>
	</method>


	<method name="removeHistoryType" args="type"><![CDATA[
	    var historyTypes = this.historyTypes;
	    var index = 
	        gApp.indexOf(historyTypes, type);

	    if (index < 0) {
	        return;
	    }

	    historyTypes.splice(index, 1);
	    this.redrawSoon();
	  ]]>
	</method>


	<method name="addHistoryType" args="type"><![CDATA[
	    var historyTypes = this.historyTypes;
	    var index = 
	        gApp.indexOf(historyTypes, type);

	    if (index >= 0) {
	        return;
	    }

	    historyTypes.push(type);
	    this.redrawSoon();
	  ]]>
	</method>


	<method name="setHistoryType" args="type, value"><![CDATA[
	    if (value) {
	        this.addHistoryType(type);
	    } else {
	        this.removeHistoryType(type);
	    }
	  ]]>
	</method>


	<method name="setHistoryScale" args="historyScale"><![CDATA[
	    if (historyScale == this.historyScale) {
	        return;
	    }

	    if (historyScale != this.historyScale) {
		this.setAttribute("historyScale", historyScale);
		this.redrawSoon(); 
	    }
	  ]]>
	</method>


	<method name="getHistoryRect"><![CDATA[
	    var dv = this.v.dv;
	    var histX = 0;
	    var histY = 0;
	    var histWidth = dv.width;
	    var histHeight = dv.height - this.bottomEdgeHeight;
	    histWidth = Math.max(1, histWidth);
	    histHeight = Math.max(1, histHeight);
	    return [histX, histY, histWidth, histHeight];
	  ]]>
	</method>


	<method name="drawHistory"><![CDATA[
	    var history = this.history;
	    //Debug.write("==== DRAWHISTORY", history);

	    if (!history) {
	        return;
	    }

	    var dv = this.v.dv;

	    var histories = history['histories'];
	    var historyRect = this.getHistoryRect();
	    var histX = historyRect[0];
	    var histY = historyRect[1];
	    var histWidth = historyRect[2];
	    var histHeight = historyRect[3];

	    // Draw background.

	    dv.beginPath();
	    dv.rect(
		0,
		0,
		dv.width,
		dv.height,
		0);
	    dv.fillStyle = 0xffffff;
	    dv.fill();

	    histX += 2;
	    histWidth -= 4;
	    histY += 2;
	    histHeight -= 4;

	    dv.beginPath();
	    dv.rect(
	        histX,
		histY,
		histWidth,
		histHeight,
		0);

	    dv.fillStyle = this.fillColorNormal;
	    dv.fill();

	    // Draw years.

	    var year = history['year'];
	    var month = history['month'];

	    dv.lineWidth = 1;

	    dv.strokeStyle = this.strokeColor;

	    var sx = histWidth / 120.0;
	    var r;

	    var historyScale = history['scale'];

	    if (historyScale == 0) {
		var dur = 120;
		r = [dur - month, -dur / 10];
	    } else if (historyScale == 1) {
		sx /= 10;
		var past = 10 * (year % 10);
		year = Math.floor(year / 10) * 10;
		var dur = 1200;
		r = [dur - past, -dur / 10];
	    } else {
		Debug.write("Invalid historyScale", historyScale);
		return;
	    }

	    var y = histHeight + this.bottomEdgeHeight;

	    var fontsize =
	        Math.max(1, Math.min(Math.floor((histWidth - 40) / 40), 24));

	    var yearLabels = this.yearLabels;
	    var labelIndex;
	    var i;
	    for (i = r[0], labelIndex = 0; 
	         i >= -dur;
		 i += r[1], labelIndex++) {

		var x = i * sx;

		dv.beginPath();
		dv.moveTo(histX + x, histY + 0);
		dv.lineTo(histX + x, histY + y);
		dv.stroke();

		var label;
		if (historyScale == 0) {
		    label = "" + year;
		    year -= 1;
		} else if (historyScale == 1) {
		    label = "" + year;
		    year -= 10;
		}

		var xx = histX + x + 4;
		var yy = histY + histHeight + (this.bottomEdgeHeight / 2);

		yy += 1; // Fudge the position.

		while (labelIndex >= yearLabels.length) {
		    var newLabel = 
		        new lz.text(
			    v.labelView,
			    {
				resize: true,
				fontsize: fontsize,
				fontstyle: 'bold'
			    });
		    yearLabels.push(newLabel);
		}

		var yearLabel = yearLabels[labelIndex];

		if (yearLabel.text != label) {
		    yearLabel.setAttribute("text", label);
		}

		if (yearLabel.x != xx) {
		    yearLabel.setAttribute("x", xx);
		}

		if (yearLabel.fontsize != fontsize) {
		    yearLabel.setAttribute("fontsize", fontsize);
		}

		if (!yearLabel.visible) {
		    yearLabel.setAttribute("visible", true);
		}

	    }

	    for (;
	         labelIndex < yearLabels.length;
		 labelIndex++) {
	        var label = yearLabels[labelIndex];
		if (label.visible) {
		    label.setAttribute("visible", false);
		}
	    }

	    dv.beginPath();
	    dv.rect(
	        histX,
		histY,
		histWidth,
		histHeight,
		0);

	    dv.strokeStyle = this.strokeColor;
	    dv.lineWidth = 2;
	    dv.stroke();

	    // Draw histories.

	    // Scale the residential, commercial and industrial histories
	    // together relative to the max of all three.  Up to 128 they
	    // are not scaled. Starting at 128 they are scaled down so the
	    // maximum is always at the top of the history.

	    function calcScale(maxVal)
	    {
		if (maxVal < 128) {
		    maxVal = 0;
		}
		if (maxVal > 0) {
		    return 128.0 / maxVal;
		} else {
		    return 1.0;
		}
	    }

	    var history;
	    var range;
	    var historyCount = this.historyCount;
	    var historyColors = this.historyColors;
	    var historyRange = 128;
	    var rciMax = 0;

	    var scaleValues = [
		0, 0, 0, 0, 0, 0
	    ];

	    var historyType;
	    for (historyType = 0; historyType < 6; historyType++) {
	        var historyDict = histories[historyType];
	        if (!historyDict) {
		    continue;
		}

		if (historyType < 3) {
		    // Scale the residential, commercial and
		    // industrial histories together.
		    rciMax = Math.max(rciMax, val);
		} else {
		    // Scale the money, crime and pollution histories
		    // independently of each other.
		    scaleValues[historyType] =
		        calcScale(historyDict['valueRange'][1]);
		}
	    }

	    // Poke in the residential, commercial and industrial
	    // values scaled together.
	    var rciScale = calcScale(rciMax);
	    scaleValues[0] = rciScale;
	    scaleValues[1] = rciScale;
	    scaleValues[2] = rciScale;

	    dv.lineWidth = 2;

	    var historyType;
	    for (historyType = 0; historyType < 6; historyType++) {
	        var historyDict = histories[historyType];
	        if (!historyDict) {
		    continue;
		}

		dv.beginPath();

		var scaleValue = scaleValues[historyType];
		var valueScale = historyDict['valueScale'];
		var values = historyDict['values'];
		var first = true;
		var historyIndex;
		for (historyIndex = historyCount - 1;
		     historyIndex >= 0;
		     historyIndex -= 1) {

		    var val = values[historyIndex] * valueScale;
		    //var val = values[historyIndex] * scaleValue;

		    var x = (
		        histX +
			(historyIndex * (histWidth / (historyCount - 1))));

		    var y = (
		        histY +
			histHeight -
			(val * (histHeight / historyRange)));

		    if (first) {
		        dv.moveTo(x, y);
			first = false;
		    } else {
			dv.lineTo(x, y);
		    }
		}

		dv.strokeStyle = historyColors[historyType];
		dv.stroke();
	    }

	  ]]>
	</method>


	<view name="v"
	    x="0"
	    y="0"
	    width="${parent.width}"
	    height="${parent.height}"
	>

	    <drawview name="dv"
	        x="0"
		width="${parent.width - this.x - classroot.gap - parent.legend.width}"
		height="${parent.height}"
		bgcolor="0x808080"
		clip="true"
	    >

	        <handler name="oncontext"><![CDATA[
		    //Debug.write("drawview oncontext", this);
		    this.redrawView();
		  ]]>
		</handler>

	        <method name="handleUpdate"><![CDATA[
		    //Debug.write("drawview handleUpdate", classroot.history);
		    this.redrawView();
		  ]]>
		</method>

	        <method name="redrawView"><![CDATA[
		    //Debug.write("drawview redrawView", "history", classroot.history);
		  ]]>
		</method>

	    </drawview>

	    <view name="labelView"
	        x="0"
		y="${parent.dv.y + parent.dv.height - classroot.bottomEdgeHeight}"
		width="${parent.dv.width}"
		height="${parent.dv.y + parent.dv.height - this.y}"
		clip="true"
	    />

	    <view name="legend"
	        x="${parent.width - this.width}"
		y="0"
		width="${classroot.legendWidth}"
		height="${parent.height}"
	    >

	        <simplelayout
		    axis="y" 
		    inset="0" 
		    spacing="2"
		/>


		<view name="histories"
		    width="${parent.width}"
		>

		    <simplelayout
			axis="y" 
			inset="0" 
			spacing="0"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="0"
			label="Residential"
			description="Show the residential population history."
			color="0x00ff00"
			range="768"
			history="${classroot}"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="1"
			label="Commercial"
			description="Show the commercial population history."
			color="0x0000a0"
			range="768"
			history="${classroot}"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="2"
			label="Industrial"
			description="Show the industrial population history."
			color="0xffff00"
			range="768"
			history="${classroot}"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="3"
			label="Money"
			description="Show the city funds history."
			color="0x008000"
			range="256"
			history="${classroot}"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="4"
			label="Crime"
			description="Show the crime rate history."
			color="0xff0000"
			range="128"
			history="${classroot}"
		    />

		    <historycheckbox
			width="${parent.width}"
			height="${classroot.legendItemHeight}"
			type="5"
			label="Pollution"
			description="Show the pollution rate history."
			color="0x507020"
			range="128"
			history="${classroot}"
		    />

	        </view>

		<radiogroup name="timeScale"
		    width="${parent.width}"
		    layout="class:simplelayout; axis:y; spacing:1"
		    bgcolor="0xffffff"
		>


		    <handler name="oninit" args="arg"><![CDATA[
			this.setAttribute("value", classroot.historyScale);
		      ]]>
		    </handler>

		    <handler name="onvalue" args="arg"><![CDATA[
			 classroot.setHistoryScale(this.value);
		      ]]>
		    </handler>


		    <myradiobutton
		        value="0"
		        text="10 Years"
		    />

		    <myradiobutton
		        value="1"
		        text="120 Years"
		    />


		</radiogroup>

	    </view>

	</view>


    </class>


</library>
