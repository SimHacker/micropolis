<library>


    <!-- Edit Tile View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="edittileview" extends="tileview"
    >


        <attribute name="panning" value="false"/>
        <attribute name="pieing" value="false"/>
	<attribute name="pieTileCol" value="0"/>
	<attribute name="pieTileRow" value="0"/>
	<attribute name="panCursorStartX" value="0"/>
	<attribute name="panCursorStartY" value="0"/>
	<attribute name="panContainerStartX" value="0"/>
	<attribute name="panContainerStartY" value="0"/>
	<attribute name="panAutoScrollX" value="0"/>
	<attribute name="panAutoScrollY" value="0"/>
	<attribute name="panAutoScrollEdge" value="32"/>
	<attribute name="panAutoScrollSpeed" value="256"/>
	<attribute name="panAutoScrollLastTime" value="0"/>
	<attribute name="panDelegate" value="null"/>
	<attribute name="viewExtraPan" value="8"/>
	<attribute name="viewExtraAutoScroll" value="16"/>
	<attribute name="shiftDown" value="false"/>
	<attribute name="altDown" value="false"/>
	<attribute name="controlDown" value="false"/>
	<attribute name="zoom" value="2"/>
	<attribute name="cursorVisible" value="true"/>


        <handler name="onpanning"><![CDATA[
            if (this.panning) {
	        this.panCursorStartX = this.getMouse("x");
		this.panCursorStartY = this.getMouse("y");
		this.panContainerStartX = this.container.x;
		this.panContainerStartY = this.container.y;
		this.panAutoScrollX = 0;
		this.panAutoScrollY = 0;
		this.panAutoScrollLastTime = (new Date()).time;

		if (!this.doingPan) {
		    this.doingPan = true;
		    var del = this.panDelegate;
		    if (!del) {
			del = new lz.Delegate(this, 'handlePan');
			this.panDelegate = del;
		    }
		    lz.IdleService.LzIdle.callOnIdle(del);
		}

		var viewExtraPan = this.viewExtraPan;
	        this.viewExtraLeft = viewExtraPan;
	        this.viewExtraRight = viewExtraPan;
	        this.viewExtraTop = viewExtraPan;
	        this.viewExtraBottom = viewExtraPan;
	    } else {
	        this.viewExtraLeft = 0;
	        this.viewExtraRight = 0;
	        this.viewExtraTop = 0;
	        this.viewExtraBottom = 0;
	    }
          ]]>
        </handler>


	<handler name="onmousedown" args="arg"><![CDATA[
	    this.updateKeys();

	    this.resetTracking();

	    if (shiftDown) {
	        // TODO: set this.pieing to true, and clear it after last pie menu pops down.
		this.setAttribute("pieTileCol", this.tileCol);
		this.setAttribute("pieTileRow", this.tileRow);
	        gEditTileViewPie.popupAtCursor(false);
	    } else if (altDown) {
	        this.setAttribute('panning', true);
	    } else {
	        this.setAttribute('drawing', true);
	    }
	  ]]>
	</handler>


	<handler name="onmouseup" args="arg"><![CDATA[
	    this.resetTracking();
	  ]]>
	</handler>


	<method name="updateKeys"><![CDATA[
	    this.setAttribute("altDown", lz.KeysService.LzKeys.isKeyDown('alt'));
	    this.setAttribute("controlDown", lz.KeysService.LzKeys.isKeyDown('control'));
	    this.setAttribute("shiftDown", lz.KeysService.LzKeys.isKeyDown('shift'));
	  ]]>
	</method>


	<method name="animateCursor"><![CDATA[
	    this.updateKeys();
	    this.container.toolCur.doAnimate();
	    this.container.panCur.doAnimate();
	    this.container.pieCur.doAnimate();
	  ]]>
	</method>


	<method name="resetTracking"><![CDATA[
	    if (this.drawing) {
	        this.setAttribute("drawing", false);
	    }
	    if (this.panning) {
	        this.setAttribute("panning", false);
	    }
	  ]]>
	</method>


	<method name="startEdgeScroll"><![CDATA[
	    this.setAttribute("panning", true);
	  ]]>
	</method>


	<method name="stopEdgeScroll"><![CDATA[
	    this.setAttribute("panning", false);
	  ]]>
	</method>


	<method name="handlePan" args="arg"><![CDATA[
	    this.doingPan = false;

	    if (!this.panning) {
	        return;
	    }

	    var cursorX = this.getMouse("x");
	    var cursorY = this.getMouse("y");

	    var panAutoScrollEdge = this.panAutoScrollEdge;
	    var scrollLeft = cursorX < panAutoScrollEdge;
	    var scrollRight = cursorX >= (this.width - panAutoScrollEdge);
	    var scrollTop = cursorY < panAutoScrollEdge;
	    var scrollBottom = cursorY >= (this.height - panAutoScrollEdge);
            var panning = scrollLeft || scrollRight || scrollTop || scrollBottom;
	    var viewExtraPan = this.viewExtraPan;
	    var viewExtraAutoScroll = this.viewExtraAutoScroll;
	    //Debug.write("pan", panning, "LRTB", scrollLeft, scrollRight, scrollTop, scrollBottom, "cur", cursorX, cursorY, "this", this.width, this.height, "edge", panAutoScrollEdge);


	    if (panning) {
		var now = (new Date()).time;
	        var panAutoScrollLastTime = this.panAutoScrollLastTime;
		this.panAutoScrollLastTime = now;
		if (panAutoScrollLastTime) {
		    var elapsed = (now - panAutoScrollLastTime) / 1000.0;
		    this.panAutoScrollLastTime = now;
		    var panDistance = elapsed * this.panAutoScrollSpeed;
		    //Debug.write("elapsed", elapsed, "distance", panDistance);

		    if (scrollLeft) {
		       this.panAutoScrollX -= panDistance;
		        this.viewExtraRight = viewExtraAutoScroll;
		    } else {
		        this.viewExtraRight = 0;
		    }

		    if (scrollRight) {
		       this.panAutoScrollX += panDistance;
		        this.viewExtraLeft = viewExtraAutoScroll;
		    } else {
		        this.viewExtraLeft = 0;
		    }

		    if (scrollTop) {
		       this.panAutoScrollY -= panDistance;
		        this.viewExtraBottom = viewExtraAutoScroll;
		    } else {
		        this.viewExtraBottom = 0;
		    }

		    if (scrollBottom) {
		       this.panAutoScrollY += panDistance;
		        this.viewExtraTop = viewExtraAutoScroll;
		    } else {
		        this.viewExtraTop = 0;
		    }

		}
            } else {
	        this.panAutoScrollLastTime = 0;
		this.viewExtraLeft = viewExtraPan;
		this.viewExtraRight = viewExtraPan;
		this.viewExtraTop = viewExtraPan;
		this.viewExtraBottom = viewExtraPan;
	    }

	    var w2 = this.width / 2;
	    var h2 = this.height / 2;
	    var sx = this.panContainerStartX + (cursorX - this.panCursorStartX);
	    var sy = this.panContainerStartY + (cursorY - this.panCursorStartY);
	    var x = 
	        Math.max(
		    w2 - this.container.width,
		    Math.min(
		        sx + this.panAutoScrollX,
			w2));
	   //this.panAutoScrollX = x - sx;
	    var y = 
	        Math.max(
		    h2 - this.container.height,
		    Math.min(
			sy + this.panAutoScrollY,
			h2));
	   //this.panAutoScrollY = y - sy;

	    if (x != this.container.x) {
	        this.container.setAttribute("x", x);
	    }
	    if (y != this.container.y) {
	        this.container.setAttribute("y", y);
	    }

	    lz.IdleService.LzIdle.callOnIdle(this.panDelegate);
	  ]]>
	</method>


	<toolcursor name="toolCur" id="gToolCur"
	    drawing="${classroot.drawing}"
	    tileSize="${classroot.viewTileSize}"
	    visible="${classroot.cursorVisible &amp;&amp;
	    	       !classroot.panning &amp;&amp;
		       !classroot.pieing &amp;&amp;
		       !classroot.shiftDown &amp;&amp;
		       !classroot.altDown}"
	    placement="container"
	/>


	<pancursor name="panCur" id="gPanCur"
	    visible="${classroot.cursorVisible &amp;&amp;
	    	       (classroot.panning ||
		        classroot.altDown)}"
	    frame="${classroot.panning ? 2 : 1}"
	    placement="container"
	/>	    

	<piecursor name="pieCur" id="gPieCur"
	    visible="${classroot.cursorVisible &amp;&amp;
	    	       (classroot.pieing ||
		        classroot.shiftDown)}"
	    frame="${classroot.pieing ? 2 : 1}"
	    placement="container"
	/>	    

<!--
	<view name="scrollTop"
	    x="0"
	    y="0"
	    width="${parent.width}"
	    height="${parent.panAutoScrollEdge}"
	    placement="overlay"
	    onmousedown="classroot.startEdgeScroll()"
	    onmouseup="classroot.stopEdgeScroll()"
	/>

	<view name="scrollBottom"
	    x="0"
	    y="${parent.height - classroot.panAutoScrollEdge}"
	    width="${parent.width}"
	    height="${classroot.panAutoScrollEdge}"
	    placement="overlay"
	    onmousedown="classroot.startEdgeScroll()"
	    onmouseup="classroot.stopEdgeScroll()"
	/>

	<view name="scrollLeft"
	    x="0"
	    y="0"
	    width="${classroot.panAutoScrollEdge}"
	    height="${parent.height}"
	    placement="overlay"
	    onmousedown="classroot.startEdgeScroll()"
	    onmouseup="classroot.stopEdgeScroll()"
	/>

	<view name="scrollRight"
	    x="${parent.width - classroot.panAutoScrollEdge}"
	    y="0"
	    width="${classroot.panAutoScrollEdge}"
	    height="${parent.height}"
	    placement="overlay"
	    onmousedown="classroot.startEdgeScroll()"
	    onmouseup="classroot.stopEdgeScroll()"
	/>
-->


    </class>


</library>
