<library>


    <!-- Notice View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="noticeview"
        clip="true"
	height="${Math.max(this.textView.height, this.mapWidth + (2 * this.gap))}"
    >


	<attribute name="active" value="true"/>
        <attribute name="currentNotice" value="null"/>
        <attribute name="currentX" value="-1"/>
        <attribute name="currentY" value="-1"/>
        <attribute name="currentSprite" value="0"/>
        <attribute name="title" type="string" value=""/>
        <attribute name="description" type="string" value=""/>
        <attribute name="url" type="string" value=""/>
        <attribute name="picture" value="null"/>
        <attribute name="showPicture" value="false"/>
        <attribute name="showMap" value="false"/>
	<attribute name="gap" value="5" type="number"/>
	<attribute name="mapWidth" value="150" type="number"/>
	<attribute name="textX" value="${
	    (this.showMap ? (this.mapWidth + this.gap) : 0) +
	    (this.showPicture ? (this.pictureView.width + this.gap) : 0)
	 }"/>
	<attribute name="textWidth" value="${
	    this.width - this.textX
	 }"/>


	<handler name="onmessage" reference="gApp"><![CDATA[
	    var message = gApp.message;
	    var number = message['number'];
	    var x = message['x'];
	    var y = message['y'];

	    this.setCurrentNotice(number, x, y);
	  ]]>
        </handler>


	<handler name="onnotice" reference="gApp"><![CDATA[
	    var notice = gApp.notice;
	    this.configureNotice(
	        notice['title'],
		notice['description'],
		notice['url'],
		notice['showPicture'],
		notice['picture'],
		notice['showMap'],
		notice['x'],
		notice['y']);
	  ]]>
        </handler>


	<method name="setCurrentNotice" args="noticeNumber, x, y"><![CDATA[
	    if ((x === undefined) || (x === null) ||
	        (y === undefined) || (y === null)) {
	        x = -1;
	        y = -1;
	    }

	    var notice = this.findNotice(noticeNumber);
	    if (!notice) {
	        return;
	    }

	    var attributes = notice.attributes;
	    var title = attributes['title'];
	    var description = attributes['description'];
	    var url = attributes['url'];
	    var picture = attributes['picture'];
	    var showPicture = (picture && (picture != "")) ? true : false;
	    var showMap = attributes['showMap'] == "true";
	    var currentSprite = attributes['sprite'] ? parseInt(attributes['sprite']) : 0;

	    this.configureNotice(
	        title,
		description,
		url,
		showPicture,
		picture,
		showMap,
		x,
		y);
	  ]]>
	</method>


	<method name="configureNotice" args="title, description, url, showPicture, picture, showMap, x, y"><![CDATA[
	    this.setAttribute("title", gApp._(title));
	    this.setAttribute("description", gApp._(description));
	    this.setAttribute("url", gApp._(url));
	    this.setAttribute("showPicture", showPicture);
	    this.setAttribute("picture", picture);
	    this.setAttribute("showMap", showMap);
	    this.setAttribute("currentX", x);
	    this.setAttribute("currentY", y);

	    if (showMap && (x >= 0) && (y >= 0)) {
		this.noticeTileView.centerOnTile(x, y);
	    }
	  ]]>
	</method>


	<method name="findNotice" args="id"><![CDATA[
	    //Debug.write("FINDNOTICE", this, id);
	    id = "" + id;
	    var notices = canvas.ds_notices.data[0].childNodes;
	    //Debug.write("notices", notices);
	    var n = notices.length;
	    var i;
	    for (i = 0; i < n; i++) {
	        var notice = notices[i];
		if (id == notice.attributes['id']) {
		    return notice;
		}
	    }
	    return null;
	  ]]>
	</method>


	<view name="textView"
	    x="${classroot.textX}"
	    y="0"
	    width="${classroot.textWidth}"
	    clip="true"
	    height="${this.bottomView.y}"
	>

	    <simplelayout
		axis="y"
		inset="5"
		spacing="${classroot.gap}"
	    />

	    <text name="titleText"
		x="5"
		width="${parent.width - (classroot.gap * 2)}"
		fontsize="20"
		fontstyle="bold"
		multiline="true"
		fgcolor="0xffffff"
		text="${classroot.title}"
	    />

	    <text name="descriptionText"
		x="5"
		width="${parent.width - (classroot.gap * 2)}"
		multiline="true"
		fontsize="14"
		fontstyle="bold"
		fgcolor="0xffffff"
		text="${classroot.description}"
	    />

	    <view name="buttonsView"
		x="5"
		width="${parent.width - (classroot.gap * 2)}"
	    >

		<wrappinglayout
		    axis="x"
		    spacing="${classroot.gap}"
		/>

		<button
		    visible="${(classroot.url != null) &amp;&amp;
			       (classroot.url != '')}"
		    text="${gApp._('Learn More')}"
		>

		    <handler name="onclick"><![CDATA[
			Debug.write("ONCLICK", this, classroot.url);
			lz.Browser.loadURL(classroot.url, '_blank');
		      ]]>
		    </handler>

		</button>

	    </view>

	    <view name="bottomView"/>

	</view>

	<noticetileview name="noticeTileView" id="gNoticeTileView"
	    x="0"
	    y="0"
	    width="${classroot.mapWidth}"
	    height="${Math.max(parent.height - this.y, classroot.mapWidth)}"
	    visible="${classroot.showMap}"
	    bgcolor="0xBC6F56"
	    active="${classroot.active}"
	/>

	<view name="pictureView"
	    x="${classroot.showMap ? (parent.noticeTileView.x + parent.noticeTileView.width + classroot.gap) : 0}"
	    y="0"
	    bgcolor="0x0000ff"
	    visible="${classroot.showPicture}"
	>

	    <handler name="onpicture" reference="classroot"><![CDATA[
	        var picture = parent['picture'];
		if (picture && (picture != "")) {
		    this.setAttribute("resource", picture);
		} else {
		    this.unload();
		}
	      ]]>
	    </handler>

	</view>

    </class>


</library>
