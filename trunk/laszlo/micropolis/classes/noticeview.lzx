<library>


    <!-- Notice View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="noticeview"
        clip="true"
    >


	<attribute name="active" value="true"/>
        <attribute name="currentNotice" value="null"/>
        <attribute name="currentX" value="-1"/>
        <attribute name="currentY" value="-1"/>
        <attribute name="currentSprite" value="0"/>
        <attribute name="title" type="string" value="Micropolis"/>
        <attribute name="description" type="string" value="Welcome to Micropolis!"/>
        <attribute name="picture" value="null"/>
        <attribute name="showPicture" value="false"/>
        <attribute name="showMap" value="false"/>
	<attribute name="gap" value="5" type="number"/>
	<attribute name="mapWidth" value="150" type="number"/>
	<attribute name="textWidth" value="${
	    this.width - 
	    (this.showMap ? (this.mapWidth + this.gap) : 0) -
	    (this.showPicture ? (this.pictureView.width + this.gap) : 0)
	 }"/>


	<handler name="oninit"><![CDATA[
	    //Debug.write("==== noticeview oninit", this);
	    gApp.expressInterest(this, ['message']);
	    this.updateNotice();
	  ]]>
	</handler>


	<handler name="onactive" args="arg"><![CDATA[
	    //Debug.write("onactive", this.active, this);
	  ]]>
	</handler>


	<method name="handleUpdate" args="args"><![CDATA[
	    //Debug.write("========= noticeview handleUpdate args", args);
	    var number = args['number'];
	    this.setCurrentNotice(number, args['x'], args['y']);
	  ]]>
	</method>


	<method name="setCurrentNotice" args="number, x, y"><![CDATA[
	    if ((x === undefined) || (x === null) ||
	        (y === undefined) || (y === null)) {
	        x = -1;
	        y = -1;
	    }
	    this.setAttribute("currentNotice", number);
	    this.setAttribute("currentX", x);
	    this.setAttribute("currentY", y);
	    this.updateNotice();
	  ]]>
	</method>


	<method name="findNotice" args="id"><![CDATA[
	    //Debug.write("FINDNOTICE", this, id);
	    id = "" + id;
	    var notices = canvas.ds_notices.data[0].childNodes;
	    //Debug.write("notices", notices);
	    var n = notices.length;
	    var i;
	    for (i = 0; i < n; i++) {
	        var notice = notices[i];
		if (id == notice.attributes['id']) {
		    return notice;
		}
	    }
	    return null;
	  ]]>
	</method>


	<method name="getNoticeDescription" args="notice"><![CDATA[
	    var textNode = notice.childNodes && notice.childNodes[0];
	    var description = textNode ? textNode.data : '';
	    return description;
	  ]]>
	</method>


	<method name="updateNotice"><![CDATA[
	    //Debug.write("updateNotice", this, this.currentNotice);
	    var notice = this.findNotice(this.currentNotice);
	    if (!notice) {
	        return;
	    }

	    //Debug.write("==== NOTICE", notice);
	    var attributes = notice.attributes;
	    var title = attributes['title'];
	    var description = this.getNoticeDescription(notice);
	    var picture = attributes['picture'];
	    var showPicture = (picture && (picture != "")) ? true : false;
	    var showMap = attributes['showMap'] == "true";
	    var currentSprite = attributes['sprite'] ? parseInt(attributes['sprite']) : 0;
	    var currentX = this.currentX;
	    var currentY = this.currentY;

	    this.setAttribute("title", title);
	    this.setAttribute("description", description);
	    this.setAttribute("showPicture", showPicture);
	    this.setAttribute("picture", picture);
	    this.setAttribute("showMap", showMap);

	    if (showMap && (currentX >= 0) && (currentY >= 0)) {
	    	this.mapView.centerOnTile(currentX, currentY);
	    }

	  ]]>
	</method>


	<text name="titleText"
	    x="0"
	    y="0"
	    width="${classroot.textWidth}"
	    fontsize="20"
	    fontstyle="bold"
	    multiline="true"
	    text="${classroot.title}"
	/>

	<text name="descriptionText"
	    x="0"
	    y="${parent.titleText.y + parent.titleText.height + classroot.gap}"
	    width="${classroot.textWidth}"
	    height="${parent.height - this.y}"
	    multiline="true"
	    fontsize="14"
	    text="${classroot.description}"
	/>

	<view name="pictureView"
	    x="${parent.width - (classroot.showMap ? (classroot.mapWidth + classroot.gap) : 0) - this.width}"
	    y="0"
	    bgcolor="0x0000ff"
	    visible="${classroot.showPicture}"
	>

	    <handler name="onpicture" reference="classroot"><![CDATA[
	        var picture = parent['picture'];
		if (picture && (picture != "")) {
		    this.setAttribute("source", picture);
		} else {
		    this.unload();
		}
	      ]]>
	    </handler>

	</view>

	<tileview name="mapView" id="gNoticeMapView"
	    x="${parent.width - this.width}"
	    y="0"
	    width="${classroot.mapWidth}"
	    height="${Math.max(parent.height - this.y, 0)}"
	    visible="${classroot.showMap}"
	    bgcolor="0xBC6F56"
	    active="${classroot.active}"
	/>

    </class>


</library>
