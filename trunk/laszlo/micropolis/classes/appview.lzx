<library>


    <!-- Application View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="appview">


        <attribute name="active" value="true"/>
        <attribute name="pollDelay" value="250"/>
        <attribute name="pollDelaySoon" value="10"/>
        <attribute name="animateDelay" value="100"/>
        <attribute name="pollActive" value="false"/>
        <attribute name="pollDelegate" value="null"/>
        <attribute name="polls" value="1"/>
        <attribute name="pollers" value="[]"/>
        <attribute name="idles" value="1"/>
        <attribute name="idlers" value="[]"/>
        <attribute name="idleDelegates" value="[]"/>
        <attribute name="idleNames" value="{}"/>
        <attribute name="idleDelegate" value="null"/>
        <attribute name="idlePending" value="null"/>
        <attribute name="animateActive" value="false"/>
        <attribute name="animateDelegate" value="null"/>
        <attribute name="animationTicks" value="1"/>
        <attribute name="animatorsList" value="[]"/>
        <attribute name="messageQueue" value="[]"/>
        <attribute name="worldCols" value="120"/>
        <attribute name="worldRows" value="100"/>
        <attribute name="tileDictRows" value="null"/>
        <attribute name="codeString" type="string" value="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-"/>
        <attribute name="codeMap" value="null"/>
        <attribute name="newTilesPerTick" value="300"/>
        <attribute name="newTiles" value="0"/>
        <attribute name="zoneStatus" value="null"/>
        <attribute name="quaking" value="0"/>
        <attribute name="tool" type="string" value="bulldozer"/>
        <attribute name="connected" value="false"/>
        <attribute name="connecting" value="false"/>
        <attribute name="connectionFailed" value="false"/>
        <attribute name="sessionID" value="null"/>
        <attribute name="savedCities" value="$once{[]}"/>
        <attribute name="savedCitiesSort" type="string" value="title"/>
        <attribute name="savedCitiesDirection" value="1"/>
        <attribute name="savedCity" value="null"/>
        <attribute name="savedCityCount" value="0"/>
        <attribute name="title" type="string" value=""/>
        <attribute name="description" type="string" value=""/>
        <attribute name="shared" value="false"/>
        <attribute name="created" value="null"/>
        <attribute name="updated" value="null"/>
        <attribute name="paused" value="true"/>
        <attribute name="virtualSpeed" type="number" value="2"/>
        <attribute name="funds" type="number" value="0"/>
        <attribute name="fundsLabel" type="string" value="$0"/>
        <attribute name="year" type="number" value="1900"/>
        <attribute name="month" type="number" value="0"/>
        <attribute name="dateLabel" type="string" value=""/>
        <attribute name="demand" value="null"/>
        <attribute name="options" value="null"/>
        <attribute name="gameLevel" value="0"/>
        <attribute name="message" value="null"/>
        <attribute name="notice" value="null"/>
        <attribute name="budget" value="null"/>
        <attribute name="evaluation" value="null"/>
        <attribute name="taxRate" type="number" value="7"/>
        <attribute name="roadPercent" type="number" value="100"/>
        <attribute name="roadFund" type="number" value="0"/>
        <attribute name="roadValue" type="number" value="0"/>
        <attribute name="firePercent" type="number" value="100"/>
        <attribute name="fireFund" type="number" value="0"/>
        <attribute name="fireValue" type="number" value="0"/>
        <attribute name="policePercent" type="number" value="100"/>
        <attribute name="policeFund" type="number" value="0"/>
        <attribute name="policeValue" type="number" value="0"/>
        <attribute name="gameMode" type="string" value="disconnected"/>
        <attribute name="gap" value="5"/>
        <attribute name="nextUniqueID" value="1"/>
        <attribute name="objectIDs" value="$once{{}}"/>
        <attribute name="interests" value="null"/>
        <attribute name="overlay" type="string" value="all"/>
        <attribute name="chatChannel" type="string" value="eliza"/>
        <attribute name="sprites" value="null"/>
        <attribute name="robots" value="null"/>
        <attribute name="soundsToPlay" value="$once{{}}"/>
        <attribute name="citySource" type="string" value=""/>
        <attribute name="cityID" type="string" value=""/>
        <attribute name="historySerial" value="0"/>
        <attribute name="currentRobot" value="null"/>
        <attribute name="debugging" type="number" value="0"/>
        <attribute name="facebook" type="number" value="0"/>
        <attribute name="access_token" type="string" value=""/>
        <attribute name="user_id" type="string" value=""/>
        <attribute name="user_name" type="string" value=""/>
        <attribute name="user_locale" type="string" value="en-US"/>
        <attribute name="canvas_name" type="string" value=""/>
        <attribute name="app_id" type="string" value=""/>
        <attribute name="city_cookie" type="string" value=""/>
        <attribute name="init_mode" type="string" value=""/>
        <attribute name="in_tab" type="number" value="0"/>
        <attribute name="fb_app_id" type="string" value=""/>
        <attribute name="donateScript" type="string" value="orderProduct('Donation', 'Make a donation to the Micropolis Project.', 100, '/static/images/MicropolisCityThumbnail.png', '/static/images/micropolis_icon.png')"/>

        <!-- These URLs (but not targets) are actually symbols that get localized. Maybe rename them something more abstract. -->
        <attribute name="aboutURL" type="string" value="/wiki/index.php/About"/>
        <attribute name="helpURL" type="string" value="/wiki/index.php/Help"/>

        <attribute name="aboutTarget" type="string" value="_blank"/>
        <attribute name="helpTarget" type="string" value="_blank"/>

        <!-- These are symbols that are localized by the code that displays them. -->
        <attribute name="monthNames" value="$once{[
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ]}"/>


        <handler name="oninit"><![CDATA[
            var codeString = this.codeString;
            var codeMap = {};
            this.codeMap = codeMap;

            // Express interest in update events.

            this.expressInterest(this, [
                'funds', 'date', 'evaluation',
                'paused', 'passes', 'delay', 'demand',
                'options', 'gameLevel', 'cityName',
                'taxRate', 'budget', 'sprites', 'robots',
                'message', 'notice', 'virtualSpeed', 
                'savedCities', 'tiles', 'history', 
                'historyview'
            ]);

            // Set up global keyboard handlers.
            var del = new lz.Delegate(this, 'handleKey');
            this.keyDelegate = del;

            lz.Keys.callOnKeyCombo(del, ['~']);
            lz.Keys.callOnKeyCombo(del, ['esc']);
            lz.Keys.callOnKeyCombo(del, ['leftarrow']);
            lz.Keys.callOnKeyCombo(del, ['rightarrow']);
            lz.Keys.callOnKeyCombo(del, ['uparrow']);
            lz.Keys.callOnKeyCombo(del, ['downarrow']);
            lz.Keys.callOnKeyCombo(del, ['spacebar']);

            // Make the codeMap from the codeString, for decoding tile changes.
            var i;
            for (i = 0; i < codeString.length; i++) {
                var c = codeString.substr(i, 1);
                codeMap[c] = i;
            }

            // Make the tile cache.
            var tileDictRows = [];
            this.tileDictRows = tileDictRows;
            var row;
            for (row = 0; row < this.worldRows; row++) {
                var tileDictRow = new Array(this.worldCols);
                tileDictRows.push(tileDictRow);
            }

            this.configure();

            // Kick off the session.
            this.sendStartSession();

            // Note: We must initialize the interests dict early, in
            // the attribute once clause above. Because if we
            // initialize it here, we would be running after the
            // children's oninit's have been run, so we would wipe out
            // the interests they already registered.

          ]]>
        </handler>


        <handler name="ongameMode" args="arg"><![CDATA[
            switch (this.gameMode) {

                case 'disconnected': {
                    break;
                }

                case 'start': {
                    this.setAttribute(
                        "title",
                        gApp._('Micropolis: Choose a City'));
                    this.setAttribute(
                        "description",
                        gApp._('Welcome to Micropolis!*'));
                    break;
                }

                case 'play': {
                    break;
                }

            }
          ]]>
        </handler>


        <handler name="onpaused" args="arg"><![CDATA[
            this.sendMessage({
                message: 'setPaused',
                paused: this.paused ? true : false
            });
          ]]>
        </handler>


        <handler name="onvirtualSpeed" args="arg"><![CDATA[
            this.sendMessage({
                message: 'setVirtualSpeed',
                virtualSpeed: this.virtualSpeed
            });
          ]]>
        </handler>


        <handler name="ontaxRate" args="arg"><![CDATA[
            this.sendMessage({
                message: 'setTaxRate',
                taxRate: this.taxRate
            });
          ]]>
        </handler>


        <handler name="onroadPercent"><![CDATA[
            this.sendMessage({
                message: 'setRoadPercent',
                roadPercent: this.roadPercent
            });
          ]]>
        </handler>


        <handler name="onfirePercent"><![CDATA[
            this.sendMessage({
                message: 'setFirePercent',
                firePercent: this.firePercent
            });
          ]]>
        </handler>


        <handler name="onpolicePercent"><![CDATA[
            this.sendMessage({
                message: 'setPolicePercent',
                policePercent: this.policePercent
            });
          ]]>
        </handler>


        <handler name="onconnected" args="arg"><![CDATA[
            if (!this.connected) {
                this.setAttribute("gameMode", "disconnected");
            }
          ]]>
        </handler>


        <handler name="onoverlay" args="arg"><![CDATA[
            this.updateMap();
          ]]>
        </handler>


        <handler name="ontool" args="arg"><![CDATA[
            //Debug.write("ONTOOL", this.tool);
          ]]>
        </handler>


        <handler name="onkey" args="e"><![CDATA[
            Debug.write("gApp onkey", e);
          ]]>
        </handler>


        <handler name="onsavedCities" args="arg"><![CDATA[
            this.refreshSavedCities();
          ]]>
        </handler>


        <method name="refreshSavedCities"><![CDATA[
            var els = [];
            var savedCities = this.savedCities;
            var savedCitiesSort = this.savedCitiesSort;
            var savedCitiesDirection = this.savedCitiesDirection;
            savedCities.sort(
                function(c1, c2) {
                    var t1 = c1[savedCitiesSort];
                    var t2 = c2[savedCitiesSort];
                    if (t1 < t2) {
                        return -savedCitiesDirection;
                    } else if (t1 > t2) {
                        return savedCitiesDirection;
                    } else {
                        // Secondary sort on updated date.
                        var t1 = c1['updated'];
                        var t2 = c2['updated'];
                        if (t1 < t2) {
                            return -1;
                        } else if (t1 > t2) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }
                });

            var n = savedCities.length;
            var i;
            for (i = 0; i < n; i++) {
                var city = savedCities[i];
                els.push(new lz.DataElement('city', {
                    cookie: city['cookie'],
                    title: city['title'],
                    description: city['description'],
                    shared: "" + city['shared'],
                    createdDate: city['createdDate'],
                    updatedDate: city['updatedDate'],
                    created: "" + city['created'],
                    updated: "" + city['updated'],
                    icon: city['icon']
                }));
            }
            //Debug.write("SAVEDCITIES", els, "cities", canvas.ds_myCities.data[0]);

            // FIXME: Should this be canvas.ds_myCities.data[0].setChildNodes ???
            canvas.ds_myCities.data[0].setAttribute('childNodes', els);

            this.setAttribute("savedCityCount", n);

          ]]>
        </method>


        <method name="findSavedCity" args="cookie"><![CDATA[
            var savedCities = this.savedCities;
            var n = savedCities.length;
            var i;
            for (i = 0; i < n; i++) {
                var savedCity = savedCities[i];
                if (savedCity['cookie'] == cookie) {
                    return savedCity;
                }
            }
          ]]>
        </method>


        <method name="setMyCityProperty" args="message, property, value"><![CDATA[
            Debug.write("setMyCityProperty", message, property, value);
            if (this.citySource == "mycity") {
                var savedCity = this.findSavedCity(this.cityID);
                if (!savedCity) {
                    Debug.write("Can't find saved city cookie", cityID);
                    return;
                }
                if (value != this[property]) {
                    this.setAttribute(property, value);
                }
                var now = new Date();
                this.setAttribute("updated", now);
                savedCity['updated'] = now;
                savedCity[property] = value;
                this.refreshSavedCities();
                var msg = {
                    message: message,
                    cookie: this.cityCookie,
                    description: description
                }
                msg[property] = value;
                this.sendMessage(msg)
            }
          ]]>
        </method>


        <method name="setMyCityTitle" args="title"><![CDATA[
            this.setMyCityProperty('setMyCityTitle', 'title', title);
          ]]>
        </method>


        <method name="setMyCityDescription" args="description"><![CDATA[
            this.setMyCityProperty('setMyCityDescription', 'description', description);
          ]]>
        </method>


        <method name="setMyCityShared" args="shared"><![CDATA[
            this.setMyCityProperty('setMyCityShared', 'shared', shared);
            if (this.shared != shared) {
                this.setAttribute("shared", shared);
            }
          ]]>
        </method>


        <method name="deleteMyCity" args=""><![CDATA[
            Debug.write("DELETEMYCITY", this.cityID);
            if (this.citySource == "mycity") {
                var cookie = this.cityID;
                var savedCities = this.savedCities;
                var savedCitiesNew = [];
                var n = savedCities.length;
                var i;
                var iFound = -1;
                for (i = 0; i < n; i++) {
                    var savedCity = savedCities[i];
                    if (savedCity['cookie'] != cookie) {
                        savedCitiesNew.push(savedCity);
                        iFound = i;
                    }
                }

                var generateCity = false;
                n = savedCitiesNew.length;

                // This refreshes the ds_myCities dataset.
                this.setAttribute("savedCities", savedCitiesNew);

                this.sendMessage({
                    message: 'deleteMyCity',
                    cookie: this.cityID
                });

                // This must happen after the delete.
                gApp.generateCity();
            }
          ]]>
        </method>


        <method name="handleKey" args="arg"><![CDATA[
            Debug.write("handleKey", arg);
          ]]>
        </method>


        <method name="expressInterest" args="target, names"><![CDATA[
            var interests = this.interests;
            if (interests == null) {
                interests = {};
                this.interests = interests;
            }
            var n = names.length;
            var i;
            for (i = 0; i < n; i++) {
                var name = names[i];
                if (!(name in interests)) {
                    interests[name] = [target];
                } else {
                    var a = interests[name];
                    var j = this.indexOf(a, target);
                    if (j < 0) {
                        a.push(target);
                    }
                }
            }
          ]]>
        </method>


        <method name="revokeInterest" args="target, names"><![CDATA[
            var interests = this.interests;
            if (interests == null) {
                return;
            }

            var name;
            var n = names.length;
            var i;
            for (i = 0; i < n; i++) {
                var name = names[i];
                if (!(name in interests)) {
                    continue;
                }
                var a = interests[name]
                var j = this.indexOf(a, target);
                if (j >= 0) {
                    a.splice(j, 1);
                }
            }
          ]]>
        </method>


        <method name="handleUpdate" args="args"><![CDATA[
            // This is the application's high level update message
            // handler, which it is sent because it registered its
            // interests in some variables. It will only be called on
            // updates of variables in which the application expressed
            // interest.

            //Debug.write("appview handleUpdate", this, args['variable'], args);

            // Dispatch to the update handler for the variable.

            var variable = args['variable'];
            var methodName = "handleUpdate_" + variable;
            var method = this[methodName];

            //Debug.write("update", messageName);

            if (!method) {
                Debug.write("Received unknown update message from server:", args['message'], variable, args);
                return;
            }

            //Debug.write("CALLING update variable", methodName, method)
            method.call(this, args);
            //Debug.write("CALLED update variable", methodName, method);
          ]]>
        </method>


        <method name="handleUpdate_funds" args="args"><![CDATA[
            var funds = args['funds'];
            var fundsLabel = this.formatFunds(funds);

            if (funds != this.funds) {
                this.setAttribute("funds", funds);
                this.setAttribute("fundsLabel", fundsLabel);
            }
          ]]>
        </method>


        <method name="handleUpdate_date" args="args"><![CDATA[
            var year = args['year'];
            var month = args['month'];
            var dateLabel = this.formatMonthYear(month, year);

            if (this.year != year) {
                this.setAttribute("year", year);
            }
            if (this.month != month) {
                this.setAttribute("month", month);
            }
            if (this.dateLabel != dateLabel) {
                this.setAttribute("dateLabel", dateLabel);
            }
          ]]>
        </method>


        <method name="handleUpdate_evaluation" args="args"><![CDATA[
            this.setAttribute('evaluation', args);
          ]]>
        </method>


        <method name="handleUpdate_paused" args="args"><![CDATA[
            var paused = args['paused'] == 'true';

            if (this.paused != paused) {
                this.setAttribute('paused', paused);
            }
          ]]>
        </method>


        <method name="handleUpdate_virtualSpeed" args="args"><![CDATA[
            var virtualSpeed = parseInt(args['virtualSpeed']);
            var pollDelay = parseInt(args['pollDelay']);
            var animateDelay = parseInt(args['animateDelay']);

            //Debug.write("VIRTUALSPEED", virtualSpeed, pollDelay, animateDelay);

            if (this.virtualSpeed != virtualSpeed) {
                this.setAttribute("virtualSpeed", virtualSpeed);
            }
            if (this.pollDelay != pollDelay) {
                this.setAttribute("pollDelay", pollDelay);
            }
            if (this.animateDelay != animateDelay) {
                this.setAttribute("animateDelay", animateDelay);
            }
          ]]>
        </method>


        <method name="handleUpdate_delay" args="args"><![CDATA[
            var pollDelay = parseInt(args['pollDelay']);
            var animateDelay = parseInt(args['animateDelay']);

            //Debug.write("DELAY", pollDelay, animateDelay);

            if (this.pollDelay != pollDelay) {
                this.setAttribute("pollDelay", pollDelay);
            }
            if (this.animateDelay != animateDelay) {
                this.setAttribute("animateDelay", animateDelay);
            }
          ]]>
        </method>


        <method name="handleUpdate_demand" args="args"><![CDATA[
            this.setAttribute("demand", args['demand']);
          ]]>
        </method>


        <method name="handleUpdate_options" args="args"><![CDATA[
            this.setAttribute("options", args['options']);
          ]]>
        </method>


        <method name="handleUpdate_gameLevel" args="args"><![CDATA[
            var gameLevel = args['gameLevel'];

            if (gameLevel != this.gameLevel) {
                this.setAttribute("gameLevel", gameLevel);
            }
          ]]>
        </method>


        <method name="handleUpdate_cityName" args="args"><![CDATA[
            var cityName = args['cityName'];

            if (cityName != this.cityName) {
                this.setAttribute("cityName", cityName);
            }
          ]]>
        </method>


        <method name="handleUpdate_budget" args="args"><![CDATA[
            this.setAttribute("budget", args['budget']);
          ]]>
        </method>


        <method name="handleUpdate_sprites" args="args"><![CDATA[
            //Debug.write("UPDATE SPRITES", args);
            this.setAttribute("sprites", args['sprites']);
          ]]>
        </method>


        <method name="handleUpdate_robots" args="args"><![CDATA[
            //Debug.write("UPDATE ROBOTS", args);
            this.setAttribute("robots", args['robots']);
          ]]>
        </method>


        <method name="handleUpdate_message" args="args"><![CDATA[
            //Debug.write("UPDATE MESSAGE", args['msg']);
            this.setAttribute("message", args['msg']);
          ]]>
        </method>


        <method name="handleUpdate_notice" args="args"><![CDATA[
            //Debug.write("UPDATE NOTICE", args['msg']);
            this.setAttribute("notice", args['notice']);
          ]]>
        </method>


        <method name="handleUpdate_savedCities" args="args"><![CDATA[
            //Debug.write("UPDATE SAVEDCITIES", args['savedCities']);
            this.setAttribute("savedCities", args['savedCities']);
          ]]>
        </method>


        <method name="handleUpdate_tiles" args="args"><![CDATA[
            var view = args['view'];
            var id = view['id'];
            //var tv = this.objectIDs[id];
            var col = view['col'];
            var row = view['row'];
            var cols = view['cols'];
            var rows = view['rows'];
            var code = view['code'];
            var tiles = view['tiles'];

            //Debug.write("UPDATE TILES", id, col, row, cols, rows, code, typeof(tiles), tiles.length);

            if ((rows > 0) &&
                (cols > 0) &&
                (tiles != "")) {
                this.updateTiles(
                    col,
                    row,
                    cols,
                    rows,
                    code,
                    tiles);
            }
          ]]>
        </method>


        <method name="handleUpdate_historyview" args="args"><![CDATA[
            //Debug.write("UPDATE HISTORYVIEW", args);
            var id = args['id'];
            var hv = this.objectIDs[id];
            //Debug.write("hv", hv, "id", id, typeof(id));

            hv.setAttribute("history", args);
          ]]>
        </method>


        <method name="handleUpdate_history" args="args"><![CDATA[
            // TODO: tell any historyviews to update.
            this.setAttribute("historySerial", args['historySerial']);
          ]]>
        </method>


        <method name="indexOf" args="a, obj"><![CDATA[
            var i;
            var n = a.length;
            for (i = 0; i < n; i++) {
                if (a[i] == obj) {
                    return i;
                }
            }
            return -1;
          ]]>
        </method>


        <method name="escapeHTML" args="str"><![CDATA[
            str = str.split('&').join('&amp;');
            str = str.split('<').join('&lt;');
            str = str.split('>').join('&gt;');
            return str;
          ]]>
        </method>


        <method name="makeUniqueID"><![CDATA[
            var uniqueID = this.nextUniqueID;
            this.nextUniqueID++;
            return uniqueID;
          ]]>
        </method>


        <method name="configure"><![CDATA[
            this.setAttribute("debugging", parseInt(lz.Browser.getInitArg("debugging") || this.debugging));
            this.setAttribute("facebook", parseInt(lz.Browser.getInitArg("facebook") || this.facebook));
            this.setAttribute("access_token", lz.Browser.getInitArg("access_token") || this.access_token);
            this.setAttribute("user_id", lz.Browser.getInitArg("user_id") || this.user_id);
            this.setAttribute("user_name", lz.Browser.getInitArg("user_name") || this.user_name);
            this.setAttribute("user_locale", lz.Browser.getInitArg("user_locale") || this.user_locale);
            this.setAttribute("canvas_name", lz.Browser.getInitArg("canvas_name") || this.canvas_name);
            this.setAttribute("app_id", lz.Browser.getInitArg("app_id") || this.app_id);
            this.setAttribute("city_cookie", lz.Browser.getInitArg("city_cookie") || this.city_cookie);
            this.setAttribute("init_mode", lz.Browser.getInitArg("init_mode") || this.init_mode);
            this.setAttribute("in_tab", parseInt(lz.Browser.getInitArg("in_tab") || this.init_mode));
            this.setAttribute("fb_app_id", lz.Browser.getInitArg("fb_app_id") || this.init_mode);

            gStrings.loadLanguage(this.user_locale);
          ]]>
        </method>


        <method name="sendStartSession"><![CDATA[
            this.setAttribute("gameMode", "disconnected");
            this.setAttribute("connected", false);
            this.setAttribute("connecting", true);
            this.setAttribute("connectionFailed", false);

            gRemoteServer.sendStartSession(this.access_token, this.user_id);
          ]]>
        </method>


        <method name="startSession" args="sessionID"><![CDATA[
            //Debug.write("appview startSession sessionID", sessionID);
            this.setAttribute("gameMode", "start");
            this.setAttribute("connected", true);
            this.setAttribute("connecting", false);
            this.setAttribute("connectionFailed", false);
            this.setAttribute("sessionID", sessionID);

            this.pollStart();
            this.animateStart();
            this.updateMap();

            //Debug.write("SENDING SETLANGUAGE", gStrings.language);
            this.sendMessage({
                'message': 'setLanguage',
                'language': gStrings.language
            })
          ]]>
        </method>


        <method name="endSession"><![CDATA[
            this.setAttribute("gameMode", "disconnected");
            this.setAttribute("connected", false);
            this.setAttribute("connecting", false);
            this.setAttribute("connectionFailed", false);
            this.setAttribute("sessionID", null);

            this.pollStop();
            this.animateStop();
          ]]>
        </method>


        <method name="failSession"><![CDATA[
            this.setAttribute("gameMode", "disconnected");
            this.setAttribute("connected", false);
            this.setAttribute("connecting", false);
            this.setAttribute("connectionFailed", true);
            this.setAttribute("sessionID", null);

            this.pollStop();
            this.animateStop();
          ]]>
        </method>


        <method name="failPoll"><![CDATA[
            this.failSession();
          ]]>
        </method>


        <method name="addIdler" args="idler"><![CDATA[
            //Debug.write("appview addIdler", idler);
            var i = this.indexOf(this.idlers, idler);
            if (i < 0) {
                this.idlers.push(idler);
                this.updateIdle();
            }
          ]]>
        </method>


        <method name="removeIdler" args="idler"><![CDATA[
            //Debug.write("appview removeIdler", idler);
            var i = this.indexOf(this.idlers, idler);
            if (i >= 0) {
                this.idlers.splice(i, 1);
                this.updateIdle();
            }
          ]]>
        </method>


        <method name="callWhenIdle" args="del"><![CDATA[
            //Debug.write("callWhenIdle", del);
            this.idleDelegates.push(del);
            //Debug.write("NOW IDLEDELEGATES", this.idleDelegates, "last", this.idleDelegates[this.idleDelegates.length - 1]);
            this.updateIdle();
          ]]>
        </method>


        <method name="callOnceWhenIdle" args="name, del"><![CDATA[
            var idleNames = this.idleNames;
            if (name in idleNames) {
                return;
            }
            idleNames[name] = true;
            this.callWhenIdle(del);
          ]]>
        </method>


        <method name="updateIdle"><![CDATA[
            //Debug.write("updateIdle", "idleDelegates", this.idleDelegates.length, "idlers", this.idlers.length);
            var del = this.idleDelegate;
            if ((this.idlers.length > 0) ||
                (this.idleDelegates.length > 0)) {
                if (!this.idlePending) {
                    this.idlePending = true;
                    if (del == null) {
                        del = new lz.Delegate(this, 'handleIdle');
                        this.idleDelegate = del;
                    }
                    lz.Idle.callOnIdle(del);
                    //Debug.write("IDLE REGISTER");
                }
            } else {
                if (this.idlePending) {
                    this.idlePending = false;
                    //Debug.write("IDLE UNREGISTER");
                    del.unregisterAll();
                }
            }
          ]]>
        </method>


        <method name="handleIdle" args="arg"><![CDATA[
            //Debug.write("handleIdle", "idleDelegates", this.idleDelegates.length, "idlers", this.idlers.length);
            this.idles++;

            var n, i;

            var idleDelegates = this.idleDelegates;
            n = idleDelegates.length;
            if (n > 0) {
                //Debug.write("handleIdle", "idleDelegates", this.idleDelegates.length, this.idleDelegates);
                this.idleDelegates = [];
                if (this.idleNames.length > 0) {
                    this.idleNames = {};
                }
                for (i = 0; i < n; i++) {
                    var del = idleDelegates[i];
                    //Debug.write("IDLE DELEGATE", del);
                    del.execute(null);
                }
            }

            var idlers = this.idlers;
            n = idlers.length;
            if (n > 0) {
                //Debug.write("handleIdle", "idlers", this.idlers.length, this.idlers);
                for (i = 0; i < n; i++) {
                    idlers[i].idle();
                }
            }

            this.updateIdle();
          ]]>
        </method>


        <method name="addAnimator" args="animator"><![CDATA[
            //Debug.write("appview addAnimator", animator);
            var i = this.indexOf(this.animatorsList, animator);
            if (i < 0) {
                this.animatorsList.push(animator);
            }

            if (!this.animateActive) {
                this.animateStart();
            }
          ]]>
        </method>


        <method name="removeAnimator" args="animator"><![CDATA[
            //Debug.write("appview removeAnimator", animator);
            var i = this.indexOf(this.animatorsList, animator);
            if (i >= 0) {
                this.animatorsList.splice(i, 1);
            }

            if (this.animateActive &&
                this.animatorsList.length == 0) {
                this.animateStop();
            }
          ]]>
        </method>


        <method name="animateStart"><![CDATA[
            //Debug.write("animateStart");
            if (this.animateActive) {
                //Debug.write("animateStart already started");
                return;
            }
            if (!this.animateDelegate) {
                this.animateDelegate = new lz.Delegate(this, 'doAnimate');
            }
            var t = lz.Timer.addTimer(this.animateDelegate, this.animateDelay);
            this.animateActive = true;
          ]]>
        </method>


        <method name="animateContinue"><![CDATA[
            // This is a bit confused, and violates DRY. Refactor animateStart and animateContinue.
            if (!this.animateDelegate) {
                this.animateDelegate = new lz.Delegate(this, 'doAnimate');
            }
            lz.Timer.resetTimer(this.animateDelegate, this.animateDelay);
            this.animateActive = true;
            //Debug.write("animateContinue");
          ]]>
        </method>


        <method name="animateStop"><![CDATA[
            //Debug.write("animateStop");
            if (!this.animateActive) {
                return;
            }
            lz.Timer.removeTimer(this.animateDelegate);
            this.animateActive = false;
          ]]>
        </method>


        <method name="doAnimate" args="ignore"><![CDATA[

            //Debug.write("doAnimate");

            this.animationTicks++;
            this.newTiles = 0;

            var animatorsList = this.animatorsList;
            var n = animatorsList.length;
            var i;
            for (i = 0; i < n; i++) {
                animatorsList[i].doAnimate();
            }

            this.animateContinue();

          ]]>
        </method>


        <method name="addPoller" args="poller"><![CDATA[
            //Debug.write("appview addPoller", poller, this.pollers.length);
            var i = this.indexOf(this.pollers, poller);
            if (i < 0) {
                this.pollers.push(poller);
            }
          ]]>
        </method>


        <method name="removePoller" args="poller"><![CDATA[
            //Debug.write("appview removePoller", poller, this.pollers.length);
            var i = this.indexOf(this.pollers, poller);
            if (i >= 0) {
                this.pollers.splice(i, 1);
            }
          ]]>
        </method>


        <method name="pollStart"><![CDATA[
            //Debug.write("pollStart");
            if (this.pollActive) {
                //Debug.write("pollStart already started");
                return;
            }
            if (!this.pollDelegate) {
                this.pollDelegate = new lz.Delegate(this, 'poll');
            }
            var t = lz.Timer.addTimer(this.pollDelegate, this.pollDelay);
            this.pollActive = true;
          ]]>
        </method>


        <method name="pollContinue" args="soon"><![CDATA[
            //Debug.write("pollContinue", soon);
            // This is a bit confused, and violates DRY. Refactor pollStart and pollContinue.
            //this.pollStop();
            if (!this.pollDelegate) {
                this.pollDelegate = new lz.Delegate(this, 'poll');
            }
            lz.Timer.resetTimer(this.pollDelegate, soon ? this.pollDelaySoon : this.pollDelay);
            this.pollActive = true;
            //Debug.write("pollContinue");
          ]]>
        </method>


        <method name="pollStop"><![CDATA[
            //Debug.write("pollStop");
            if (!this.pollActive) {
                return;
            }
            lz.Timer.removeTimer(this.pollDelegate);
            this.pollActive = false;
          ]]>
        </method>


        <method name="poll" args="ignore"><![CDATA[
            //Debug.write("POLL!");
            var i, n;

            var ref = this.polls;
            this.polls++;

            var messages = [];
            var pollers = this.pollers;
            n = pollers.length;
            if (n > 0) {
                for (i = 0; i < n; i++) {
                    var message = pollers[i].poll(messages);
                }
            }

            var messageQueue = this.messageQueue;
            if (messageQueue && messageQueue.length > 0) {
                this.messageQueue = [];
                n = messageQueue.length;
                for (i = 0; i < n; i++) {
                    var message = messageQueue[i];
                    messages.push(message);
                }
            }

            //Debug.write("POLL SESSIONID", this.sessionID, "MESSAGES", messages);

            this.pollStop();

            gRemoteServer.sendPoll({
                sessionID: this.sessionID,
                ref: ref,
                messages: messages
            });

            var soundName;
            var playedSounds = {};
            for (soundName in this.soundsToPlay) {
                if (playedSounds[soundName]) {
                    continue;
                }
                lz.AudioService.LzAudio.playSound(soundName);
                playedSounds[soundName] = true;
            }
            this.soundsToPlay = {};

          ]]>
        </method>


        <method name="handlePoll" args="messageDict"><![CDATA[
            Debug.write("HANDLEPOLL", messageDict);
            if (!messageDict) {
                Debug.write("handlePoll null messageDict!");
            } else {
                var messages = messageDict['messages'];
                if (messages != null) {
                    var i;
                    var n = messages.length;
                    for (i = 0; i < n; i++) {
                        var message = messages[i];
                        var messageName = message['message'];
                        if (!messageName) {
                            continue;
                        }
                        var methodName = "handle_" + messageName;
                        var method = this[methodName];
                        //Debug.write("message", messageName, ('variable' in message ? message['variable'] : '---'), message, "method", methodName, method);
                        if (!method) {
                            Debug.write("Undefined message:", messageName, message);
                            continue;
                        }

                        //Debug.write("CALLING", method, message)
                        method.call(gApp, message);
                        //Debug.write("CALLED");
                    }
                }
            }

            gApp.pollContinue(false);

          ]]>
        </method>


        <method name="sendMessage" args="message"><![CDATA[
            //Debug.write("==== sendMessage", message);
            this.messageQueue.push(message);
            this.pollContinue(true);
          ]]>
        </method>


        <method name="sendRobot" args="robotID, command, args"><![CDATA[
            this.sendMessage({
                message: 'sendRobot',
                robotID: robotID,
                command: command,
                args: args
            });
          ]]>
        </method>

        <method name="updateMap"><![CDATA[
            this.handle_update({
                variable: 'map'
            });
          ]]>
        </method>


        <method name="updateTiles" args="col, row, cols, rows, code, tiles"><![CDATA[
            //Debug.write("row", row, "col", col, "rows", rows, "cols", cols, "code", code);
            //Debug.write("tiles.length", tiles.length, tiles.substr(0, 20));

            var tileDictRows = this.tileDictRows;
            var codeMap = this.codeMap;
            var aniTiles = gAniTiles;

            switch (code) {

                case 0: { // Raw Text: TILE_CODE_RAW_TEXT
                    var lastCol = col + cols;
                    var lastRow = row + rows;
                    var r, c;
                    var codeOffset = 0;
                    for (r = row; r < lastRow; r++) {
                        var tileDictRow = tileDictRows[r];
                        for (c = col; c < lastCol; c++) {
                            var high =
                                tiles.substr(codeOffset, 1);
                            var low =
                                tiles.substr(codeOffset + 1, 1);
                            var tileIndex =
                                (((codeMap[high] * 64) + codeMap[low]) & 1023);

                            var tileDict = tileDictRow[c];
                            if (!tileDict) {
                                tileDict = {
                                    'animationTicks': -1
                                };
                                tileDictRow[c] = tileDict;
                            }

                            tileDict['index'] =
                                tileIndex;
                            tileDict['animated'] =
                                aniTiles[tileIndex] != tileIndex;

                            codeOffset += 2;
                        }
                    }
                    break;
                }

                case 1: { // Compressed Text: TILE_CODE_COMPRESSED_TEXT
                    var tileOffset = 0;
                    var tileOffsetMax = rows * cols;
                    var codeOffset = 0;
                    var codeOffsetMax = tiles.length;

                    function getTextNumber1()
                    {
                        var low = tiles.substr(codeOffset, 1);
                        codeOffset += 1;
                        return codeMap[low];
                    }

                    function getTextNumber2()
                    {
                        var high = tiles.substr(codeOffset, 1);
                        var low = tiles.substr(codeOffset + 1, 1);
                        codeOffset += 2;
                        return ((codeMap[high] * 64) +
                                codeMap[low]);
                    }

                    function getTextNumber3()
                    {
                        var low = tiles.substr(codeOffset, 1);
                        var high = tiles.substr(codeOffset + 1, 1);
                        var higher = tiles.substr(codeOffset + 2, 1);
                        codeOffset += 3;
                        return ((codeMap[higher] * 4096) +
                                (codeMap[high] * 64) +
                                codeMap[low]);
                    }

                    var charHandlers = {
                        '.': function() {
                            tileOffset += 1;
                        },
                        '!': function() {
                            tileOffset += getTextNumber1();
                        },
                        '@': function() {
                            tileOffset += getTextNumber2();
                        },
                        '#': function() {
                            tileOffset += getTextNumber3();
                        }
                    };

                    while ((tileOffset >= 0) &&
                           (tileOffset < tileOffsetMax) &&
                           (codeOffset < codeOffsetMax)) {

                        var high = tiles.substr(codeOffset, 1);
                        codeOffset++;

                        var charHandler = charHandlers[high];
                        if (charHandler) {
                            charHandler();
                            continue;
                        }

                        var c2 = tiles.substr(codeOffset, 1);
                        codeOffset++;

                        var tileIndex =
                            (codeMap[high] * 64) + codeMap[low];

                        var c = col + (tileOffset % cols);
                        var r = row + Math.floor(tileOffset / cols);

                        var tileDictRow = tileDictRows[r];
                        var tileDict = tileDictRow[c];

                        if (!tileDict) {
                            tileDict = {
                                'animationTicks': -1
                            };
                            tileDictRow[c] = tileDict;
                        }

                        tileDict['index'] =
                            tileIndex;
                        tileDict['animated'] =
                            aniTiles[tileIndex] != tileIndex;

                        tileOffset++;

                    }
                    break;
                }

                case 2: { // Compressed Binary 16: TILE_CODE_COMPRESSED_BINARY_16
                    var tileOffset = 0;
                    var tileOffsetMax = rows * cols;
                    var codeOffset = 0;
                    var codeOffsetMax = tiles.length;

                    function getBinaryNumber1()
                    {
                        var low = tiles.charCodeAt(codeOffset) & 0xff;
                        codeOffset += 1;
                        return low;
                    }

                    function getBinaryNumber2()
                    {
                        var high = tiles.charCodeAt(codeOffset) & 0xff;
                        var low = tiles.charCodeAt(codeOffset + 1) & 0xff;
                        codeOffset += 2;
                        return (high * 256) + low;
                    }

                    var charHandlers = {
                        0xff: function() { tileOffset += 1; },
                        0xfe: function() { tileOffset += getBinaryNumber1() + 3; },
                        0xfd: function() { tileOffset += getBinaryNumber2() + 259; }
                    };

                    while ((tileOffset >= 0) &&
                           (tileOffset < tileOffsetMax) &&
                           (codeOffset < codeOffsetMax)) {

                        var high = tiles.charCodeAt(codeOffset) & 0xff;
                        codeOffset++;

                        var charHandler = charHandlers[high];
                        if (charHandler) {
                            charHandler();
                            continue;
                        }

                        var low = tiles.charCodeAt(codeOffset) & 0xff;
                        codeOffset++;

                        var tileIndex =
                            (high * 256) + low;

                        var c = col + (tileOffset % cols);
                        var r = row + Math.floor(tileOffset / cols);

                        var tileDictRow = tileDictRows[r];
                        var tileDict = tileDictRow[c];

                        if (!tileDict) {
                            tileDict = {
                                'animationTicks': -1
                            };
                            tileDictRow[c] = tileDict;
                        }

                        tileDict['index'] =
                            tileIndex;
                        tileDict['animated'] =
                            aniTiles[tileIndex] != tileIndex;

                        tileOffset++;

                    }
                    break;
                }

            }
          ]]>
        </method>


        <method name="getTileDict" args="col, row"><![CDATA[
            var tileDictRows = this.tileDictRows;
            var tileDictRow = tileDictRows[row];
            var tileDict = tileDictRow[col];
            return tileDict;
          ]]>
        </method>


        <method name="setTileDict" args="col, row, tileDict"><![CDATA[
            var tileDictRows = this.tileDictRows;
            var tileDictRow = tileDictRows[row];
            tileDictRow[col] = tileDict;
          ]]>
        </method>


        <method name="resetCity"><![CDATA[

            // TODO: Reset stuff for a new city.

            this.setAttribute("quaking", 0);
            this.updateMap();

          ]]>
        </method>


        <method name="abandonCity"><![CDATA[
            //Debug.write("abandonCity");
            this.sendMessage({
                message: 'abandonCity'
            });
          ]]>
        </method>


        <method name="saveCity"><![CDATA[
            //Debug.write("trySaveCity", this.citySource, this.cityID, this.title, this.description);
            this.sendMessage({
                message: 'saveCity',
                source: this.citySource,
                cookie: this.cityID,
                title: this.title,
                description: this.description
            });
          ]]>
        </method>


        <method name="newCity"><![CDATA[
            gApp.saveCity();
            gApp.chooseCity()
          ]]>
        </method>


        <method name="about"><![CDATA[
            lz.Browser.loadURL(
                gApp._(this.aboutURL),
                this.aboutTarget);
          ]]>
        </method>


        <method name="donate"><![CDATA[
            lz.Browser.callJS(
                this.donateScript);
          ]]>
        </method>


        <method name="help"><![CDATA[
            lz.Browser.loadURL(
                gApp._(this.helpURL),
                this.helpTarget);
          ]]>
        </method>


        <method name="sendChatMessage" args="text, channel"><![CDATA[
            this.sendMessage({
                message: 'sendChatMessage',
                text: text,
                channel: channel,
                language: gStrings.language
            });
          ]]>
        </method>


        <method name="handle_chatMessage" args="args"><![CDATA[
            //Debug.write("handle_chatMessage", args);
            var from = args['from'];
            var channel = args['channel'];
            var text = args['text'];
            var html =
                '<b>' +
                this.escapeHTML(from + '> ') +
                '</b>' +
                this.escapeHTML(text);
            //Debug.write("CHATMESSAGE", html);
            gWallView.addMessage(html);
          ]]>
        </method>


        <method name="handle_update" args="args"><![CDATA[
            // This is the low level update message handler, which
            // dispatches to all the higher level handleUpdate methods
            // who have registered for this variable.

            var variable = args['variable'];
            var interests = this.interests;
            if (interests == null) {
                return;
            }

            Debug.write("==== update", variable, args);

            if (!(variable in interests)) {
                //Debug.write("uninteresting variable update", variable);
                return;
            }

            var a = interests[variable];
            //Debug.write("UPDATE VARIABLE", variable, a, args);
            var n = a.length;
            var i;
            for (i = 0; i < n; i++) {
                var target = a[i];
                target.handleUpdate(args);
            }
          ]]>
        </method>


        <method name="handle_didGenerateMap" args="args"><![CDATA[
            Debug.write("didGenerateMap", args);
            this.setAttribute('citySource', 'generated');
            this.setAttribute('cityID', args['seed']);
            //Debug.write("SEED", this.cityID);
            gNoticeView.setCurrentNotice(45, null, null); // Start a New City
            this.resetCity();
          ]]>
        </method>


        <method name="handle_didLoadCity" args="args"><![CDATA[
            //Debug.write("didLoadCity");
            this.resetCity();
	    this.setAttribute('citySource', 'mycity');
	    this.setAttribute('cityID', args['cityID']);
            gNoticeView.setCurrentNotice(46, null, null); // Restored a Saved City
          ]]>
        </method>


        <method name="handle_didSaveCity" args="args"><![CDATA[
            Debug.write("didSaveCity");
          ]]>
        </method>


        <method name="handle_didLoadScenario" args="args"><![CDATA[
            Debug.write("didLoadScenario", args);
            this.resetCity();
            var scenario = args['scenario'];
            var number = 49 + scenario;
            gNoticeView.setCurrentNotice(number, null, null);
          ]]>
        </method>


        <method name="handle_showZoneStatus" args="args"><![CDATA[
            this.setAttribute("zoneStatus", args);
          ]]>
        </method>


        <method name="handle_startEarthquake" args="args"><![CDATA[
            this.setAttribute("quaking", parseInt(args['magnitude']));
          ]]>
        </method>


        <method name="handle_stopEarthquake" args="args"><![CDATA[
            this.setAttribute("quaking", 0);
          ]]>
        </method>


        <method name="handle_showBudgetAndWait" args="args"><![CDATA[
            //Debug.write("Show budget and wait.");
          ]]>
        </method>


        <method name="handle_makeSound" args="args"><![CDATA[
            var channel = args['channel'];
            var sound = args['sound'];
            var soundName = 'sound_' + sound + '_rsrc';

            //Debug.write("MAKE SOUND", "channel", channel, "sound", sound, soundName);

            this.soundsToPlay[soundName] = true;
          ]]>
        </method>


        <method name="handle_newGame" args="args"><![CDATA[
            //Debug.write("newGame");
          ]]>
        </method>


        <method name="handle_didTool" args="args"><![CDATA[
            //Debug.write("didTool", args);
          ]]>
        </method>


        <method name="loadScenario" args="scenarioID, title, notice"><![CDATA[
            Debug.write("loadScenario", scenarioID, title, notice);

            this.sendMessage({
                message: 'loadScenario',
                id: scenarioID
            });

            var title =
                gApp._('Scenario') +
                ': ' +
                gApp._(title);
            var noticeEl =
                gNoticeView.findNotice(notice);
            var description =
                gApp._(noticeEl.attributes['description']);

            this.setAttribute("title", title);
            this.setAttribute("description", description);
            this.setAttribute("citySource", "scenario");
            this.setAttribute("cityID", scenarioID);

          ]]>
        </method>


	<method name="handle_generateCity"><![CDATA[
	    Debug.write("handle_generateCity");
	    this.generateCity();
	  ]]>
	</method>


        <method name="generateCity"><![CDATA[
	    Debug.write("generateCity");

            this.sendMessage({
                message: 'generateCity',
                seed: 0 // Server will generate a random seed.
            });

            this.setAttribute("title", gApp._('Generated Map'));
            this.setAttribute("description", gApp._('Generated a new random map.'));
            this.setAttribute("citySource", "generated");
            // The cityID (a random seed) will be set by handle_didGenerateMap callback.

          ]]>
        </method>


        <method name="loadSharedCity" args="id, title, description"><![CDATA[

            this.sendMessage({
                message: 'loadSharedCity',
                id: id
            });

            description =
                description;

            this.setAttribute("title", title);
            this.setAttribute("description", description);
            this.setAttribute("citySource", "sharedcity");
            this.setAttribute("cityID", id);

          ]]>
        </method>


        <method name="loadMyCity" args="cookie, title, description, shared, created, updated"><![CDATA[
            //Debug.write("loadMyCity", cookie, title, description);

            this.sendMessage({
                message: 'loadMyCity',
                cookie: cookie
            });

            this.setAttribute("title", title);
            this.setAttribute("description", description);
            this.setAttribute("shared", shared);
            this.setAttribute("created", created);
            this.setAttribute("updated", updated);
            this.setAttribute("citySource", "mycity");
            this.setAttribute("cityID", cookie);

          ]]>
        </method>


<!--
        <method name="newCityDialog"><![CDATA[
            var me = this;
            gQuestionDialog.popup(
                this._('Are you really sure you want to start a new city?'),
                this._('No, keep playing with this city.'),
                null,
                this._('Yes, choose another city.'),
                function ()
                {
                    me.newCity();
                });
          ]]>
        </method>
-->


<!--
        <method name="deleteMyCityDialog"><![CDATA[
            gQuestionDialog.popup(
                gApp._("Are you really sure you want to delete your city?"),
                gApp._("No, don't delete it."),
                null,
                gApp._("Yes, delete my city."),
                function() {
                    gApp.deleteMyCity();
                });
          ]]>
        </method>
-->


        <method name="playWithThisMap"><![CDATA[
            this.setAttribute("gameMode", "play");
            this.sendMessage({
                message: 'setGameMode',
                gameMode: 'play'
            });
            this.startGame(
                this.citySource, 
                this.cityID, 
                this.title, 
                this.description);
          ]]>
        </method>


        <method name="chooseCity"><![CDATA[
            this.setAttribute("gameMode", "start");
            this.sendMessage({
                message: 'setGameMode',
                gameMode: 'start'
            });
          ]]>
        </method>


        <method name="startGame" args="citySource, cityID, title, description"><![CDATA[
            this.sendMessage({
                message: 'startGame',
                citySource: citySource,
                cityID: cityID,
                title: title,
                description: description
            });
          ]]>
        </method>


        <method name="testBounds" args="col, row"><![CDATA[
            return ((col >= 0) &&
                    (col < this.worldCols) &&
                    (row >= 0) &&
                    (row < this.worldRows));
          ]]>
        </method>


        <method name="drawToolStart" args="tool, x, y"><![CDATA[
            //Debug.write("drawToolStart", tool, x, y);
            this.sendMessage({
                message: 'drawToolStart',
                tool: tool,
                x: x,
                y: y
            });
          ]]>
        </method>


        <method name="drawToolMove" args="tool, x0, y0, x1, y1"><![CDATA[
            //Debug.write("drawToolMove", tool, x0, y0, x1, y1);
            this.sendMessage({
                message: 'drawToolMove',
                tool: tool,
                x0: x0,
                y0: y0,
                x1: x1,
                y1: y1
            });

          ]]>
        </method>


        <method name="drawToolStop" args="tool, x, y"><![CDATA[
            //Debug.write("drawToolStop", tool, x, y);
            this.sendMessage({
                message: 'drawToolStop',
                tool: tool,
                x: x,
                y: y
            });
          ]]>
        </method>


        <method name="formatFunds" args="funds"><![CDATA[
            return this.formatNumber(funds, '$');
          ]]>
        </method>


        <method name="formatNumber" args="n, dollar"><![CDATA[
            var minus = (n < 0);
            if (minus) {
                n = -n;
            }

            var digits = "" + n;

            /// @bug: This results in 1,10 for 10! Fix it!
            var a = [];
            var n;
            while (true) {
                n = digits.length;
                if (n == 0) {
                    break;
                }
                a.unshift(digits.substr(-3, 3));
                if ((n == 1) || (n == 2)) {
                  digits = "";
                } else {
                  digits = digits.substr(0, digits.length - 3);
                }
            }

            var nStr =
                (minus ? "-" : "") +
                (dollar ? dollar : '') +
                a.join(',');

            return nStr;
          ]]>
        </method>


        <method name="formatMonthYear" args="month, year"><![CDATA[
            var monthName = gApp._(this.monthNames[month]);
            var monthYear = monthName + " " + year;
            return monthYear;
          ]]>
        </method>


        <method name="_" args="id"><![CDATA[
            return gStrings.getString(id);
          ]]>
        </method>


        <connectscreen id="gConnectScreen" name="connectScreen"
            x="5"
            y="5"
            width="${parent.width - 10}"
            height="${parent.height - 10}"
            visible="${(classroot.gameMode == 'disconnected')}"
            active="${classroot.active &amp;&amp; this.visible}"
        />

        <startscreen id="gStartScreen" name="startScreen"
            x="5"
            y="5"
            width="${parent.width - 10}"
            height="${parent.height - 10}"
            visible="${classroot.gameMode == 'start'}"
            active="${classroot.active &amp;&amp; this.visible}"
        />

        <playscreen id="gPlayScreen" name="playScreen"
            x="0"
            y="0"
            width="${parent.width}"
            height="${parent.height}"
            visible="${classroot.gameMode == 'play'}"
            active="${classroot.active &amp;&amp; this.visible}"
        />

        <mytooltip id="gToolTip"/>

	<screencapture id="gScreenCapture"
	    name="cap"
	    x="0"
	    y="0"
	    width="${parent.width}"
	    height="${parent.height}"
	/>

    </class>


</library>
