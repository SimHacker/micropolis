<library>


    <!-- Tile View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="tileview"
        clip="true"
    >


        <attribute name="uniqueID" value="null"/>
        <attribute name="worldCols" value="120"/>
        <attribute name="worldRows" value="100"/>
        <attribute name="tileSize" value="16"/>
        <attribute name="viewCol" value="0"/>
        <attribute name="viewRow" value="0"/>
        <attribute name="viewCols" value="0"/>
        <attribute name="viewRows" value="0"/>
        <attribute name="worldX" value="${-this.container.x}"/>
        <attribute name="worldY" value="${-this.container.y}"/>
        <attribute name="screenCol" value="${Math.floor(this.worldX / this.tileSize)}"/>
        <attribute name="screenRow" value="${Math.floor(this.worldY / this.tileSize)}"/>
        <attribute name="screenCols" value="${Math.floor(2 + (this.width / this.tileSize))}"/>
        <attribute name="screenRows" value="${Math.floor(2 + (this.height / this.tileSize))}"/>
        <attribute name="tileRows" value="null"/>


        <handler name="oninit"><![CDATA[
            //Debug.write("tileview init", this);

            this.uniqueID = gApp.makeUniqueID();

            var tileRows = [];
            this.tileRows = tileRows;
            var row;
            for (row = 0; row < this.worldRows; row++) {
                var tileRow = new Array(this.worldCols);
                tileRows.push(tileRow);
            }

            if (this.visible) {
                gApp.addPoller(this);
                gApp.addAnimator(this);
            }

          ]]>
        </handler>


        <handler name="ondestroy"><![CDATA[
            gApp.removePoller(this);
            gApp.removeAnimator(this);
          ]]>
        </handler>


        <handler name="onvisible"><![CDATA[
            //Debug.write("tileview onvisible", this.visible);
            if (this.visible) {
                gApp.addPoller(this);
                gApp.addAnimator(this);
            } else {
                gApp.removePoller(this);
                gApp.removeAnimator(this);
            }
          ]]>
        </handler>


        <handler name="onwidth"><![CDATA[
            this.setAttribute("visible", (this.width > 0) && (this.height > 0), true);
            this.refreshView();
          ]]>
        </handler>


        <handler name="onheight"><![CDATA[
            this.setAttribute("visible", (this.width > 0) && (this.height > 0), true);
            this.refreshView();
          ]]>
        </handler>


        <method name="refreshView"><![CDATA[
          ]]>
        </method>


        <method name="updateViewRect"><![CDATA[
            var col = this.screenCol;
            var row = this.screenRow;
            var cols = this.screenCols;
            var rows = this.screenRows;

            var left = Math.max(0, col);
            var top = Math.max(0, row);
            var right = Math.min(col + cols, this.worldCols);
            var bottom = Math.min(row + rows, this.worldRows);

            this.setAttribute("viewCol", left);
            this.setAttribute("viewRow", top);
            this.setAttribute("viewCols", Math.max(0, right - left));
            this.setAttribute("viewRows", Math.max(0, bottom - top));
          ]]>
        </method>


        <method name="poll"><![CDATA[
            //Debug.write("poll", this, this.viewCols, this.viewRows);

            // TODO: extend tiles in the direction of motion, for scroll look-ahead.

            this.updateViewRect();

            var xml = (
                '<tileview id="' + this.uniqueID +
                '" col="' + this.viewCol +
                '" row="' + this.viewRow +
                '" cols="' + this.viewCols +
                '" rows="' + this.viewRows +
                '" worldX="' + Math.floor(this.worldX + 0.5) +
                '" worldY="' + Math.floor(this.worldY + 0.5) +
                '" worldWidth="' + Math.floor(this.width + 0.5) +
                '" worldHeight="' + Math.floor(this.height + 0.5) +
                '"/>');
	    //Debug.write(xml);
            return xml;
          ]]>
        </method>


        <method name="idle"><![CDATA[
	  ]]>
	</method>


	<method name="doAnimate"><![CDATA[
            //Debug.write("doAnimate", this);
            var newTilesMax = gApp.newTilesMax;
            var tileDictRows = gApp.tileDictRows;
            var tileRows = this.tileRows;
            var viewCol = this.viewCol;
            var viewRow = this.viewRow;
            var viewCols = this.viewCols;
            var viewRows = this.viewRows;
            var lastCol = viewCol + viewCols;
            var lastRow = viewRow + viewRows;
            var animationTicks = gApp.animationTicks;
            var aniTiles = gApp.aniTiles;

            var col, row;
            for (row = viewRow; row < lastRow; row++) {
                var tileDictRow = tileDictRows[row];
                var tileRow = tileRows[row];
                for (col = viewCol; col < lastCol; col++) {
                    var tileDict = tileDictRow[col];
                    if (!tileDict) {
                        continue;
                    }

                    var tile = tileRow[col];
                    if (!tile) {
                        if (gApp.newTiles >= newTilesMax) {
                            continue;
                        }
                        tile = new lz.tile(this.container, {
                            x: col * this.tileSize,
                            y: row * this.tileSize
                        });
                        gApp.newTiles++;
			//Debug.write("MADE TILE", tile);
                        tileRow[col] = tile;
                    }

                    var tileIndex = tileDict['index'];
                    if ((tileDict['animationTicks'] < animationTicks) &&
                        tileDict['animated']) {
                        tileDict['animationTicks'] = animationTicks;
                        var newTileIndex = aniTiles[tileIndex];
                        var animated = tileIndex != newTileIndex;
                        if (animated) {
                            tileDict['index'] = tileIndex = newTileIndex;
                        } else {
                            tileDict['animated'] = false;
                        }
                    }

                    tile.setAttribute("frame", tileIndex + 1, true);
                }
            }
          ]]>
        </method>


        <view name="container"
            width="${classroot.worldCols * classroot.tileSize}"
            height="${classroot.worldRows * classroot.tileSize}"
            bgcolor="0xCC7F66"
            onmousedown="dragger.setAttribute('applied', true)"
            onmouseup="dragger.setAttribute('applied', false)"
        >


            <dragstate name="dragger"/>


            <handler name="onx"><![CDATA[
                classroot.refreshView();
              ]]>
            </handler>


            <handler name="ony"><![CDATA[
                classroot.refreshView();
              ]]>
            </handler>


        </view>


    </class>


</library>
