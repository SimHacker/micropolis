<library>


    <!-- Tile View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="tileview"
        clip="true"
    >


        <attribute name="active" value="true"/>
        <attribute name="uniqueID" value="null"/>
        <attribute name="zoom" value="2"/>
        <attribute name="tileSize" value="16"/>
        <attribute name="viewTileSize" value="${this.zoom * this.tileSize}"/>
        <attribute name="viewCol" value="0"/>
        <attribute name="viewRow" value="0"/>
        <attribute name="viewCols" value="0"/>
        <attribute name="viewRows" value="0"/>
	<attribute name="code" value="2"/>
        <attribute name="viewX" value="${-(this.container.x / this.viewTileSize)}"/>
        <attribute name="viewY" value="${-(this.container.y / this.viewTileSize)}"/>
        <attribute name="viewWidth" value="${this.width / this.viewTileSize}"/>
        <attribute name="viewHeight" value="${this.height / this.viewTileSize}"/>
        <attribute name="screenCol" value="${Math.floor(this.viewX)}"/>
        <attribute name="screenRow" value="${Math.floor(this.viewY)}"/>
        <attribute name="screenCols" value="${Math.floor(2 + this.viewWidth)}"/>
        <attribute name="screenRows" value="${Math.floor(2 + this.viewHeight)}"/>
        <attribute name="navigationMapView" value="null"/>
	<attribute name="doAnimateDelegate" value="null"/>
	<attribute name="doingAnimate" value="false"/>
        <attribute name="drawing" value="false"/>
        <attribute name="centerTileX" value="0"/>
        <attribute name="centerTileY" value="0"/>
	<attribute name="defaultplacement" value="container"/>
	<attribute name="viewExtraLeft" value="0"/>
	<attribute name="viewExtraRight" value="0"/>
	<attribute name="viewExtraTop" value="0"/>
	<attribute name="viewExtraBottom" value="0"/>
	<attribute name="robotMap" value="null"/>


        <handler name="oninit"><![CDATA[
            //Debug.write("tileview init", this);

            this.uniqueID = gApp.makeUniqueID();
	    gApp.objectIDs[this.uniqueID] = this;
	    this.robotMap = {};

            this.updateInterests();
          ]]>
        </handler>


        <handler name="ondestroy"><![CDATA[
            gApp.removePoller(this);
            gApp.removeAnimator(this);
          ]]>
        </handler>


        <handler name="onactive"><![CDATA[
            //Debug.write("tileview onactive", this.active);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onvisible"><![CDATA[
            //Debug.write("tileview onvisible", this.visible);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onwidth"><![CDATA[
            this.constrainScroll();
          ]]>
        </handler>


        <handler name="onheight"><![CDATA[
            this.constrainScroll();
          ]]>
        </handler>


        <handler name="onviewX"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewY"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewWidth"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewHeight"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onpaused" reference="gApp"><![CDATA[
            this.updateInterests();
          ]]>
        </handler>


	<handler name="onsprites" reference="gApp"><![CDATA[
	    var sprites = gApp.sprites;
	    //Debug.write("TILEVIEW SPRITES", this, sprites);
	    var spritesContainer = this.container.sprites;
	    var n = sprites.length;
	    var i;
	    for (i = 0; i < n; i++) {
	        var sprite = sprites[i]
		//Debug.write(sprite);
		var spriteView;
		var subViews = spritesContainer.subviews;
		if (i >= subViews.length) {
		    spriteView = new lz.sprite(spritesContainer);
		} else {
		    spriteView = subViews[i];
		}

		var zoom = this.zoom;

		var x = (sprite['x'] + sprite['xOffset']) * zoom;
		if (spriteView.x != x) {
		    spriteView.setAttribute("x", x);
		}
		var y = (sprite['y'] + sprite['yOffset']) * zoom;
		if (spriteView.y != y) {
		    spriteView.setAttribute("y", y);
		}
		var width = sprite['width']* zoom;
		if (spriteView.width != width) {
		    spriteView.setAttribute("width", width);
		}
		var height = sprite['height'] * zoom;
		if (spriteView.height != height) {
		    spriteView.setAttribute("height", height);
		}	
		if (spriteView.frame != sprite['frame']) {
		    spriteView.setAttribute("frame", sprite['frame']);
		}
		if (!spriteView.visible) {
		    spriteView.setAttribute("visible", true);
		}

		var spriteName = 
		    "sprite_" + 
		    sprite['type'] +
		    "_rsrc";
		if (spriteView.resource != spriteName) {
		    spriteView.setAttribute("resource", spriteName);
		}

/*
		var txt =
		    "Sprite:\n" +
		    "  spriteName: " + spriteName + "\n" +
 		    "  type: " + sprite['type'] + "\n" +
		    "  frame: " + sprite['frame'] + "\n" +
		    "  x: " + sprite['x'] + "\n" +
		    "  y: " + sprite['y'] + "\n" +
		    "  width: " + sprite['width'] + "\n" +
		    "  height: " + sprite['height'] + "\n" +
		    "  xOffset: " + sprite['xOffset'] + "\n" +
		    "  yOffset: " + sprite['yOffset'] + "\n";
		if (txt != spriteView.text) {
		    spriteView.setAttribute("text", txt);
		}
*/

	    }

	    subViews = spritesContainer.subviews;
	    while (i < subViews.length) {
	        var spriteView = subViews[i];
		if (spriteView.visible) {
		    spriteView.setAttribute("visible", false);
		}
		i++;
	    }

	  ]]>
	</handler>


	<handler name="onrobots" reference="gApp"><![CDATA[
	    var robots = gApp.robots;
	    var robotMap = this.robotMap;
	    var robotsSeen = {};
	    //Debug.write("TILEVIEW ROBOTS", this, robots);
	    var robotsContainer = this.container.robots;
	    var n = robots.length;
	    var i;
	    for (i = 0; i < n; i++) {
	        var robotData = robots[i]
		var robotType = robotData['robotType'];
		var robotID = robotData['robotID'];
		var robotView;

		robotsSeen[robotID] = true;

		if (robotID in robotMap) {
		    robotView = robotMap[robotID];
		} else {
		    var cl = lz['robot_' + robotType];
		    //Debug.write("Creating robot view", robotType, robotID, cl);
		    if (cl == null) {
		        Debug.write("Unknown robot type", robotType, robotData);
			continue;
		    }
		    robotView = new cl(robotsContainer, {
		        'robotID': robotID
		    });
		    robotMap[robotID] = robotView;
		}

		//Debug.write("robotView", robotView);

		robotView.updateRobotData(robotData);
	    }

	    for (robotID in robotMap) {
	        if (!(robotID in robotsSeen)) {
		    var robotView = robotMap[robotID];
		    Debug.write("Destroying robot view", robotView)
		    delete robotMap[robotID];
		    robotView.destroy();
		}
	    }

	  ]]>
	</handler>


	<method  name="determinePlacement" args="aSub, placement, args"><![CDATA[
	    //Debug.write("determinePlacement", this, aSub, placement, args);
	    switch (placement) {
	        case 'overlay':
		    return this.overlay;
		default:
	        case 'container':
		    return this.container;
	    }
	  ]]>
	</method>


	<method name="scrollView" args="x, y"><![CDATA[
	    //Debug.write("scrollView 1", x, y);
	    x = -x * this.viewTileSize;
	    y = -y * this.viewTileSize;
	    //Debug.write("scrollView 2", x, y);
	    this.scrollContainer(x, y);
	  ]]>
	</method>


	<method name="constrainScroll"><![CDATA[
	    //Debug.write("constrainScroll", this.container.x, this.container.y);
	    this.scrollContainer(this.container.x, this.container.y);
	  ]]>
	</method>


	<method name="scrollContainer" args="x, y"><![CDATA[
	    //Debug.write("scrollContainer inited", this.inited);
	    if (!this.inited) {
	        return;
	    }
	    var viewTileSize = this.zoom * this.tileSize; // FIXME: not using member since it's not init'ed before this is run.
	    var screenWidthHalf = Math.floor(this.width / 2);
	    var screenHeightHalf = Math.floor(this.height / 2);
	    var worldWidth = viewTileSize * gApp.worldCols;
	    var worldHeight = viewTileSize * gApp.worldRows;

	    //Debug.write("==== scrollContainer", "tileViewSize", this.viewTileSize, "gApp cols rows", gApp, gApp.worldCols, gApp.worldRows);
	    //Debug.write("==== scrollContainer x,y", x, y, "size", this.width, this.height, "screen", screenWidthHalf, screenHeightHalf, "world", worldWidth, worldHeight);

	    x = Math.min(screenWidthHalf, Math.max(x, -worldWidth + screenWidthHalf));
	    y = Math.min(screenHeightHalf, Math.max(y, -worldHeight + screenHeightHalf));

	    //Debug.write("scrollContainer", x, y, "width,height", this.width, this.height, "/2", this.width/2, this.height/2, "less", x<(this.width/2), y<(this.height/2), "world", worldWidth, worldHeight, "+", -worldWidth + screenWidthHalf, -worldHeight + screenWidthHalf);

	    x = Math.floor(x);
	    y = Math.floor(y);

	    if (x != this.container.x) {
	        this.container.setAttribute("x", x);
	    }
	    if (y != this.container.y) {
	        this.container.setAttribute("y", y);
	    }
	  ]]>
	</method>


        <method name="handleUpdateViewRect"><![CDATA[
	    this.doAnimateSoon();
          ]]>
        </method>


        <method name="updateInterests"><![CDATA[
            if (this.active && this.visible) {
                gApp.addPoller(this);
                if (gApp.paused) {
                    //gApp.addAnimator(this);
                    gApp.removeAnimator(this);
                } else {
                    gApp.addAnimator(this);
                }
            } else {
                gApp.removePoller(this);
                gApp.removeAnimator(this);
            }
          ]]>
        </method>


        <method name="updateViewRect"><![CDATA[
            var v = (this.width > 0) && (this.height > 0);
            if (v != this.visible) {
                this.setAttribute("visible", v);
            }

	    var viewExtraLeft = this.viewExtraLeft;
	    var viewExtraRight = this.viewExtraRight;
	    var viewExtraTop = this.viewExtraTop;
	    var viewExtraBottom = this.viewExtraBottom;
            var col = this.screenCol - viewExtraLeft;
            var row = this.screenRow - viewExtraTop;
            var cols = this.screenCols + viewExtraLeft + viewExtraRight;
            var rows = this.screenRows + viewExtraTop + viewExtraBottom;
            var left = Math.max(0, col);
            var top = Math.max(0, row);
            var right = Math.min(col + cols, gApp.worldCols);
            var bottom = Math.min(row + rows, gApp.worldRows);

            this.setAttribute("viewCol", left);
            this.setAttribute("viewRow", top);
            this.setAttribute("viewCols", Math.max(0, right - left));
            this.setAttribute("viewRows", Math.max(0, bottom - top));

	    //Debug.write("view", this.viewCol, this.viewRow, this.viewCols, this.viewRows, "tiles", this.viewCols * this.viewRows, "extra", this.viewExtraLeft, this.viewExtraRight, this.viewExtraTop, this.viewExtraBottom);
          ]]>
        </method>


	<method name="getViewRect"><![CDATA[
	    return [
	        this.viewX, this.viewY, this.viewWidth, this.viewHeight
	    ];
	  ]]>
	</method>


	<method name="getTileRect"><![CDATA[
	    return [
	        this.viewCol, this.viewRow, this.viewCols, this.viewRows
	    ];
	  ]]>
	</method>


        <method name="poll" args="messages"><![CDATA[
            //Debug.write("tileview poll", this, this.viewCols, this.viewRows);

            this.updateViewRect();

            messages.push({
	        message: 'tiles',
		id: this.uniqueID,
		col: this.viewCol,
		row: this.viewRow,
		cols: this.viewCols,
		rows: this.viewRows,
		viewX: this.viewX,
		viewY: this.viewY,
		viewWidth: this.viewWidth,
		viewHeight: this.viewHeight,
		code: this.code
	    });

            messages.push({
	        message: 'sprites'
	    });

            messages.push({
	        message: 'robots'
	    });
          ]]>
        </method>


	<method name="doAnimateSoon"><![CDATA[
	    if (this.doingAnimate) {	
	        return;
	    }

	    var del = this.doAnimateDelegate;
	    if (!del) {
	       del = new lz.Delegate(this, 'doAnimateNow');
	       this.doAnimateDelegate = del;
	    }
	    lz.IdleService.LzIdle.callOnIdle(del);
	    this.doingAnimate = true;
	  ]]>
	</method>


	<method name="doAnimateNow" args="arg"><![CDATA[
	    this.doingAnimate = false;

	    var navigationMapView = this.navigationMapView;
	    if (navigationMapView) {
	        navigationMapView.updateViewLocation();
	    }

	    this.doAnimate();
	  ]]>
	</method>


        <method name="doAnimate"><![CDATA[
            //Debug.write("doAnimate", this);
            var tileDictRows = gApp.tileDictRows;
            var viewCol = this.viewCol;
            var viewRow = this.viewRow;
            var viewCols = this.viewCols;
            var viewRows = this.viewRows;
            var viewTileSize = this.viewTileSize;
            var lastCol = viewCol + viewCols;
            var lastRow = viewRow + viewRows;
            var animationTicks = gApp.animationTicks;

            var tileIndex = 0;
	    var tiles = this.container.tiles;
	    var zoom = this.zoom;
	    var tileSize = this.zoom * 16;

            var col, row;
            for (row = viewRow; row < lastRow; row++) {
                var tileDictRow = tileDictRows[row];
                var y = row * viewTileSize;
                for (col = viewCol; col < lastCol; col++) {
                    var tileDict = tileDictRow[col];
                    if (!tileDict) {
                        continue;
                    }

                    //Debug.write("subviewCount", tiles.subviews.length, "tileIndex", tileIndex);
                    if (tileIndex >= tiles.subviews.length) {
                        if (gApp.newTiles >= gApp.newTilesPerTick) {
                            continue;
                        }
                        gApp.newTiles++;
                        var v = new lz.tile(tiles, {
			    width: tileSize,
			    height: tileSize
			});
                        //Debug.write("NOW subviewCount", tiles.subviews.length, "tileIndex", tileIndex);
                    }

                    var tile = tiles.subviews[tileIndex];
                    if (!tile) {
                        Debug.write("No tile!", tiles.subviews.length, tileIndex, tiles.subviews);
                        return;
                    }
                    tileIndex++;

                    var x = col * viewTileSize;
                    //Debug.write("TILE", tile);
                    if (tile.x != x) {
                        tile.setAttribute("x", x);
                    }
                    if (tile.y != y) {
                        tile.setAttribute("y", y);
                    }

                    var frame = tileDict['index'];
                    if ((tileDict['animationTicks'] < animationTicks) &&
                        tileDict['animated']) {
                        tileDict['animationTicks'] = animationTicks;
                        var newFrame = gAniTiles[frame];
                        var animated = frame != newFrame;
                        if (animated) {
                            tileDict['index'] = frame = newFrame;
                        } else {
                            tileDict['animated'] = false;
                        }
                    }

                    if (tile.frame != (frame + 1)) {
                        tile.setAttribute("frame", frame + 1);
                    }

                   if (tile.visible != true) {
                       tile.setAttribute("visible", true);
                    }
                }
            }

            while (tileIndex < tiles.subviews.length) {
                var tile = tiles.subviews[tileIndex];
                if (tile.visible) {
                    tile.setAttribute("visible", false);
                }
                tileIndex++;
            }

	    this.animateCursor();
          ]]>
        </method>


	<method name="animateCursor"><![CDATA[
	  ]]>
	</method>


        <method name="centerOnTile" args="tileX, tileY"><![CDATA[
            //Debug.write("tileview centerOnTile", this, tileX, tileY);
            var viewTileSize = this.viewTileSize;
            var tileCenterX = (tileX * viewTileSize) + (viewTileSize / 2);
            var tileCenterY = (tileY * viewTileSize) + (viewTileSize / 2);
            var cornerX = Math.floor(tileCenterX - (this.width / 2));
            var cornerY = Math.floor(tileCenterY - (this.height / 2));

            //Debug.write("center", tileCenterX, tileCenterY, "corner", cornerX, cornerY);

	    this.setAttribute("centerTileX", tileX);
	    this.setAttribute("centerTileY", tileY);
            this.container.setAttribute("x", -cornerX);
            this.container.setAttribute("y", -cornerY);
          ]]>
        </method>


        <view name="container"
            width="${gApp.worldCols * classroot.viewTileSize}"
            height="${gApp.worldRows * classroot.viewTileSize}"
            bgcolor="0xCC7F66"
        >

	    <view name="tiles"
	        width="${parent.width}"
		height="${parent.height}"
	    />

	    <view name="robots"
	        width="${parent.width}"
		height="${parent.height}"
	    />

	    <view name="sprites"
	        width="${parent.width}"
		height="${parent.height}"
	    />

        </view>

	<view name="overlay"
	    width="${parent.width}"
	    height="${parent.height}"
	/>


    </class>


</library>
