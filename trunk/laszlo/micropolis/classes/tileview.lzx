<library>


    <!-- Tile View -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="tileview"
        clip="true"
    >


        <attribute name="active" value="true"/>
        <attribute name="uniqueID" value="null"/>
        <attribute name="zoom" value="2"/>
        <attribute name="tileSize" value="16"/>
        <attribute name="viewTileSize" value="${this.zoom * this.tileSize}"/>
        <attribute name="viewCol" value="0"/>
        <attribute name="viewRow" value="0"/>
        <attribute name="viewCols" value="0"/>
        <attribute name="viewRows" value="0"/>
        <attribute name="viewX" value="${-(this.container.x / this.viewTileSize)}"/>
        <attribute name="viewY" value="${-(this.container.y / this.viewTileSize)}"/>
        <attribute name="viewWidth" value="${this.width / this.viewTileSize}"/>
        <attribute name="viewHeight" value="${this.height / this.viewTileSize}"/>
        <attribute name="screenCol" value="${Math.floor(this.viewX)}"/>
        <attribute name="screenRow" value="${Math.floor(this.viewY)}"/>
        <attribute name="screenCols" value="${Math.floor(2 + this.viewWidth)}"/>
        <attribute name="screenRows" value="${Math.floor(2 + this.viewHeight)}"/>
        <attribute name="navigationMapView" value="null"/>
	<attribute name="cursorX" value="0"/>
	<attribute name="cursorY" value="0"/>
        <attribute name="tileCursorX" value="0"/>
        <attribute name="tileCursorY" value="0"/>
        <attribute name="tileCursorXLast" value="0"/>
        <attribute name="tileCursorYLast" value="0"/>
        <attribute name="drawing" value="false"/>
        <attribute name="tileCursorMoved" value="false"/>
	<attribute name="drawMoveNowDelegate" value="null"/>


        <handler name="oninit"><![CDATA[
            //Debug.write("tileview init", this);

            this.uniqueID = gApp.makeUniqueID();

            this.updateInterests();
          ]]>
        </handler>


        <handler name="ondestroy"><![CDATA[
            gApp.removePoller(this);
            gApp.removeAnimator(this);
          ]]>
        </handler>


        <handler name="onactive"><![CDATA[
            //Debug.write("tileview onactive", this.active);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onvisible"><![CDATA[
            //Debug.write("tileview onvisible", this.visible);
            this.updateInterests();
          ]]>
        </handler>


        <handler name="onwidth"><![CDATA[
            this.constrainScroll();
          ]]>
        </handler>


        <handler name="onheight"><![CDATA[
            this.constrainScroll();
          ]]>
        </handler>


        <handler name="onviewX"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewY"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewWidth"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onviewHeight"><![CDATA[
            this.handleUpdateViewRect();
          ]]>
        </handler>


        <handler name="onpaused" reference="gApp"><![CDATA[
            this.updateInterests();
          ]]>
        </handler>


        <handler name="ontileCursorX" args="arg"><![CDATA[
	    if (this.drawing) {
                this.drawMove();
	    }
          ]]>
        </handler>


        <handler name="ontileCursorY" args="arg"><![CDATA[
	    if (this.drawing) {
                this.drawMove();
	    }
          ]]>
        </handler>


	<handler name="onmousedown" args="arg"><![CDATA[
	    var controlDown = lz.KeysService.LzKeys.isKeyDown('control');
	    var shiftDown = lz.KeysService.LzKeys.isKeyDown('shift');
	    if (shiftDown || controlDown) {
	        gTileViewPie.popupAtCursor(false);
	    } else {
	        this.setAttribute('drawing', true);
	    }
	  ]]>
	</handler>


	<handler name="onmouseup" args="arg"><![CDATA[
	    if (this.drawing) {
	        this.setAttribute("drawing", false);
	    }
	  ]]>
	</handler>


	<handler name="ondrawing" args="arg"><![CDATA[
	    Debug.write("ONDRAWING", arg);
	    if (this.drawing) {
		this.drawStart();
	    } else {
		this.drawStop();
	    }
	  ]]>
	</handler>


	<method name="drawStart"><![CDATA[
	    Debug.write("DRAWSTART", this.tileCursorX, this.tileCursorY);
	    var tileCursorX = this.tileCursorX;
	    var tileCursorY = this.tileCursorY;

	    this.tileCursorXLast = tileCursorX;
	    this.tileCursorYLast = tileCursorY;

	    gApp.drawToolStart(
	        gApp.tool, 
		tileCursorX, 
		tileCursorY);
	  ]]>
	</method>


	<method name="drawMove"><![CDATA[
	    Debug.write("==== DRAWMOVE", this.tileCursorX, this.tileCursorY);
	    if (this.tileCursorMoved) {
	        return;
	    }

	    Debug.write("Setting idle...");

	    this.tileCursorMoved = true;

	    var del = this.drawMoveNowDelegate;
	    if (del == null) {
	        del = new lz.Delegate(this, 'drawMoveNow');
		this.drawMoveNowDelegate = del;
	    }

	    Debug.write("IDLE CALLONIDLE", del);
	    lz.Idle.callOnIdle(del)
	  ]]>
	</method>


	<method name="drawMoveNow" args="arg"><![CDATA[
	    Debug.write("======== DRAWMOVENOW", this.tileCursorX, this.tileCursorY);
	    var tileCursorX = this.tileCursorX;
	    var tileCursorY = this.tileCursorY;
	    var tileCursorXLast = this.tileCursorXLast;
	    var tileCursorYLast = this.tileCursorYLast;

	    this.tileCursorMoved = false;

	    if ((tileCursorX == tileCursorXLast) &&
	        (tileCursorY == tileCursorYLast)) {
		return;
	    }

	    this.tileCursorXLast = tileCursorX;
	    this.tileCursorYLast = tileCursorY;

	    gApp.drawToolMove(
	        gApp.tool, 
		tileCursorXLast, 
		tileCursorYLast, 
		tileCursorX, 
		tileCursorY);
	  ]]>
	</method>


	<method name="drawStop"><![CDATA[
	    Debug.write("DRAWSTOP", this.tileCursorX, this.tileCursorY);
	    this.drawMoveNow(null);

	    gApp.drawToolStop(
	        gApp.tool, 
		tileCursorX, 
		tileCursorY);
	  ]]>
	</method>


	<method name="scrollView" args="x, y"><![CDATA[
	    //Debug.write("scrollView 1", x, y);
	    x = -x * this.viewTileSize;
	    y = -y * this.viewTileSize;
	    //Debug.write("scrollView 2", x, y);
	    this.scrollContainer(x, y);
	  ]]>
	</method>


	<method name="constrainScroll"><![CDATA[
	    //Debug.write("constrainScroll", this.container.x, this.container.y);
	    this.scrollContainer(this.container.x, this.container.y);
	  ]]>
	</method>


	<method name="scrollContainer" args="x, y"><![CDATA[
	    //Debug.write("scrollContainer inited", this.inited);
	    if (!this.inited) {
	        return;
	    }
	    var viewTileSize = this.zoom * this.tileSize; // FIXME: not using member since it's not init'ed before this is run.
	    var screenWidthHalf = Math.floor(this.width / 2);
	    var screenHeightHalf = Math.floor(this.height / 2);
	    var worldWidth = viewTileSize * gApp.worldCols;
	    var worldHeight = viewTileSize * gApp.worldRows;
	    //Debug.write("==== scrollContainer", "tileViewSize", this.viewTileSize, "gApp cols rows", gApp, gApp.worldCols, gApp.worldRows);
	    //Debug.write("==== scrollContainer x,y", x, y, "size", this.width, this.height, "screen", screenWidthHalf, screenHeightHalf, "world", worldWidth, worldHeight);
	    x = Math.min(screenWidthHalf, Math.max(x, -worldWidth + screenWidthHalf));
	    y = Math.min(screenHeightHalf, Math.max(y, -worldHeight + screenHeightHalf));
	    //Debug.write("scrollContainer", x, y, "width,height", this.width, this.height, "/2", this.width/2, this.height/2, "less", x<(this.width/2), y<(this.height/2), "world", worldWidth, worldHeight, "+", -worldWidth + screenWidthHalf, -worldHeight + screenWidthHalf);
	    x = Math.floor(x);
	    y = Math.floor(y);
	    if (x != this.container.x) {
	        this.container.setAttribute("x", x);
	    }
	    if (y != this.container.y) {
	        this.container.setAttribute("y", y);
	    }
	  ]]>
	</method>


        <method name="handleUpdateViewRect"><![CDATA[
	    var navigationMapView = this.navigationMapView;
	    if (navigationMapView) {
	        navigationMapView.updateViewLocation();
	    }
          ]]>
        </method>


        <method name="updateInterests"><![CDATA[
            if (this.active && this.visible) {
                gApp.addPoller(this);
                if (gApp.paused) {
                    //gApp.addAnimator(this);
                    gApp.removeAnimator(this);
                } else {
                    gApp.addAnimator(this);
                }
            } else {
                gApp.removePoller(this);
                gApp.removeAnimator(this);
            }
          ]]>
        </method>


        <method name="updateViewRect"><![CDATA[
            var v = (this.width > 0) && (this.height > 0);
            if (v != this.visible) {
                this.setAttribute("visible", v);
            }

            var col = this.screenCol;
            var row = this.screenRow;
            var cols = this.screenCols;
            var rows = this.screenRows;

            var left = Math.max(0, col);
            var top = Math.max(0, row);
            var right = Math.min(col + cols, gApp.worldCols);
            var bottom = Math.min(row + rows, gApp.worldRows);

            this.setAttribute("viewCol", left);
            this.setAttribute("viewRow", top);
            this.setAttribute("viewCols", Math.max(0, right - left));
            this.setAttribute("viewRows", Math.max(0, bottom - top));
          ]]>
        </method>


	<method name="getViewRect"><![CDATA[
	    return [
	        this.viewX, this.viewY, this.viewWidth, this.viewHeight
	    ];
	  ]]>
	</method>


        <method name="poll"><![CDATA[
            //Debug.write("poll", this, this.viewCols, this.viewRows);

            // TODO: extend tiles in the direction of motion, for scroll look-ahead.

            this.updateViewRect();

            var xml = (
                '<tileview id="' + this.uniqueID +
                '" col="' + this.viewCol +
                '" row="' + this.viewRow +
                '" cols="' + this.viewCols +
                '" rows="' + this.viewRows +
                '" viewX="' + this.viewX +
                '" viewY="' + this.viewY +
                '" viewWidth="' + this.viewWidth +
                '" viewHeight="' + this.viewHeight +
                '"/>');
            //Debug.write(xml);
            return xml;
          ]]>
        </method>


        <method name="doAnimate"><![CDATA[
            //Debug.write("doAnimate", this);
            var tileDictRows = gApp.tileDictRows;
            var viewCol = this.viewCol;
            var viewRow = this.viewRow;
            var viewCols = this.viewCols;
            var viewRows = this.viewRows;
            var viewTileSize = this.viewTileSize;
            var lastCol = viewCol + viewCols;
            var lastRow = viewRow + viewRows;
            var animationTicks = gApp.animationTicks;
            var maxNewTiles = 500;
            var newTiles = 0;

            var tileIndex = 0;

            var col, row;
            for (row = viewRow; row < lastRow; row++) {
                var tileDictRow = tileDictRows[row];
                for (col = viewCol; col < lastCol; col++) {
                    var tileDict = tileDictRow[col];
                    if (!tileDict) {
                        continue;
                    }

                    //Debug.write("this.container.tiles.subviews.length", this.container.tiles.subviews.length, "tileIndex", tileIndex);
                    if (tileIndex >= this.container.tiles.subviews.length) {
                        if (newTiles >= maxNewTiles) {
                            continue;
                        }
                        newTiles++;
                        var v =
                            new lz.tile(this.container.tiles);
                        //Debug.write("NOW this.container.tiles.subviews.length", this.container.tiles.subviews.length, "tileIndex", tileIndex);
                    }

                    var tile = this.container.tiles.subviews[tileIndex];
                    if (!tile) {
                        Debug.write("No tile!", this.container.tiles.subviews.length, tileIndex, this.container.tiles.subviews);
                        return;
                    }
                    tileIndex++;

                    var x = col * viewTileSize;
                    var y = row * viewTileSize;
                    //Debug.write("TILE", tile);
                    if (tile.x != x) {
                        tile.setAttribute("x", x);
                    }
                    if (tile.y != y) {
                        tile.setAttribute("y", y);
                    }

                    var frame = tileDict['index'];
                    if ((tileDict['animationTicks'] < animationTicks) &&
                        tileDict['animated']) {
                        tileDict['animationTicks'] = animationTicks;
                        var newFrame = gAniTiles[frame];
                        var animated = frame != newFrame;
                        if (animated) {
                            tileDict['index'] = frame = newFrame;
                        } else {
                            tileDict['animated'] = false;
                        }
                    }

                    if (tile.frame != (frame + 1)) {
                        tile.setAttribute("frame", frame + 1);
                    }

                   if (tile.visible != true) {
                       tile.setAttribute("visible", true);
                    }
                }
            }

            var subviews = this.container.tiles.subviews;
            var n = subviews.length;
            while (tileIndex < n) {
                var tile = subviews[tileIndex];
                if (tile.visible) {
                    tile.setAttribute("visible", false);
                }
                tileIndex++;
            }

	    this.trackCursor();
          ]]>
        </method>


	<method name="trackCursor"><![CDATA[

	    var cursorX = 
	        this.container.getMouse('x');
	    var cursorY = 
	        this.container.getMouse('y');

	    if (this.cursorX != cursorX) {
		this.setAttribute("cursorX", cursorX);
	    }
	    if (this.cursorY != cursorY) {
		this.setAttribute("cursorY", cursorY);
	    }

	    var tileCursorX = 
	        Math.max(
		    0,
		    Math.min(
		        Math.floor(cursorX / this.viewTileSize),
		    	gApp.worldCols - 1));
	    var tileCursorY = 
	        Math.max(
		    0,
		    Math.min(
		        Math.floor(cursorY / this.viewTileSize),
		    	gApp.worldRows - 1));

	    if (this.tileCursorX != tileCursorX) {
	        this.setAttribute("tileCursorX", tileCursorX);
	    }
	    if (this.tileCursorY != tileCursorY) {
	        this.setAttribute("tileCursorY", tileCursorY);
	    }

	  ]]>
	</method>


        <method name="centerOnTile" args="tileX, tileY"><![CDATA[
            //Debug.write("tileview centerOnTile", this, tileX, tileY);
            var viewTileSize = this.viewTileSize;
            var tileCenterX = (tileX * viewTileSize) + (viewTileSize / 2);
            var tileCenterY = (tileY * viewTileSize) + (viewTileSize / 2);
            var cornerX = Math.floor(tileCenterX - (this.width / 2));
            var cornerY = Math.floor(tileCenterY - (this.height / 2));
            //Debug.write("center", tileCenterX, tileCenterY, "corner", cornerX, cornerY);
            this.container.setAttribute("x", -cornerX);
            this.container.setAttribute("y", -cornerY);
          ]]>
        </method>


        <view name="container"
            width="${gApp.worldCols * classroot.viewTileSize}"
            height="${gApp.worldRows * classroot.viewTileSize}"
            bgcolor="0xCC7F66"
        >
<!--
            onmousedown="this.dragger.setAttribute('applied', true)"
            onmouseup="this.dragger.setAttribute('applied', false)"
-->


<!--
            <dragstate name="dragger"/>


	    <handler name="onx"><![CDATA[
	        classroot.constrainScroll();
	      ]]>
	    </handler>

	    <handler name="ony"><![CDATA[
	        classroot.constrainScroll();
	      ]]>
	    </handler>
-->

	    <view name="tiles"
	        width="${parent.width}"
		height="${parent.height}"
	    />

	    <toolcursor
	        cursorX="${classroot.cursorX}"
		cursorY="${classroot.cursorY}"
	        tileCursorX="${classroot.tileCursorX}"
		tileCursorY="${classroot.tileCursorY}"
		tileSize="${classroot.viewTileSize}"
	    />

        </view>


    </class>


</library>
