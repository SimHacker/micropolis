<library>


    <!-- Tool Tip -->
    <!-- Written for Micropolis -->
    <!-- By Don Hopkins -->
    <!-- Licensed under GPLv3 -->


    <class name="tooltip"
      pixellock="true"
    >


	<attribute name="message" value="null"/>
	<attribute name="targetX" value="null"/>
	<attribute name="targetY" value="null"/>
	<attribute name="targetWidth" value="null"/>
	<attribute name="targetHeight" value="null"/>
	<attribute name="messageX" value="null"/>
	<attribute name="messageY" value="null"/>
	<attribute name="popupDelegate" value="null"/>
	<attribute name="popupDelegateActive" value="false"/>
	<attribute name="popupDelay" value="500"/>
	<attribute name="popupMaxWidth" value="300"/>
	<attribute name="popupDirection" type="string" value="up"/>
	<attribute name="popupWrapped" value="true"/>
	<attribute name="popupFontSize" value="14"/>
	<attribute name="popupFontStyle" type="string" value="bold"/>


	<method name="startPopupTimer"><![CDATA[
	    this.stopPopupTimer();
	    if (this.popupDelegate == null) {
		this.popupDelegate = 
		    new lz.Delegate(
			this,
			"handlePopupTimer");
	    }
	    lz.Timer.addTimer(this.popupDelegate, this.popupDelay);
	    this.popupDelegateActive = true;
	  ]]>
	</method>


	<method name="stopPopupTimer"><![CDATA[
	    if ((this.popupDelegate == null) ||
		(!this.popupDelegateActive)) {
		return;
	    }
	    lz.Timer.removeTimer(this.popupDelegate);
	    this.popupDelegateActive = false;
	  ]]>
	</method>


	<method name="handlePopupTimer"><![CDATA[
	    this.showTip();
	  ]]>
	</method>


	<method name="showTip"><![CDATA[
	    var delay = 300;
	    var tip = this.tip;
	    var x = this.targetX;
	    var y = this.targetY;
	    var width = this.targetWidth;
	    var height = this.targetHeight;

	    var txt = this.tip.background.txt;
	    txt.setAttribute("fontstyle", this.popupFontStyle);

	    if (this.popupWrapped) {
		txt.setAttribute("multiline", true);
		txt.setAttribute("width", null);
		var tw = txt.getTextWidth();
		if (tw > this.popupMaxWidth) {
		    txt.setAttribute("width", this.popupMaxWidth);
		} else {
		    txt.setAttribute("width", tw + 4);
		} // if
		txt.setAttribute("height", txt.getTextHeight() + 4);
	    } else {
		txt.setAttribute("multiline", false);
		txt.setAttribute("resize", true);
	    } // if

	    //Debug.write("pop up around view", this, v, this.popupDirection, tip.width, tip.height);

	    var cx = x + (width / 2);
	    var cy = y + (height / 2);
	    var dir = this.popupDirection;

	    switch (dir) {

		case 'leftright': {
		    if (cx < (canvas.width / 2)) {
		      dir = "right";
		    } else {
		      dir = "left";
		    } // if
		    break;
		} // case

		case 'updown':  {
		    if (cy < (canvas.height / 2)) {
		      dir = "down";
		    } else {
		      dir = "up";
		    } // if
		    break;
		} // case

	    } // switch

	    switch (dir) {

		case 'up': {
		    y -= tip.height + 5;
		    break;
		} // case

		case 'down': {
		    y += height + 5;
		    break;
		} // case

		case 'left': {
		    x -= tip.width + 5;
		    break;
		} // case

		case 'right': {
		    x += width + 5;
		    break;
		} // case

	    } // switch

	    width = tip.width;
	    height = tip.height;
	    var margin = 10;

	    if ((x + width) >= (canvas.width - margin)) {
	        x = (canvas.width - margin) - width;
	    } else if (x < margin) {
	        x = margin;
	    } // if

	    if ((y + height) >= (canvas.height - margin)) {
	        y = (canvas.height - margin) - height;
	    } else if (y < margin) {
	        y = margin;
	    } // if

	    tip.setAttribute("x", canvas.getMouse("x"));
	    tip.setAttribute("y", canvas.getMouse("y"));
	    tip.setAttribute("scale", 0.01);
	    tip.setAttribute("visible", true);
	    tip.setAttribute("opacity", 0.1);

	    tip.animate("x", x, delay);
	    tip.animate("y", y, delay);
	    tip.animate("scale", 1.0, delay);
	    tip.animate("opacity", 1.0);
	  ]]>
	</method>


	<method name="hideTip"><![CDATA[
	    this.tip.setAttribute("visible", false);
	  ]]>
	</method>


	<method name="enterView" args="v, message, dir"><![CDATA[
	    var x, y, width, height;

	    if (v == null) {
		x = canvas.getMouse("x");
		y = canvas.getMouse("y");
		width = 1;
		height = 1;
	    } else {
		x = 0;
		y = 0;
		width = v.width;
		height = v.height;

		//Debug.write("start", x, y, width, height, dir);
		while (v != null) {
		    var mc = v['__LZmovieClipRef'];
		    var xs = mc ? (mc['_xscale'] / 100.0) : 1;
		    var ys = mc ? (mc['_yscale'] / 100.0) : 1;
		    x *= xs;
		    y *= ys;
		    x += v.x;
		    y += v.y;
		    width *= xs;
		    height *= ys;
		    //Debug.write("step", x, y, width, height, v);
		    v = v['parent'];
		} // while

	    } // if

	    this.enterBox(x, y, width, height, message, dir);
	  ]]>
	</method>


	<method name="enterBox" args="x, y, width, height, message, dir"><![CDATA[
	    //Debug.write("enterBox", x, y, width, height, message, dir);
	    this.hideTip();

	    this.setAttribute("targetX", x);
	    this.setAttribute("targetY", y);
	    this.setAttribute("targetWidth", width);
	    this.setAttribute("targetHeight", height);

	    this.setAttribute("message", message);

	    if (dir != null) {
		this.setAttribute("popupDirection", dir);
	    } // if

	    this.startPopupTimer();
	  ]]>
	</method>


	<method name="exitView" args="v"><![CDATA[
	    this.hideTip();
	    this.stopPopupTimer();
	    this.setAttribute("message", "");
	  ]]>
	</method>


	<view name="tip"
	    visible="false"
	    width="${this.background.width + 2}"
	    height="${this.background.height + 2}"
	    pixellock="true"
	    bgcolor="$once{0x000000}"
	>


	    <attribute name="scale" value="1.0"/>


	    <view
		x="${6 * parent.scale}" 
		y="${6 * parent.scale}"
		width="${parent.background.width}"
		height="${parent.background.height}"
		pixellock="true"
		bgcolor="$once{0x000000}"
		opacity="0.5"/>


	    <view
		name="background"
		x="1"
		y="1"
		width="${(this.txt.width + 2) * parent.scale}"
		height="${(this.txt.height + 2) * parent.scale}"
		pixellock="true"
		bgcolor="$once{0xffffff}"
		clip="true"
	    >


	      <text name="txt"
		  x="1"
		  y="1"
		  resize="true"
		  pixellock="true"
		  fontsize="${classroot.popupFontSize}"
		  text="${classroot.message}"/>


	    </view>


	</view>


    </class>


</library>
