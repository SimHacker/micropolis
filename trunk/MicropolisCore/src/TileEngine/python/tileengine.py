# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tileengine', [dirname(__file__)])
        except ImportError:
            import _tileengine
            return _tileengine
        if fp is not None:
            try:
                _mod = imp.load_module('_tileengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tileengine = swig_import_helper()
    del swig_import_helper
else:
    import _tileengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TILEENGINE_VERSION = _tileengine.TILEENGINE_VERSION
TILE_FORMAT_BYTE_SIGNED = _tileengine.TILE_FORMAT_BYTE_SIGNED
TILE_FORMAT_BYTE_UNSIGNED = _tileengine.TILE_FORMAT_BYTE_UNSIGNED
TILE_FORMAT_SHORT_SIGNED = _tileengine.TILE_FORMAT_SHORT_SIGNED
TILE_FORMAT_SHORT_UNSIGNED = _tileengine.TILE_FORMAT_SHORT_UNSIGNED
TILE_FORMAT_LONG_SIGNED = _tileengine.TILE_FORMAT_LONG_SIGNED
TILE_FORMAT_LONG_UNSIGNED = _tileengine.TILE_FORMAT_LONG_UNSIGNED
TILE_FORMAT_FLOAT = _tileengine.TILE_FORMAT_FLOAT
TILE_FORMAT_DOUBLE = _tileengine.TILE_FORMAT_DOUBLE
TILE_FORMAT_COUNT = _tileengine.TILE_FORMAT_COUNT
TILE_CODE_RAW_BINARY_16 = _tileengine.TILE_CODE_RAW_BINARY_16
TILE_CODE_COMPRESSED_TEXT = _tileengine.TILE_CODE_COMPRESSED_TEXT
TILE_CODE_COMPRESSED_BINARY_16 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16
TILE_CODE_COUNT = _tileengine.TILE_CODE_COUNT
TILE_CODE_COMPRESSED_TEXT_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_0
TILE_CODE_COMPRESSED_TEXT_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_1
TILE_CODE_COMPRESSED_TEXT_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_2
TILE_CODE_COMPRESSED_TEXT_SKIP_3 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_3
TILE_CODE_COMPRESSED_BINARY_16_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_0
TILE_CODE_COMPRESSED_BINARY_16_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_1
TILE_CODE_COMPRESSED_BINARY_16_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_2
TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX
class TileEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileEngine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _tileengine.TileEngine_width_set
    __swig_getmethods__["width"] = _tileengine.TileEngine_width_get
    if _newclass:width = _swig_property(_tileengine.TileEngine_width_get, _tileengine.TileEngine_width_set)
    __swig_setmethods__["height"] = _tileengine.TileEngine_height_set
    __swig_getmethods__["height"] = _tileengine.TileEngine_height_get
    if _newclass:height = _swig_property(_tileengine.TileEngine_height_get, _tileengine.TileEngine_height_set)
    __swig_setmethods__["bufData"] = _tileengine.TileEngine_bufData_set
    __swig_getmethods__["bufData"] = _tileengine.TileEngine_bufData_get
    if _newclass:bufData = _swig_property(_tileengine.TileEngine_bufData_get, _tileengine.TileEngine_bufData_set)
    __swig_setmethods__["colBytes"] = _tileengine.TileEngine_colBytes_set
    __swig_getmethods__["colBytes"] = _tileengine.TileEngine_colBytes_get
    if _newclass:colBytes = _swig_property(_tileengine.TileEngine_colBytes_get, _tileengine.TileEngine_colBytes_set)
    __swig_setmethods__["rowBytes"] = _tileengine.TileEngine_rowBytes_set
    __swig_getmethods__["rowBytes"] = _tileengine.TileEngine_rowBytes_get
    if _newclass:rowBytes = _swig_property(_tileengine.TileEngine_rowBytes_get, _tileengine.TileEngine_rowBytes_set)
    __swig_setmethods__["tileFormat"] = _tileengine.TileEngine_tileFormat_set
    __swig_getmethods__["tileFormat"] = _tileengine.TileEngine_tileFormat_get
    if _newclass:tileFormat = _swig_property(_tileengine.TileEngine_tileFormat_get, _tileengine.TileEngine_tileFormat_set)
    __swig_setmethods__["floatOffset"] = _tileengine.TileEngine_floatOffset_set
    __swig_getmethods__["floatOffset"] = _tileengine.TileEngine_floatOffset_get
    if _newclass:floatOffset = _swig_property(_tileengine.TileEngine_floatOffset_get, _tileengine.TileEngine_floatOffset_set)
    __swig_setmethods__["floatScale"] = _tileengine.TileEngine_floatScale_set
    __swig_getmethods__["floatScale"] = _tileengine.TileEngine_floatScale_get
    if _newclass:floatScale = _swig_property(_tileengine.TileEngine_floatScale_get, _tileengine.TileEngine_floatScale_set)
    __swig_setmethods__["tileShift"] = _tileengine.TileEngine_tileShift_set
    __swig_getmethods__["tileShift"] = _tileengine.TileEngine_tileShift_get
    if _newclass:tileShift = _swig_property(_tileengine.TileEngine_tileShift_get, _tileengine.TileEngine_tileShift_set)
    __swig_setmethods__["tileMask"] = _tileengine.TileEngine_tileMask_set
    __swig_getmethods__["tileMask"] = _tileengine.TileEngine_tileMask_get
    if _newclass:tileMask = _swig_property(_tileengine.TileEngine_tileMask_get, _tileengine.TileEngine_tileMask_set)
    def __init__(self): 
        this = _tileengine.new_TileEngine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tileengine.delete_TileEngine
    __del__ = lambda self : None;
    def setBuffer(self, *args): return _tileengine.TileEngine_setBuffer(self, *args)
    def getValue(self, *args): return _tileengine.TileEngine_getValue(self, *args)
    def renderTiles(self, *args): return _tileengine.TileEngine_renderTiles(self, *args)
    def renderTilesLazy(self, *args): return _tileengine.TileEngine_renderTilesLazy(self, *args)
    def renderPixels(self, *args): return _tileengine.TileEngine_renderPixels(self, *args)
    def getTileData(self, *args): return _tileengine.TileEngine_getTileData(self, *args)
TileEngine_swigregister = _tileengine.TileEngine_swigregister
TileEngine_swigregister(TileEngine)



