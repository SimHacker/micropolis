# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_micropolisengine', [dirname(__file__)])
        except ImportError:
            import _micropolisengine
            return _micropolisengine
        if fp is not None:
            try:
                _mod = imp.load_module('_micropolisengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _micropolisengine = swig_import_helper()
    del swig_import_helper
else:
    import _micropolisengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def getPythonCallbackHook():
  return _micropolisengine.getPythonCallbackHook()
getPythonCallbackHook = _micropolisengine.getPythonCallbackHook

def getPythonCallbackData(*args):
  return _micropolisengine.getPythonCallbackData(*args)
getPythonCallbackData = _micropolisengine.getPythonCallbackData
IS_INTEL = _micropolisengine.IS_INTEL
MICROPOLIS_VERSION = _micropolisengine.MICROPOLIS_VERSION
HISTORY_TYPE_RES = _micropolisengine.HISTORY_TYPE_RES
HISTORY_TYPE_COM = _micropolisengine.HISTORY_TYPE_COM
HISTORY_TYPE_IND = _micropolisengine.HISTORY_TYPE_IND
HISTORY_TYPE_MONEY = _micropolisengine.HISTORY_TYPE_MONEY
HISTORY_TYPE_CRIME = _micropolisengine.HISTORY_TYPE_CRIME
HISTORY_TYPE_POLLUTION = _micropolisengine.HISTORY_TYPE_POLLUTION
HISTORY_TYPE_COUNT = _micropolisengine.HISTORY_TYPE_COUNT
HISTORY_SCALE_SHORT = _micropolisengine.HISTORY_SCALE_SHORT
HISTORY_SCALE_LONG = _micropolisengine.HISTORY_SCALE_LONG
HISTORY_SCALE_COUNT = _micropolisengine.HISTORY_SCALE_COUNT
MAP_TYPE_ALL = _micropolisengine.MAP_TYPE_ALL
MAP_TYPE_RES = _micropolisengine.MAP_TYPE_RES
MAP_TYPE_COM = _micropolisengine.MAP_TYPE_COM
MAP_TYPE_IND = _micropolisengine.MAP_TYPE_IND
MAP_TYPE_POWER = _micropolisengine.MAP_TYPE_POWER
MAP_TYPE_ROAD = _micropolisengine.MAP_TYPE_ROAD
MAP_TYPE_POPULATION_DENSITY = _micropolisengine.MAP_TYPE_POPULATION_DENSITY
MAP_TYPE_RATE_OF_GROWTH = _micropolisengine.MAP_TYPE_RATE_OF_GROWTH
MAP_TYPE_TRAFFIC_DENSITY = _micropolisengine.MAP_TYPE_TRAFFIC_DENSITY
MAP_TYPE_POLLUTION = _micropolisengine.MAP_TYPE_POLLUTION
MAP_TYPE_CRIME = _micropolisengine.MAP_TYPE_CRIME
MAP_TYPE_LAND_VALUE = _micropolisengine.MAP_TYPE_LAND_VALUE
MAP_TYPE_FIRE_RADIUS = _micropolisengine.MAP_TYPE_FIRE_RADIUS
MAP_TYPE_POLICE_RADIUS = _micropolisengine.MAP_TYPE_POLICE_RADIUS
MAP_TYPE_DYNAMIC = _micropolisengine.MAP_TYPE_DYNAMIC
MAP_TYPE_COUNT = _micropolisengine.MAP_TYPE_COUNT
SPRITE_NOTUSED = _micropolisengine.SPRITE_NOTUSED
SPRITE_TRAIN = _micropolisengine.SPRITE_TRAIN
SPRITE_HELICOPTER = _micropolisengine.SPRITE_HELICOPTER
SPRITE_AIRPLANE = _micropolisengine.SPRITE_AIRPLANE
SPRITE_SHIP = _micropolisengine.SPRITE_SHIP
SPRITE_MONSTER = _micropolisengine.SPRITE_MONSTER
SPRITE_TORNADO = _micropolisengine.SPRITE_TORNADO
SPRITE_EXPLOSION = _micropolisengine.SPRITE_EXPLOSION
SPRITE_BUS = _micropolisengine.SPRITE_BUS
SPRITE_COUNT = _micropolisengine.SPRITE_COUNT
PWRBIT = _micropolisengine.PWRBIT
CONDBIT = _micropolisengine.CONDBIT
BURNBIT = _micropolisengine.BURNBIT
BULLBIT = _micropolisengine.BULLBIT
ANIMBIT = _micropolisengine.ANIMBIT
ZONEBIT = _micropolisengine.ZONEBIT
ALLBITS = _micropolisengine.ALLBITS
LOMASK = _micropolisengine.LOMASK
BLBNBIT = _micropolisengine.BLBNBIT
BLBNCNBIT = _micropolisengine.BLBNCNBIT
BNCNBIT = _micropolisengine.BNCNBIT
CONNECT_TILE_FIX = _micropolisengine.CONNECT_TILE_FIX
CONNECT_TILE_BULLDOZE = _micropolisengine.CONNECT_TILE_BULLDOZE
CONNECT_TILE_ROAD = _micropolisengine.CONNECT_TILE_ROAD
CONNECT_TILE_RAILROAD = _micropolisengine.CONNECT_TILE_RAILROAD
CONNECT_TILE_WIRE = _micropolisengine.CONNECT_TILE_WIRE
TOOLRESULT_NO_MONEY = _micropolisengine.TOOLRESULT_NO_MONEY
TOOLRESULT_NEED_BULLDOZE = _micropolisengine.TOOLRESULT_NEED_BULLDOZE
TOOLRESULT_FAILED = _micropolisengine.TOOLRESULT_FAILED
TOOLRESULT_OK = _micropolisengine.TOOLRESULT_OK
DIRT = _micropolisengine.DIRT
RIVER = _micropolisengine.RIVER
REDGE = _micropolisengine.REDGE
CHANNEL = _micropolisengine.CHANNEL
FIRSTRIVEDGE = _micropolisengine.FIRSTRIVEDGE
LASTRIVEDGE = _micropolisengine.LASTRIVEDGE
WATER_LOW = _micropolisengine.WATER_LOW
WATER_HIGH = _micropolisengine.WATER_HIGH
TREEBASE = _micropolisengine.TREEBASE
WOODS_LOW = _micropolisengine.WOODS_LOW
LASTTREE = _micropolisengine.LASTTREE
WOODS = _micropolisengine.WOODS
UNUSED_TRASH1 = _micropolisengine.UNUSED_TRASH1
UNUSED_TRASH2 = _micropolisengine.UNUSED_TRASH2
WOODS_HIGH = _micropolisengine.WOODS_HIGH
WOODS2 = _micropolisengine.WOODS2
WOODS3 = _micropolisengine.WOODS3
WOODS4 = _micropolisengine.WOODS4
WOODS5 = _micropolisengine.WOODS5
RUBBLE = _micropolisengine.RUBBLE
LASTRUBBLE = _micropolisengine.LASTRUBBLE
FLOOD = _micropolisengine.FLOOD
LASTFLOOD = _micropolisengine.LASTFLOOD
RADTILE = _micropolisengine.RADTILE
UNUSED_TRASH3 = _micropolisengine.UNUSED_TRASH3
UNUSED_TRASH4 = _micropolisengine.UNUSED_TRASH4
UNUSED_TRASH5 = _micropolisengine.UNUSED_TRASH5
FIRE = _micropolisengine.FIRE
FIREBASE = _micropolisengine.FIREBASE
LASTFIRE = _micropolisengine.LASTFIRE
HBRIDGE = _micropolisengine.HBRIDGE
ROADBASE = _micropolisengine.ROADBASE
VBRIDGE = _micropolisengine.VBRIDGE
ROADS = _micropolisengine.ROADS
ROADS2 = _micropolisengine.ROADS2
ROADS3 = _micropolisengine.ROADS3
ROADS4 = _micropolisengine.ROADS4
ROADS5 = _micropolisengine.ROADS5
ROADS6 = _micropolisengine.ROADS6
ROADS7 = _micropolisengine.ROADS7
ROADS8 = _micropolisengine.ROADS8
ROADS9 = _micropolisengine.ROADS9
ROADS10 = _micropolisengine.ROADS10
INTERSECTION = _micropolisengine.INTERSECTION
HROADPOWER = _micropolisengine.HROADPOWER
VROADPOWER = _micropolisengine.VROADPOWER
BRWH = _micropolisengine.BRWH
LTRFBASE = _micropolisengine.LTRFBASE
BRWV = _micropolisengine.BRWV
BRWXXX1 = _micropolisengine.BRWXXX1
BRWXXX2 = _micropolisengine.BRWXXX2
BRWXXX3 = _micropolisengine.BRWXXX3
HTRFBASE = _micropolisengine.HTRFBASE
BRWXXX4 = _micropolisengine.BRWXXX4
BRWXXX5 = _micropolisengine.BRWXXX5
BRWXXX6 = _micropolisengine.BRWXXX6
LASTROAD = _micropolisengine.LASTROAD
BRWXXX7 = _micropolisengine.BRWXXX7
HPOWER = _micropolisengine.HPOWER
VPOWER = _micropolisengine.VPOWER
LHPOWER = _micropolisengine.LHPOWER
LVPOWER = _micropolisengine.LVPOWER
LVPOWER2 = _micropolisengine.LVPOWER2
LVPOWER3 = _micropolisengine.LVPOWER3
LVPOWER4 = _micropolisengine.LVPOWER4
LVPOWER5 = _micropolisengine.LVPOWER5
LVPOWER6 = _micropolisengine.LVPOWER6
LVPOWER7 = _micropolisengine.LVPOWER7
LVPOWER8 = _micropolisengine.LVPOWER8
LVPOWER9 = _micropolisengine.LVPOWER9
LVPOWER10 = _micropolisengine.LVPOWER10
RAILHPOWERV = _micropolisengine.RAILHPOWERV
RAILVPOWERH = _micropolisengine.RAILVPOWERH
POWERBASE = _micropolisengine.POWERBASE
LASTPOWER = _micropolisengine.LASTPOWER
UNUSED_TRASH6 = _micropolisengine.UNUSED_TRASH6
HRAIL = _micropolisengine.HRAIL
VRAIL = _micropolisengine.VRAIL
LHRAIL = _micropolisengine.LHRAIL
LVRAIL = _micropolisengine.LVRAIL
LVRAIL2 = _micropolisengine.LVRAIL2
LVRAIL3 = _micropolisengine.LVRAIL3
LVRAIL4 = _micropolisengine.LVRAIL4
LVRAIL5 = _micropolisengine.LVRAIL5
LVRAIL6 = _micropolisengine.LVRAIL6
LVRAIL7 = _micropolisengine.LVRAIL7
LVRAIL8 = _micropolisengine.LVRAIL8
LVRAIL9 = _micropolisengine.LVRAIL9
LVRAIL10 = _micropolisengine.LVRAIL10
HRAILROAD = _micropolisengine.HRAILROAD
VRAILROAD = _micropolisengine.VRAILROAD
RAILBASE = _micropolisengine.RAILBASE
LASTRAIL = _micropolisengine.LASTRAIL
ROADVPOWERH = _micropolisengine.ROADVPOWERH
RESBASE = _micropolisengine.RESBASE
FREEZ = _micropolisengine.FREEZ
HOUSE = _micropolisengine.HOUSE
LHTHR = _micropolisengine.LHTHR
HHTHR = _micropolisengine.HHTHR
RZB = _micropolisengine.RZB
HOSPITALBASE = _micropolisengine.HOSPITALBASE
HOSPITAL = _micropolisengine.HOSPITAL
CHURCHBASE = _micropolisengine.CHURCHBASE
CHURCH0BASE = _micropolisengine.CHURCH0BASE
CHURCH = _micropolisengine.CHURCH
CHURCH0 = _micropolisengine.CHURCH0
COMBASE = _micropolisengine.COMBASE
COMCLR = _micropolisengine.COMCLR
CZB = _micropolisengine.CZB
COMLAST = _micropolisengine.COMLAST
INDBASE = _micropolisengine.INDBASE
INDCLR = _micropolisengine.INDCLR
LASTIND = _micropolisengine.LASTIND
IND1 = _micropolisengine.IND1
IZB = _micropolisengine.IZB
IND2 = _micropolisengine.IND2
IND3 = _micropolisengine.IND3
IND4 = _micropolisengine.IND4
IND5 = _micropolisengine.IND5
IND6 = _micropolisengine.IND6
IND7 = _micropolisengine.IND7
IND8 = _micropolisengine.IND8
IND9 = _micropolisengine.IND9
PORTBASE = _micropolisengine.PORTBASE
PORT = _micropolisengine.PORT
LASTPORT = _micropolisengine.LASTPORT
AIRPORTBASE = _micropolisengine.AIRPORTBASE
RADAR = _micropolisengine.RADAR
AIRPORT = _micropolisengine.AIRPORT
COALBASE = _micropolisengine.COALBASE
POWERPLANT = _micropolisengine.POWERPLANT
LASTPOWERPLANT = _micropolisengine.LASTPOWERPLANT
FIRESTBASE = _micropolisengine.FIRESTBASE
FIRESTATION = _micropolisengine.FIRESTATION
POLICESTBASE = _micropolisengine.POLICESTBASE
POLICESTATION = _micropolisengine.POLICESTATION
STADIUMBASE = _micropolisengine.STADIUMBASE
STADIUM = _micropolisengine.STADIUM
FULLSTADIUM = _micropolisengine.FULLSTADIUM
NUCLEARBASE = _micropolisengine.NUCLEARBASE
NUCLEAR = _micropolisengine.NUCLEAR
LASTZONE = _micropolisengine.LASTZONE
LIGHTNINGBOLT = _micropolisengine.LIGHTNINGBOLT
HBRDG0 = _micropolisengine.HBRDG0
HBRDG1 = _micropolisengine.HBRDG1
HBRDG2 = _micropolisengine.HBRDG2
HBRDG3 = _micropolisengine.HBRDG3
HBRDG_END = _micropolisengine.HBRDG_END
RADAR0 = _micropolisengine.RADAR0
RADAR1 = _micropolisengine.RADAR1
RADAR2 = _micropolisengine.RADAR2
RADAR3 = _micropolisengine.RADAR3
RADAR4 = _micropolisengine.RADAR4
RADAR5 = _micropolisengine.RADAR5
RADAR6 = _micropolisengine.RADAR6
RADAR7 = _micropolisengine.RADAR7
FOUNTAIN = _micropolisengine.FOUNTAIN
INDBASE2 = _micropolisengine.INDBASE2
TELEBASE = _micropolisengine.TELEBASE
TELELAST = _micropolisengine.TELELAST
SMOKEBASE = _micropolisengine.SMOKEBASE
TINYEXP = _micropolisengine.TINYEXP
SOMETINYEXP = _micropolisengine.SOMETINYEXP
LASTTINYEXP = _micropolisengine.LASTTINYEXP
TINYEXPLAST = _micropolisengine.TINYEXPLAST
COALSMOKE1 = _micropolisengine.COALSMOKE1
COALSMOKE2 = _micropolisengine.COALSMOKE2
COALSMOKE3 = _micropolisengine.COALSMOKE3
COALSMOKE4 = _micropolisengine.COALSMOKE4
FOOTBALLGAME1 = _micropolisengine.FOOTBALLGAME1
FOOTBALLGAME2 = _micropolisengine.FOOTBALLGAME2
VBRDG0 = _micropolisengine.VBRDG0
VBRDG1 = _micropolisengine.VBRDG1
VBRDG2 = _micropolisengine.VBRDG2
VBRDG3 = _micropolisengine.VBRDG3
NUKESWIRL1 = _micropolisengine.NUKESWIRL1
NUKESWIRL2 = _micropolisengine.NUKESWIRL2
NUKESWIRL3 = _micropolisengine.NUKESWIRL3
NUKESWIRL4 = _micropolisengine.NUKESWIRL4
CHURCH1BASE = _micropolisengine.CHURCH1BASE
CHURCH1 = _micropolisengine.CHURCH1
CHURCH2BASE = _micropolisengine.CHURCH2BASE
CHURCH2 = _micropolisengine.CHURCH2
CHURCH3BASE = _micropolisengine.CHURCH3BASE
CHURCH3 = _micropolisengine.CHURCH3
CHURCH4BASE = _micropolisengine.CHURCH4BASE
CHURCH4 = _micropolisengine.CHURCH4
CHURCH5BASE = _micropolisengine.CHURCH5BASE
CHURCH5 = _micropolisengine.CHURCH5
CHURCH6BASE = _micropolisengine.CHURCH6BASE
CHURCH6 = _micropolisengine.CHURCH6
CHURCH7BASE = _micropolisengine.CHURCH7BASE
CHURCH7 = _micropolisengine.CHURCH7
CHURCH7LAST = _micropolisengine.CHURCH7LAST
TILE_COUNT = _micropolisengine.TILE_COUNT
TILE_INVALID = _micropolisengine.TILE_INVALID
TOOL_RESIDENTIAL = _micropolisengine.TOOL_RESIDENTIAL
TOOL_COMMERCIAL = _micropolisengine.TOOL_COMMERCIAL
TOOL_INDUSTRIAL = _micropolisengine.TOOL_INDUSTRIAL
TOOL_FIRESTATION = _micropolisengine.TOOL_FIRESTATION
TOOL_POLICESTATION = _micropolisengine.TOOL_POLICESTATION
TOOL_QUERY = _micropolisengine.TOOL_QUERY
TOOL_WIRE = _micropolisengine.TOOL_WIRE
TOOL_BULLDOZER = _micropolisengine.TOOL_BULLDOZER
TOOL_RAILROAD = _micropolisengine.TOOL_RAILROAD
TOOL_ROAD = _micropolisengine.TOOL_ROAD
TOOL_STADIUM = _micropolisengine.TOOL_STADIUM
TOOL_PARK = _micropolisengine.TOOL_PARK
TOOL_SEAPORT = _micropolisengine.TOOL_SEAPORT
TOOL_COALPOWER = _micropolisengine.TOOL_COALPOWER
TOOL_NUCLEARPOWER = _micropolisengine.TOOL_NUCLEARPOWER
TOOL_AIRPORT = _micropolisengine.TOOL_AIRPORT
TOOL_NETWORK = _micropolisengine.TOOL_NETWORK
TOOL_WATER = _micropolisengine.TOOL_WATER
TOOL_LAND = _micropolisengine.TOOL_LAND
TOOL_FOREST = _micropolisengine.TOOL_FOREST
TOOL_COUNT = _micropolisengine.TOOL_COUNT
TOOL_FIRST = _micropolisengine.TOOL_FIRST
TOOL_LAST = _micropolisengine.TOOL_LAST
SC_NONE = _micropolisengine.SC_NONE
SC_DULLSVILLE = _micropolisengine.SC_DULLSVILLE
SC_SAN_FRANCISCO = _micropolisengine.SC_SAN_FRANCISCO
SC_HAMBURG = _micropolisengine.SC_HAMBURG
SC_BERN = _micropolisengine.SC_BERN
SC_TOKYO = _micropolisengine.SC_TOKYO
SC_DETROIT = _micropolisengine.SC_DETROIT
SC_BOSTON = _micropolisengine.SC_BOSTON
SC_RIO = _micropolisengine.SC_RIO
SC_COUNT = _micropolisengine.SC_COUNT
ZT_COMMERCIAL = _micropolisengine.ZT_COMMERCIAL
ZT_INDUSTRIAL = _micropolisengine.ZT_INDUSTRIAL
ZT_RESIDENTIAL = _micropolisengine.ZT_RESIDENTIAL
ZT_NUM_DESTINATIONS = _micropolisengine.ZT_NUM_DESTINATIONS
CVP_CRIME = _micropolisengine.CVP_CRIME
CVP_POLLUTION = _micropolisengine.CVP_POLLUTION
CVP_HOUSING = _micropolisengine.CVP_HOUSING
CVP_TAXES = _micropolisengine.CVP_TAXES
CVP_TRAFFIC = _micropolisengine.CVP_TRAFFIC
CVP_UNEMPLOYMENT = _micropolisengine.CVP_UNEMPLOYMENT
CVP_FIRE = _micropolisengine.CVP_FIRE
CVP_NUMPROBLEMS = _micropolisengine.CVP_NUMPROBLEMS
CVP_PROBLEM_COMPLAINTS = _micropolisengine.CVP_PROBLEM_COMPLAINTS
PROBNUM = _micropolisengine.PROBNUM
CC_VILLAGE = _micropolisengine.CC_VILLAGE
CC_TOWN = _micropolisengine.CC_TOWN
CC_CITY = _micropolisengine.CC_CITY
CC_CAPITAL = _micropolisengine.CC_CAPITAL
CC_METROPOLIS = _micropolisengine.CC_METROPOLIS
CC_MEGALOPOLIS = _micropolisengine.CC_MEGALOPOLIS
CC_NUM_CITIES = _micropolisengine.CC_NUM_CITIES
LEVEL_EASY = _micropolisengine.LEVEL_EASY
LEVEL_MEDIUM = _micropolisengine.LEVEL_MEDIUM
LEVEL_HARD = _micropolisengine.LEVEL_HARD
LEVEL_COUNT = _micropolisengine.LEVEL_COUNT
LEVEL_FIRST = _micropolisengine.LEVEL_FIRST
LEVEL_LAST = _micropolisengine.LEVEL_LAST

def not_reached(*args):
  return _micropolisengine.not_reached(*args)
not_reached = _micropolisengine.not_reached
class Resource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resource, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buf"] = _micropolisengine.Resource_buf_set
    __swig_getmethods__["buf"] = _micropolisengine.Resource_buf_get
    if _newclass:buf = _swig_property(_micropolisengine.Resource_buf_get, _micropolisengine.Resource_buf_set)
    __swig_setmethods__["size"] = _micropolisengine.Resource_size_set
    __swig_getmethods__["size"] = _micropolisengine.Resource_size_get
    if _newclass:size = _swig_property(_micropolisengine.Resource_size_get, _micropolisengine.Resource_size_set)
    __swig_setmethods__["name"] = _micropolisengine.Resource_name_set
    __swig_getmethods__["name"] = _micropolisengine.Resource_name_get
    if _newclass:name = _swig_property(_micropolisengine.Resource_name_get, _micropolisengine.Resource_name_set)
    __swig_setmethods__["id"] = _micropolisengine.Resource_id_set
    __swig_getmethods__["id"] = _micropolisengine.Resource_id_get
    if _newclass:id = _swig_property(_micropolisengine.Resource_id_get, _micropolisengine.Resource_id_set)
    __swig_setmethods__["next"] = _micropolisengine.Resource_next_set
    __swig_getmethods__["next"] = _micropolisengine.Resource_next_get
    if _newclass:next = _swig_property(_micropolisengine.Resource_next_get, _micropolisengine.Resource_next_set)
    def __init__(self): 
        this = _micropolisengine.new_Resource()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_Resource
    __del__ = lambda self : None;
Resource_swigregister = _micropolisengine.Resource_swigregister
Resource_swigregister(Resource)
cvar = _micropolisengine.cvar
WORLD_W = cvar.WORLD_W
WORLD_H = cvar.WORLD_H
BITS_PER_TILE = cvar.BITS_PER_TILE
BYTES_PER_TILE = cvar.BYTES_PER_TILE
WORLD_W_2 = cvar.WORLD_W_2
WORLD_H_2 = cvar.WORLD_H_2
WORLD_W_4 = cvar.WORLD_W_4
WORLD_H_4 = cvar.WORLD_H_4
WORLD_W_8 = cvar.WORLD_W_8
WORLD_H_8 = cvar.WORLD_H_8
EDITOR_TILE_SIZE = cvar.EDITOR_TILE_SIZE
PASSES_PER_CITYTIME = cvar.PASSES_PER_CITYTIME
CITYTIMES_PER_MONTH = cvar.CITYTIMES_PER_MONTH
CITYTIMES_PER_YEAR = cvar.CITYTIMES_PER_YEAR
HISTORY_LENGTH = cvar.HISTORY_LENGTH
MISC_HISTORY_LENGTH = cvar.MISC_HISTORY_LENGTH
HISTORY_COUNT = cvar.HISTORY_COUNT
POWER_STACK_SIZE = cvar.POWER_STACK_SIZE
NOWHERE = cvar.NOWHERE
MAX_TRAFFIC_DISTANCE = cvar.MAX_TRAFFIC_DISTANCE
MAX_ROAD_EFFECT = cvar.MAX_ROAD_EFFECT
MAX_POLICE_STATION_EFFECT = cvar.MAX_POLICE_STATION_EFFECT
MAX_FIRE_STATION_EFFECT = cvar.MAX_FIRE_STATION_EFFECT
RES_VALVE_RANGE = cvar.RES_VALVE_RANGE
COM_VALVE_RANGE = cvar.COM_VALVE_RANGE
IND_VALVE_RANGE = cvar.IND_VALVE_RANGE

class StringTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _micropolisengine.StringTable_id_set
    __swig_getmethods__["id"] = _micropolisengine.StringTable_id_get
    if _newclass:id = _swig_property(_micropolisengine.StringTable_id_get, _micropolisengine.StringTable_id_set)
    __swig_setmethods__["lines"] = _micropolisengine.StringTable_lines_set
    __swig_getmethods__["lines"] = _micropolisengine.StringTable_lines_get
    if _newclass:lines = _swig_property(_micropolisengine.StringTable_lines_get, _micropolisengine.StringTable_lines_set)
    __swig_setmethods__["strings"] = _micropolisengine.StringTable_strings_set
    __swig_getmethods__["strings"] = _micropolisengine.StringTable_strings_get
    if _newclass:strings = _swig_property(_micropolisengine.StringTable_strings_get, _micropolisengine.StringTable_strings_set)
    __swig_setmethods__["next"] = _micropolisengine.StringTable_next_set
    __swig_getmethods__["next"] = _micropolisengine.StringTable_next_get
    if _newclass:next = _swig_property(_micropolisengine.StringTable_next_get, _micropolisengine.StringTable_next_set)
    def __init__(self): 
        this = _micropolisengine.new_StringTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_StringTable
    __del__ = lambda self : None;
StringTable_swigregister = _micropolisengine.StringTable_swigregister
StringTable_swigregister(StringTable)

class SimSprite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSprite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimSprite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _micropolisengine.SimSprite_next_set
    __swig_getmethods__["next"] = _micropolisengine.SimSprite_next_get
    if _newclass:next = _swig_property(_micropolisengine.SimSprite_next_get, _micropolisengine.SimSprite_next_set)
    __swig_setmethods__["name"] = _micropolisengine.SimSprite_name_set
    __swig_getmethods__["name"] = _micropolisengine.SimSprite_name_get
    if _newclass:name = _swig_property(_micropolisengine.SimSprite_name_get, _micropolisengine.SimSprite_name_set)
    __swig_setmethods__["type"] = _micropolisengine.SimSprite_type_set
    __swig_getmethods__["type"] = _micropolisengine.SimSprite_type_get
    if _newclass:type = _swig_property(_micropolisengine.SimSprite_type_get, _micropolisengine.SimSprite_type_set)
    __swig_setmethods__["frame"] = _micropolisengine.SimSprite_frame_set
    __swig_getmethods__["frame"] = _micropolisengine.SimSprite_frame_get
    if _newclass:frame = _swig_property(_micropolisengine.SimSprite_frame_get, _micropolisengine.SimSprite_frame_set)
    __swig_setmethods__["x"] = _micropolisengine.SimSprite_x_set
    __swig_getmethods__["x"] = _micropolisengine.SimSprite_x_get
    if _newclass:x = _swig_property(_micropolisengine.SimSprite_x_get, _micropolisengine.SimSprite_x_set)
    __swig_setmethods__["y"] = _micropolisengine.SimSprite_y_set
    __swig_getmethods__["y"] = _micropolisengine.SimSprite_y_get
    if _newclass:y = _swig_property(_micropolisengine.SimSprite_y_get, _micropolisengine.SimSprite_y_set)
    __swig_setmethods__["width"] = _micropolisengine.SimSprite_width_set
    __swig_getmethods__["width"] = _micropolisengine.SimSprite_width_get
    if _newclass:width = _swig_property(_micropolisengine.SimSprite_width_get, _micropolisengine.SimSprite_width_set)
    __swig_setmethods__["height"] = _micropolisengine.SimSprite_height_set
    __swig_getmethods__["height"] = _micropolisengine.SimSprite_height_get
    if _newclass:height = _swig_property(_micropolisengine.SimSprite_height_get, _micropolisengine.SimSprite_height_set)
    __swig_setmethods__["xOffset"] = _micropolisengine.SimSprite_xOffset_set
    __swig_getmethods__["xOffset"] = _micropolisengine.SimSprite_xOffset_get
    if _newclass:xOffset = _swig_property(_micropolisengine.SimSprite_xOffset_get, _micropolisengine.SimSprite_xOffset_set)
    __swig_setmethods__["yOffset"] = _micropolisengine.SimSprite_yOffset_set
    __swig_getmethods__["yOffset"] = _micropolisengine.SimSprite_yOffset_get
    if _newclass:yOffset = _swig_property(_micropolisengine.SimSprite_yOffset_get, _micropolisengine.SimSprite_yOffset_set)
    __swig_setmethods__["xHot"] = _micropolisengine.SimSprite_xHot_set
    __swig_getmethods__["xHot"] = _micropolisengine.SimSprite_xHot_get
    if _newclass:xHot = _swig_property(_micropolisengine.SimSprite_xHot_get, _micropolisengine.SimSprite_xHot_set)
    __swig_setmethods__["yHot"] = _micropolisengine.SimSprite_yHot_set
    __swig_getmethods__["yHot"] = _micropolisengine.SimSprite_yHot_get
    if _newclass:yHot = _swig_property(_micropolisengine.SimSprite_yHot_get, _micropolisengine.SimSprite_yHot_set)
    __swig_setmethods__["origX"] = _micropolisengine.SimSprite_origX_set
    __swig_getmethods__["origX"] = _micropolisengine.SimSprite_origX_get
    if _newclass:origX = _swig_property(_micropolisengine.SimSprite_origX_get, _micropolisengine.SimSprite_origX_set)
    __swig_setmethods__["origY"] = _micropolisengine.SimSprite_origY_set
    __swig_getmethods__["origY"] = _micropolisengine.SimSprite_origY_get
    if _newclass:origY = _swig_property(_micropolisengine.SimSprite_origY_get, _micropolisengine.SimSprite_origY_set)
    __swig_setmethods__["destX"] = _micropolisengine.SimSprite_destX_set
    __swig_getmethods__["destX"] = _micropolisengine.SimSprite_destX_get
    if _newclass:destX = _swig_property(_micropolisengine.SimSprite_destX_get, _micropolisengine.SimSprite_destX_set)
    __swig_setmethods__["destY"] = _micropolisengine.SimSprite_destY_set
    __swig_getmethods__["destY"] = _micropolisengine.SimSprite_destY_get
    if _newclass:destY = _swig_property(_micropolisengine.SimSprite_destY_get, _micropolisengine.SimSprite_destY_set)
    __swig_setmethods__["count"] = _micropolisengine.SimSprite_count_set
    __swig_getmethods__["count"] = _micropolisengine.SimSprite_count_get
    if _newclass:count = _swig_property(_micropolisengine.SimSprite_count_get, _micropolisengine.SimSprite_count_set)
    __swig_setmethods__["soundCount"] = _micropolisengine.SimSprite_soundCount_set
    __swig_getmethods__["soundCount"] = _micropolisengine.SimSprite_soundCount_get
    if _newclass:soundCount = _swig_property(_micropolisengine.SimSprite_soundCount_get, _micropolisengine.SimSprite_soundCount_set)
    __swig_setmethods__["dir"] = _micropolisengine.SimSprite_dir_set
    __swig_getmethods__["dir"] = _micropolisengine.SimSprite_dir_get
    if _newclass:dir = _swig_property(_micropolisengine.SimSprite_dir_get, _micropolisengine.SimSprite_dir_set)
    __swig_setmethods__["newDir"] = _micropolisengine.SimSprite_newDir_set
    __swig_getmethods__["newDir"] = _micropolisengine.SimSprite_newDir_get
    if _newclass:newDir = _swig_property(_micropolisengine.SimSprite_newDir_get, _micropolisengine.SimSprite_newDir_set)
    __swig_setmethods__["step"] = _micropolisengine.SimSprite_step_set
    __swig_getmethods__["step"] = _micropolisengine.SimSprite_step_get
    if _newclass:step = _swig_property(_micropolisengine.SimSprite_step_get, _micropolisengine.SimSprite_step_set)
    __swig_setmethods__["flag"] = _micropolisengine.SimSprite_flag_set
    __swig_getmethods__["flag"] = _micropolisengine.SimSprite_flag_get
    if _newclass:flag = _swig_property(_micropolisengine.SimSprite_flag_get, _micropolisengine.SimSprite_flag_set)
    __swig_setmethods__["control"] = _micropolisengine.SimSprite_control_set
    __swig_getmethods__["control"] = _micropolisengine.SimSprite_control_get
    if _newclass:control = _swig_property(_micropolisengine.SimSprite_control_get, _micropolisengine.SimSprite_control_set)
    __swig_setmethods__["turn"] = _micropolisengine.SimSprite_turn_set
    __swig_getmethods__["turn"] = _micropolisengine.SimSprite_turn_get
    if _newclass:turn = _swig_property(_micropolisengine.SimSprite_turn_get, _micropolisengine.SimSprite_turn_set)
    __swig_setmethods__["accel"] = _micropolisengine.SimSprite_accel_set
    __swig_getmethods__["accel"] = _micropolisengine.SimSprite_accel_get
    if _newclass:accel = _swig_property(_micropolisengine.SimSprite_accel_get, _micropolisengine.SimSprite_accel_set)
    __swig_setmethods__["speed"] = _micropolisengine.SimSprite_speed_set
    __swig_getmethods__["speed"] = _micropolisengine.SimSprite_speed_get
    if _newclass:speed = _swig_property(_micropolisengine.SimSprite_speed_get, _micropolisengine.SimSprite_speed_set)
    def __init__(self): 
        this = _micropolisengine.new_SimSprite()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_SimSprite
    __del__ = lambda self : None;
SimSprite_swigregister = _micropolisengine.SimSprite_swigregister
SimSprite_swigregister(SimSprite)

class Micropolis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Micropolis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Micropolis, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _micropolisengine.new_Micropolis()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_Micropolis
    __del__ = lambda self : None;
    __swig_setmethods__["roadTotal"] = _micropolisengine.Micropolis_roadTotal_set
    __swig_getmethods__["roadTotal"] = _micropolisengine.Micropolis_roadTotal_get
    if _newclass:roadTotal = _swig_property(_micropolisengine.Micropolis_roadTotal_get, _micropolisengine.Micropolis_roadTotal_set)
    __swig_setmethods__["railTotal"] = _micropolisengine.Micropolis_railTotal_set
    __swig_getmethods__["railTotal"] = _micropolisengine.Micropolis_railTotal_get
    if _newclass:railTotal = _swig_property(_micropolisengine.Micropolis_railTotal_get, _micropolisengine.Micropolis_railTotal_set)
    __swig_setmethods__["firePop"] = _micropolisengine.Micropolis_firePop_set
    __swig_getmethods__["firePop"] = _micropolisengine.Micropolis_firePop_get
    if _newclass:firePop = _swig_property(_micropolisengine.Micropolis_firePop_get, _micropolisengine.Micropolis_firePop_set)
    __swig_setmethods__["resPop"] = _micropolisengine.Micropolis_resPop_set
    __swig_getmethods__["resPop"] = _micropolisengine.Micropolis_resPop_get
    if _newclass:resPop = _swig_property(_micropolisengine.Micropolis_resPop_get, _micropolisengine.Micropolis_resPop_set)
    __swig_setmethods__["comPop"] = _micropolisengine.Micropolis_comPop_set
    __swig_getmethods__["comPop"] = _micropolisengine.Micropolis_comPop_get
    if _newclass:comPop = _swig_property(_micropolisengine.Micropolis_comPop_get, _micropolisengine.Micropolis_comPop_set)
    __swig_setmethods__["indPop"] = _micropolisengine.Micropolis_indPop_set
    __swig_getmethods__["indPop"] = _micropolisengine.Micropolis_indPop_get
    if _newclass:indPop = _swig_property(_micropolisengine.Micropolis_indPop_get, _micropolisengine.Micropolis_indPop_set)
    __swig_setmethods__["totalPop"] = _micropolisengine.Micropolis_totalPop_set
    __swig_getmethods__["totalPop"] = _micropolisengine.Micropolis_totalPop_get
    if _newclass:totalPop = _swig_property(_micropolisengine.Micropolis_totalPop_get, _micropolisengine.Micropolis_totalPop_set)
    __swig_setmethods__["totalPopLast"] = _micropolisengine.Micropolis_totalPopLast_set
    __swig_getmethods__["totalPopLast"] = _micropolisengine.Micropolis_totalPopLast_get
    if _newclass:totalPopLast = _swig_property(_micropolisengine.Micropolis_totalPopLast_get, _micropolisengine.Micropolis_totalPopLast_set)
    __swig_setmethods__["resZonePop"] = _micropolisengine.Micropolis_resZonePop_set
    __swig_getmethods__["resZonePop"] = _micropolisengine.Micropolis_resZonePop_get
    if _newclass:resZonePop = _swig_property(_micropolisengine.Micropolis_resZonePop_get, _micropolisengine.Micropolis_resZonePop_set)
    __swig_setmethods__["comZonePop"] = _micropolisengine.Micropolis_comZonePop_set
    __swig_getmethods__["comZonePop"] = _micropolisengine.Micropolis_comZonePop_get
    if _newclass:comZonePop = _swig_property(_micropolisengine.Micropolis_comZonePop_get, _micropolisengine.Micropolis_comZonePop_set)
    __swig_setmethods__["indZonePop"] = _micropolisengine.Micropolis_indZonePop_set
    __swig_getmethods__["indZonePop"] = _micropolisengine.Micropolis_indZonePop_get
    if _newclass:indZonePop = _swig_property(_micropolisengine.Micropolis_indZonePop_get, _micropolisengine.Micropolis_indZonePop_set)
    __swig_setmethods__["totalZonePop"] = _micropolisengine.Micropolis_totalZonePop_set
    __swig_getmethods__["totalZonePop"] = _micropolisengine.Micropolis_totalZonePop_get
    if _newclass:totalZonePop = _swig_property(_micropolisengine.Micropolis_totalZonePop_get, _micropolisengine.Micropolis_totalZonePop_set)
    __swig_setmethods__["hospitalPop"] = _micropolisengine.Micropolis_hospitalPop_set
    __swig_getmethods__["hospitalPop"] = _micropolisengine.Micropolis_hospitalPop_get
    if _newclass:hospitalPop = _swig_property(_micropolisengine.Micropolis_hospitalPop_get, _micropolisengine.Micropolis_hospitalPop_set)
    __swig_setmethods__["churchPop"] = _micropolisengine.Micropolis_churchPop_set
    __swig_getmethods__["churchPop"] = _micropolisengine.Micropolis_churchPop_get
    if _newclass:churchPop = _swig_property(_micropolisengine.Micropolis_churchPop_get, _micropolisengine.Micropolis_churchPop_set)
    __swig_setmethods__["faith"] = _micropolisengine.Micropolis_faith_set
    __swig_getmethods__["faith"] = _micropolisengine.Micropolis_faith_get
    if _newclass:faith = _swig_property(_micropolisengine.Micropolis_faith_get, _micropolisengine.Micropolis_faith_set)
    __swig_setmethods__["stadiumPop"] = _micropolisengine.Micropolis_stadiumPop_set
    __swig_getmethods__["stadiumPop"] = _micropolisengine.Micropolis_stadiumPop_get
    if _newclass:stadiumPop = _swig_property(_micropolisengine.Micropolis_stadiumPop_get, _micropolisengine.Micropolis_stadiumPop_set)
    __swig_setmethods__["policeStationPop"] = _micropolisengine.Micropolis_policeStationPop_set
    __swig_getmethods__["policeStationPop"] = _micropolisengine.Micropolis_policeStationPop_get
    if _newclass:policeStationPop = _swig_property(_micropolisengine.Micropolis_policeStationPop_get, _micropolisengine.Micropolis_policeStationPop_set)
    __swig_setmethods__["fireStationPop"] = _micropolisengine.Micropolis_fireStationPop_set
    __swig_getmethods__["fireStationPop"] = _micropolisengine.Micropolis_fireStationPop_get
    if _newclass:fireStationPop = _swig_property(_micropolisengine.Micropolis_fireStationPop_get, _micropolisengine.Micropolis_fireStationPop_set)
    __swig_setmethods__["coalPowerPop"] = _micropolisengine.Micropolis_coalPowerPop_set
    __swig_getmethods__["coalPowerPop"] = _micropolisengine.Micropolis_coalPowerPop_get
    if _newclass:coalPowerPop = _swig_property(_micropolisengine.Micropolis_coalPowerPop_get, _micropolisengine.Micropolis_coalPowerPop_set)
    __swig_setmethods__["nuclearPowerPop"] = _micropolisengine.Micropolis_nuclearPowerPop_set
    __swig_getmethods__["nuclearPowerPop"] = _micropolisengine.Micropolis_nuclearPowerPop_get
    if _newclass:nuclearPowerPop = _swig_property(_micropolisengine.Micropolis_nuclearPowerPop_get, _micropolisengine.Micropolis_nuclearPowerPop_set)
    __swig_setmethods__["seaportPop"] = _micropolisengine.Micropolis_seaportPop_set
    __swig_getmethods__["seaportPop"] = _micropolisengine.Micropolis_seaportPop_get
    if _newclass:seaportPop = _swig_property(_micropolisengine.Micropolis_seaportPop_get, _micropolisengine.Micropolis_seaportPop_set)
    __swig_setmethods__["airportPop"] = _micropolisengine.Micropolis_airportPop_set
    __swig_getmethods__["airportPop"] = _micropolisengine.Micropolis_airportPop_get
    if _newclass:airportPop = _swig_property(_micropolisengine.Micropolis_airportPop_get, _micropolisengine.Micropolis_airportPop_set)
    __swig_setmethods__["crimeAverage"] = _micropolisengine.Micropolis_crimeAverage_set
    __swig_getmethods__["crimeAverage"] = _micropolisengine.Micropolis_crimeAverage_get
    if _newclass:crimeAverage = _swig_property(_micropolisengine.Micropolis_crimeAverage_get, _micropolisengine.Micropolis_crimeAverage_set)
    __swig_setmethods__["pollutionAverage"] = _micropolisengine.Micropolis_pollutionAverage_set
    __swig_getmethods__["pollutionAverage"] = _micropolisengine.Micropolis_pollutionAverage_get
    if _newclass:pollutionAverage = _swig_property(_micropolisengine.Micropolis_pollutionAverage_get, _micropolisengine.Micropolis_pollutionAverage_set)
    __swig_setmethods__["landValueAverage"] = _micropolisengine.Micropolis_landValueAverage_set
    __swig_getmethods__["landValueAverage"] = _micropolisengine.Micropolis_landValueAverage_get
    if _newclass:landValueAverage = _swig_property(_micropolisengine.Micropolis_landValueAverage_get, _micropolisengine.Micropolis_landValueAverage_set)
    __swig_setmethods__["cityTime"] = _micropolisengine.Micropolis_cityTime_set
    __swig_getmethods__["cityTime"] = _micropolisengine.Micropolis_cityTime_get
    if _newclass:cityTime = _swig_property(_micropolisengine.Micropolis_cityTime_get, _micropolisengine.Micropolis_cityTime_set)
    __swig_setmethods__["cityMonth"] = _micropolisengine.Micropolis_cityMonth_set
    __swig_getmethods__["cityMonth"] = _micropolisengine.Micropolis_cityMonth_get
    if _newclass:cityMonth = _swig_property(_micropolisengine.Micropolis_cityMonth_get, _micropolisengine.Micropolis_cityMonth_set)
    __swig_setmethods__["cityYear"] = _micropolisengine.Micropolis_cityYear_set
    __swig_getmethods__["cityYear"] = _micropolisengine.Micropolis_cityYear_get
    if _newclass:cityYear = _swig_property(_micropolisengine.Micropolis_cityYear_get, _micropolisengine.Micropolis_cityYear_set)
    __swig_setmethods__["startingYear"] = _micropolisengine.Micropolis_startingYear_set
    __swig_getmethods__["startingYear"] = _micropolisengine.Micropolis_startingYear_get
    if _newclass:startingYear = _swig_property(_micropolisengine.Micropolis_startingYear_get, _micropolisengine.Micropolis_startingYear_set)
    __swig_setmethods__["map"] = _micropolisengine.Micropolis_map_set
    __swig_getmethods__["map"] = _micropolisengine.Micropolis_map_get
    if _newclass:map = _swig_property(_micropolisengine.Micropolis_map_get, _micropolisengine.Micropolis_map_set)
    __swig_setmethods__["resHist10Max"] = _micropolisengine.Micropolis_resHist10Max_set
    __swig_getmethods__["resHist10Max"] = _micropolisengine.Micropolis_resHist10Max_get
    if _newclass:resHist10Max = _swig_property(_micropolisengine.Micropolis_resHist10Max_get, _micropolisengine.Micropolis_resHist10Max_set)
    __swig_setmethods__["resHist120Max"] = _micropolisengine.Micropolis_resHist120Max_set
    __swig_getmethods__["resHist120Max"] = _micropolisengine.Micropolis_resHist120Max_get
    if _newclass:resHist120Max = _swig_property(_micropolisengine.Micropolis_resHist120Max_get, _micropolisengine.Micropolis_resHist120Max_set)
    __swig_setmethods__["comHist10Max"] = _micropolisengine.Micropolis_comHist10Max_set
    __swig_getmethods__["comHist10Max"] = _micropolisengine.Micropolis_comHist10Max_get
    if _newclass:comHist10Max = _swig_property(_micropolisengine.Micropolis_comHist10Max_get, _micropolisengine.Micropolis_comHist10Max_set)
    __swig_setmethods__["comHist120Max"] = _micropolisengine.Micropolis_comHist120Max_set
    __swig_getmethods__["comHist120Max"] = _micropolisengine.Micropolis_comHist120Max_get
    if _newclass:comHist120Max = _swig_property(_micropolisengine.Micropolis_comHist120Max_get, _micropolisengine.Micropolis_comHist120Max_set)
    __swig_setmethods__["indHist10Max"] = _micropolisengine.Micropolis_indHist10Max_set
    __swig_getmethods__["indHist10Max"] = _micropolisengine.Micropolis_indHist10Max_get
    if _newclass:indHist10Max = _swig_property(_micropolisengine.Micropolis_indHist10Max_get, _micropolisengine.Micropolis_indHist10Max_set)
    __swig_setmethods__["indHist120Max"] = _micropolisengine.Micropolis_indHist120Max_set
    __swig_getmethods__["indHist120Max"] = _micropolisengine.Micropolis_indHist120Max_get
    if _newclass:indHist120Max = _swig_property(_micropolisengine.Micropolis_indHist120Max_get, _micropolisengine.Micropolis_indHist120Max_set)
    __swig_setmethods__["censusChanged"] = _micropolisengine.Micropolis_censusChanged_set
    __swig_getmethods__["censusChanged"] = _micropolisengine.Micropolis_censusChanged_get
    if _newclass:censusChanged = _swig_property(_micropolisengine.Micropolis_censusChanged_get, _micropolisengine.Micropolis_censusChanged_set)
    __swig_setmethods__["roadSpend"] = _micropolisengine.Micropolis_roadSpend_set
    __swig_getmethods__["roadSpend"] = _micropolisengine.Micropolis_roadSpend_get
    if _newclass:roadSpend = _swig_property(_micropolisengine.Micropolis_roadSpend_get, _micropolisengine.Micropolis_roadSpend_set)
    __swig_setmethods__["policeSpend"] = _micropolisengine.Micropolis_policeSpend_set
    __swig_getmethods__["policeSpend"] = _micropolisengine.Micropolis_policeSpend_get
    if _newclass:policeSpend = _swig_property(_micropolisengine.Micropolis_policeSpend_get, _micropolisengine.Micropolis_policeSpend_set)
    __swig_setmethods__["fireSpend"] = _micropolisengine.Micropolis_fireSpend_set
    __swig_getmethods__["fireSpend"] = _micropolisengine.Micropolis_fireSpend_get
    if _newclass:fireSpend = _swig_property(_micropolisengine.Micropolis_fireSpend_get, _micropolisengine.Micropolis_fireSpend_set)
    __swig_setmethods__["roadFund"] = _micropolisengine.Micropolis_roadFund_set
    __swig_getmethods__["roadFund"] = _micropolisengine.Micropolis_roadFund_get
    if _newclass:roadFund = _swig_property(_micropolisengine.Micropolis_roadFund_get, _micropolisengine.Micropolis_roadFund_set)
    __swig_setmethods__["policeFund"] = _micropolisengine.Micropolis_policeFund_set
    __swig_getmethods__["policeFund"] = _micropolisengine.Micropolis_policeFund_get
    if _newclass:policeFund = _swig_property(_micropolisengine.Micropolis_policeFund_get, _micropolisengine.Micropolis_policeFund_set)
    __swig_setmethods__["fireFund"] = _micropolisengine.Micropolis_fireFund_set
    __swig_getmethods__["fireFund"] = _micropolisengine.Micropolis_fireFund_get
    if _newclass:fireFund = _swig_property(_micropolisengine.Micropolis_fireFund_get, _micropolisengine.Micropolis_fireFund_set)
    __swig_setmethods__["roadEffect"] = _micropolisengine.Micropolis_roadEffect_set
    __swig_getmethods__["roadEffect"] = _micropolisengine.Micropolis_roadEffect_get
    if _newclass:roadEffect = _swig_property(_micropolisengine.Micropolis_roadEffect_get, _micropolisengine.Micropolis_roadEffect_set)
    __swig_setmethods__["policeEffect"] = _micropolisengine.Micropolis_policeEffect_set
    __swig_getmethods__["policeEffect"] = _micropolisengine.Micropolis_policeEffect_get
    if _newclass:policeEffect = _swig_property(_micropolisengine.Micropolis_policeEffect_get, _micropolisengine.Micropolis_policeEffect_set)
    __swig_setmethods__["fireEffect"] = _micropolisengine.Micropolis_fireEffect_set
    __swig_getmethods__["fireEffect"] = _micropolisengine.Micropolis_fireEffect_get
    if _newclass:fireEffect = _swig_property(_micropolisengine.Micropolis_fireEffect_get, _micropolisengine.Micropolis_fireEffect_set)
    __swig_setmethods__["taxFund"] = _micropolisengine.Micropolis_taxFund_set
    __swig_getmethods__["taxFund"] = _micropolisengine.Micropolis_taxFund_get
    if _newclass:taxFund = _swig_property(_micropolisengine.Micropolis_taxFund_get, _micropolisengine.Micropolis_taxFund_set)
    __swig_setmethods__["cityTax"] = _micropolisengine.Micropolis_cityTax_set
    __swig_getmethods__["cityTax"] = _micropolisengine.Micropolis_cityTax_get
    if _newclass:cityTax = _swig_property(_micropolisengine.Micropolis_cityTax_get, _micropolisengine.Micropolis_cityTax_set)
    __swig_setmethods__["taxFlag"] = _micropolisengine.Micropolis_taxFlag_set
    __swig_getmethods__["taxFlag"] = _micropolisengine.Micropolis_taxFlag_get
    if _newclass:taxFlag = _swig_property(_micropolisengine.Micropolis_taxFlag_get, _micropolisengine.Micropolis_taxFlag_set)
    __swig_setmethods__["populationDensityMap"] = _micropolisengine.Micropolis_populationDensityMap_set
    __swig_getmethods__["populationDensityMap"] = _micropolisengine.Micropolis_populationDensityMap_get
    if _newclass:populationDensityMap = _swig_property(_micropolisengine.Micropolis_populationDensityMap_get, _micropolisengine.Micropolis_populationDensityMap_set)
    __swig_setmethods__["trafficDensityMap"] = _micropolisengine.Micropolis_trafficDensityMap_set
    __swig_getmethods__["trafficDensityMap"] = _micropolisengine.Micropolis_trafficDensityMap_get
    if _newclass:trafficDensityMap = _swig_property(_micropolisengine.Micropolis_trafficDensityMap_get, _micropolisengine.Micropolis_trafficDensityMap_set)
    __swig_setmethods__["pollutionDensityMap"] = _micropolisengine.Micropolis_pollutionDensityMap_set
    __swig_getmethods__["pollutionDensityMap"] = _micropolisengine.Micropolis_pollutionDensityMap_get
    if _newclass:pollutionDensityMap = _swig_property(_micropolisengine.Micropolis_pollutionDensityMap_get, _micropolisengine.Micropolis_pollutionDensityMap_set)
    __swig_setmethods__["landValueMap"] = _micropolisengine.Micropolis_landValueMap_set
    __swig_getmethods__["landValueMap"] = _micropolisengine.Micropolis_landValueMap_get
    if _newclass:landValueMap = _swig_property(_micropolisengine.Micropolis_landValueMap_get, _micropolisengine.Micropolis_landValueMap_set)
    __swig_setmethods__["crimeRateMap"] = _micropolisengine.Micropolis_crimeRateMap_set
    __swig_getmethods__["crimeRateMap"] = _micropolisengine.Micropolis_crimeRateMap_get
    if _newclass:crimeRateMap = _swig_property(_micropolisengine.Micropolis_crimeRateMap_get, _micropolisengine.Micropolis_crimeRateMap_set)
    __swig_setmethods__["terrainDensityMap"] = _micropolisengine.Micropolis_terrainDensityMap_set
    __swig_getmethods__["terrainDensityMap"] = _micropolisengine.Micropolis_terrainDensityMap_get
    if _newclass:terrainDensityMap = _swig_property(_micropolisengine.Micropolis_terrainDensityMap_get, _micropolisengine.Micropolis_terrainDensityMap_set)
    __swig_setmethods__["tempMap1"] = _micropolisengine.Micropolis_tempMap1_set
    __swig_getmethods__["tempMap1"] = _micropolisengine.Micropolis_tempMap1_get
    if _newclass:tempMap1 = _swig_property(_micropolisengine.Micropolis_tempMap1_get, _micropolisengine.Micropolis_tempMap1_set)
    __swig_setmethods__["tempMap2"] = _micropolisengine.Micropolis_tempMap2_set
    __swig_getmethods__["tempMap2"] = _micropolisengine.Micropolis_tempMap2_get
    if _newclass:tempMap2 = _swig_property(_micropolisengine.Micropolis_tempMap2_get, _micropolisengine.Micropolis_tempMap2_set)
    __swig_setmethods__["tempMap3"] = _micropolisengine.Micropolis_tempMap3_set
    __swig_getmethods__["tempMap3"] = _micropolisengine.Micropolis_tempMap3_get
    if _newclass:tempMap3 = _swig_property(_micropolisengine.Micropolis_tempMap3_get, _micropolisengine.Micropolis_tempMap3_set)
    __swig_setmethods__["powerGridMap"] = _micropolisengine.Micropolis_powerGridMap_set
    __swig_getmethods__["powerGridMap"] = _micropolisengine.Micropolis_powerGridMap_get
    if _newclass:powerGridMap = _swig_property(_micropolisengine.Micropolis_powerGridMap_get, _micropolisengine.Micropolis_powerGridMap_set)
    __swig_setmethods__["rateOfGrowthMap"] = _micropolisengine.Micropolis_rateOfGrowthMap_set
    __swig_getmethods__["rateOfGrowthMap"] = _micropolisengine.Micropolis_rateOfGrowthMap_get
    if _newclass:rateOfGrowthMap = _swig_property(_micropolisengine.Micropolis_rateOfGrowthMap_get, _micropolisengine.Micropolis_rateOfGrowthMap_set)
    __swig_setmethods__["fireStationMap"] = _micropolisengine.Micropolis_fireStationMap_set
    __swig_getmethods__["fireStationMap"] = _micropolisengine.Micropolis_fireStationMap_get
    if _newclass:fireStationMap = _swig_property(_micropolisengine.Micropolis_fireStationMap_get, _micropolisengine.Micropolis_fireStationMap_set)
    __swig_setmethods__["fireStationEffectMap"] = _micropolisengine.Micropolis_fireStationEffectMap_set
    __swig_getmethods__["fireStationEffectMap"] = _micropolisengine.Micropolis_fireStationEffectMap_get
    if _newclass:fireStationEffectMap = _swig_property(_micropolisengine.Micropolis_fireStationEffectMap_get, _micropolisengine.Micropolis_fireStationEffectMap_set)
    __swig_setmethods__["policeStationMap"] = _micropolisengine.Micropolis_policeStationMap_set
    __swig_getmethods__["policeStationMap"] = _micropolisengine.Micropolis_policeStationMap_get
    if _newclass:policeStationMap = _swig_property(_micropolisengine.Micropolis_policeStationMap_get, _micropolisengine.Micropolis_policeStationMap_set)
    __swig_setmethods__["policeStationEffectMap"] = _micropolisengine.Micropolis_policeStationEffectMap_set
    __swig_getmethods__["policeStationEffectMap"] = _micropolisengine.Micropolis_policeStationEffectMap_get
    if _newclass:policeStationEffectMap = _swig_property(_micropolisengine.Micropolis_policeStationEffectMap_get, _micropolisengine.Micropolis_policeStationEffectMap_set)
    __swig_setmethods__["comRateMap"] = _micropolisengine.Micropolis_comRateMap_set
    __swig_getmethods__["comRateMap"] = _micropolisengine.Micropolis_comRateMap_get
    if _newclass:comRateMap = _swig_property(_micropolisengine.Micropolis_comRateMap_get, _micropolisengine.Micropolis_comRateMap_set)
    __swig_setmethods__["resHist"] = _micropolisengine.Micropolis_resHist_set
    __swig_getmethods__["resHist"] = _micropolisengine.Micropolis_resHist_get
    if _newclass:resHist = _swig_property(_micropolisengine.Micropolis_resHist_get, _micropolisengine.Micropolis_resHist_set)
    __swig_setmethods__["comHist"] = _micropolisengine.Micropolis_comHist_set
    __swig_getmethods__["comHist"] = _micropolisengine.Micropolis_comHist_get
    if _newclass:comHist = _swig_property(_micropolisengine.Micropolis_comHist_get, _micropolisengine.Micropolis_comHist_set)
    __swig_setmethods__["indHist"] = _micropolisengine.Micropolis_indHist_set
    __swig_getmethods__["indHist"] = _micropolisengine.Micropolis_indHist_get
    if _newclass:indHist = _swig_property(_micropolisengine.Micropolis_indHist_get, _micropolisengine.Micropolis_indHist_set)
    __swig_setmethods__["moneyHist"] = _micropolisengine.Micropolis_moneyHist_set
    __swig_getmethods__["moneyHist"] = _micropolisengine.Micropolis_moneyHist_get
    if _newclass:moneyHist = _swig_property(_micropolisengine.Micropolis_moneyHist_get, _micropolisengine.Micropolis_moneyHist_set)
    __swig_setmethods__["pollutionHist"] = _micropolisengine.Micropolis_pollutionHist_set
    __swig_getmethods__["pollutionHist"] = _micropolisengine.Micropolis_pollutionHist_get
    if _newclass:pollutionHist = _swig_property(_micropolisengine.Micropolis_pollutionHist_get, _micropolisengine.Micropolis_pollutionHist_set)
    __swig_setmethods__["crimeHist"] = _micropolisengine.Micropolis_crimeHist_set
    __swig_getmethods__["crimeHist"] = _micropolisengine.Micropolis_crimeHist_get
    if _newclass:crimeHist = _swig_property(_micropolisengine.Micropolis_crimeHist_get, _micropolisengine.Micropolis_crimeHist_set)
    __swig_setmethods__["miscHist"] = _micropolisengine.Micropolis_miscHist_set
    __swig_getmethods__["miscHist"] = _micropolisengine.Micropolis_miscHist_get
    if _newclass:miscHist = _swig_property(_micropolisengine.Micropolis_miscHist_get, _micropolisengine.Micropolis_miscHist_set)
    def animateTiles(self): return _micropolisengine.Micropolis_animateTiles(self)
    __swig_getmethods__["getNextAnimatedTile"] = lambda x: _micropolisengine.Micropolis_getNextAnimatedTile
    if _newclass:getNextAnimatedTile = staticmethod(_micropolisengine.Micropolis_getNextAnimatedTile)
    __swig_setmethods__["roadPercent"] = _micropolisengine.Micropolis_roadPercent_set
    __swig_getmethods__["roadPercent"] = _micropolisengine.Micropolis_roadPercent_get
    if _newclass:roadPercent = _swig_property(_micropolisengine.Micropolis_roadPercent_get, _micropolisengine.Micropolis_roadPercent_set)
    __swig_setmethods__["policePercent"] = _micropolisengine.Micropolis_policePercent_set
    __swig_getmethods__["policePercent"] = _micropolisengine.Micropolis_policePercent_get
    if _newclass:policePercent = _swig_property(_micropolisengine.Micropolis_policePercent_get, _micropolisengine.Micropolis_policePercent_set)
    __swig_setmethods__["firePercent"] = _micropolisengine.Micropolis_firePercent_set
    __swig_getmethods__["firePercent"] = _micropolisengine.Micropolis_firePercent_get
    if _newclass:firePercent = _swig_property(_micropolisengine.Micropolis_firePercent_get, _micropolisengine.Micropolis_firePercent_set)
    __swig_setmethods__["roadValue"] = _micropolisengine.Micropolis_roadValue_set
    __swig_getmethods__["roadValue"] = _micropolisengine.Micropolis_roadValue_get
    if _newclass:roadValue = _swig_property(_micropolisengine.Micropolis_roadValue_get, _micropolisengine.Micropolis_roadValue_set)
    __swig_setmethods__["policeValue"] = _micropolisengine.Micropolis_policeValue_set
    __swig_getmethods__["policeValue"] = _micropolisengine.Micropolis_policeValue_get
    if _newclass:policeValue = _swig_property(_micropolisengine.Micropolis_policeValue_get, _micropolisengine.Micropolis_policeValue_set)
    __swig_setmethods__["fireValue"] = _micropolisengine.Micropolis_fireValue_set
    __swig_getmethods__["fireValue"] = _micropolisengine.Micropolis_fireValue_get
    if _newclass:fireValue = _swig_property(_micropolisengine.Micropolis_fireValue_get, _micropolisengine.Micropolis_fireValue_set)
    __swig_setmethods__["mustDrawBudget"] = _micropolisengine.Micropolis_mustDrawBudget_set
    __swig_getmethods__["mustDrawBudget"] = _micropolisengine.Micropolis_mustDrawBudget_get
    if _newclass:mustDrawBudget = _swig_property(_micropolisengine.Micropolis_mustDrawBudget_get, _micropolisengine.Micropolis_mustDrawBudget_set)
    def initFundingLevel(self): return _micropolisengine.Micropolis_initFundingLevel(self)
    def doBudget(self): return _micropolisengine.Micropolis_doBudget(self)
    def doBudgetFromMenu(self): return _micropolisengine.Micropolis_doBudgetFromMenu(self)
    def doBudgetNow(self, *args): return _micropolisengine.Micropolis_doBudgetNow(self, *args)
    def updateBudget(self): return _micropolisengine.Micropolis_updateBudget(self)
    def showBudgetWindowAndStartWaiting(self): return _micropolisengine.Micropolis_showBudgetWindowAndStartWaiting(self)
    def setCityTax(self, *args): return _micropolisengine.Micropolis_setCityTax(self, *args)
    __swig_setmethods__["floodCount"] = _micropolisengine.Micropolis_floodCount_set
    __swig_getmethods__["floodCount"] = _micropolisengine.Micropolis_floodCount_get
    if _newclass:floodCount = _swig_property(_micropolisengine.Micropolis_floodCount_get, _micropolisengine.Micropolis_floodCount_set)
    def makeMeltdown(self): return _micropolisengine.Micropolis_makeMeltdown(self)
    def makeFireBombs(self): return _micropolisengine.Micropolis_makeFireBombs(self)
    def makeEarthquake(self): return _micropolisengine.Micropolis_makeEarthquake(self)
    def makeFire(self): return _micropolisengine.Micropolis_makeFire(self)
    def makeFlood(self): return _micropolisengine.Micropolis_makeFlood(self)
    def setFire(self): return _micropolisengine.Micropolis_setFire(self)
    def fireBomb(self): return _micropolisengine.Micropolis_fireBomb(self)
    __swig_setmethods__["cityYes"] = _micropolisengine.Micropolis_cityYes_set
    __swig_getmethods__["cityYes"] = _micropolisengine.Micropolis_cityYes_get
    if _newclass:cityYes = _swig_property(_micropolisengine.Micropolis_cityYes_get, _micropolisengine.Micropolis_cityYes_set)
    __swig_setmethods__["problemVotes"] = _micropolisengine.Micropolis_problemVotes_set
    __swig_getmethods__["problemVotes"] = _micropolisengine.Micropolis_problemVotes_get
    if _newclass:problemVotes = _swig_property(_micropolisengine.Micropolis_problemVotes_get, _micropolisengine.Micropolis_problemVotes_set)
    __swig_setmethods__["problemOrder"] = _micropolisengine.Micropolis_problemOrder_set
    __swig_getmethods__["problemOrder"] = _micropolisengine.Micropolis_problemOrder_get
    if _newclass:problemOrder = _swig_property(_micropolisengine.Micropolis_problemOrder_get, _micropolisengine.Micropolis_problemOrder_set)
    __swig_setmethods__["cityPop"] = _micropolisengine.Micropolis_cityPop_set
    __swig_getmethods__["cityPop"] = _micropolisengine.Micropolis_cityPop_get
    if _newclass:cityPop = _swig_property(_micropolisengine.Micropolis_cityPop_get, _micropolisengine.Micropolis_cityPop_set)
    __swig_setmethods__["cityPopDelta"] = _micropolisengine.Micropolis_cityPopDelta_set
    __swig_getmethods__["cityPopDelta"] = _micropolisengine.Micropolis_cityPopDelta_get
    if _newclass:cityPopDelta = _swig_property(_micropolisengine.Micropolis_cityPopDelta_get, _micropolisengine.Micropolis_cityPopDelta_set)
    __swig_setmethods__["cityAssessedValue"] = _micropolisengine.Micropolis_cityAssessedValue_set
    __swig_getmethods__["cityAssessedValue"] = _micropolisengine.Micropolis_cityAssessedValue_get
    if _newclass:cityAssessedValue = _swig_property(_micropolisengine.Micropolis_cityAssessedValue_get, _micropolisengine.Micropolis_cityAssessedValue_set)
    __swig_setmethods__["cityClass"] = _micropolisengine.Micropolis_cityClass_set
    __swig_getmethods__["cityClass"] = _micropolisengine.Micropolis_cityClass_get
    if _newclass:cityClass = _swig_property(_micropolisengine.Micropolis_cityClass_get, _micropolisengine.Micropolis_cityClass_set)
    __swig_setmethods__["cityScore"] = _micropolisengine.Micropolis_cityScore_set
    __swig_getmethods__["cityScore"] = _micropolisengine.Micropolis_cityScore_get
    if _newclass:cityScore = _swig_property(_micropolisengine.Micropolis_cityScore_get, _micropolisengine.Micropolis_cityScore_set)
    __swig_setmethods__["cityScoreDelta"] = _micropolisengine.Micropolis_cityScoreDelta_set
    __swig_getmethods__["cityScoreDelta"] = _micropolisengine.Micropolis_cityScoreDelta_get
    if _newclass:cityScoreDelta = _swig_property(_micropolisengine.Micropolis_cityScoreDelta_get, _micropolisengine.Micropolis_cityScoreDelta_set)
    __swig_setmethods__["trafficAverage"] = _micropolisengine.Micropolis_trafficAverage_set
    __swig_getmethods__["trafficAverage"] = _micropolisengine.Micropolis_trafficAverage_get
    if _newclass:trafficAverage = _swig_property(_micropolisengine.Micropolis_trafficAverage_get, _micropolisengine.Micropolis_trafficAverage_set)
    def cityEvaluation(self): return _micropolisengine.Micropolis_cityEvaluation(self)
    def evalInit(self): return _micropolisengine.Micropolis_evalInit(self)
    def doScoreCard(self): return _micropolisengine.Micropolis_doScoreCard(self)
    def changeEval(self): return _micropolisengine.Micropolis_changeEval(self)
    def scoreDoer(self): return _micropolisengine.Micropolis_scoreDoer(self)
    def countProblems(self): return _micropolisengine.Micropolis_countProblems(self)
    def getProblemNumber(self, *args): return _micropolisengine.Micropolis_getProblemNumber(self, *args)
    def getProblemVotes(self, *args): return _micropolisengine.Micropolis_getProblemVotes(self, *args)
    def loadFileDir(self, *args): return _micropolisengine.Micropolis_loadFileDir(self, *args)
    def loadFile(self, *args): return _micropolisengine.Micropolis_loadFile(self, *args)
    def saveFile(self, *args): return _micropolisengine.Micropolis_saveFile(self, *args)
    def loadScenario(self, *args): return _micropolisengine.Micropolis_loadScenario(self, *args)
    def didLoadScenario(self): return _micropolisengine.Micropolis_didLoadScenario(self)
    def loadCity(self, *args): return _micropolisengine.Micropolis_loadCity(self, *args)
    def didLoadCity(self): return _micropolisengine.Micropolis_didLoadCity(self)
    def didntLoadCity(self, *args): return _micropolisengine.Micropolis_didntLoadCity(self, *args)
    def saveCity(self): return _micropolisengine.Micropolis_saveCity(self)
    def doSaveCityAs(self): return _micropolisengine.Micropolis_doSaveCityAs(self)
    def didSaveCity(self): return _micropolisengine.Micropolis_didSaveCity(self)
    def didntSaveCity(self, *args): return _micropolisengine.Micropolis_didntSaveCity(self, *args)
    def saveCityAs(self, *args): return _micropolisengine.Micropolis_saveCityAs(self, *args)
    __swig_setmethods__["terrainTreeLevel"] = _micropolisengine.Micropolis_terrainTreeLevel_set
    __swig_getmethods__["terrainTreeLevel"] = _micropolisengine.Micropolis_terrainTreeLevel_get
    if _newclass:terrainTreeLevel = _swig_property(_micropolisengine.Micropolis_terrainTreeLevel_get, _micropolisengine.Micropolis_terrainTreeLevel_set)
    __swig_setmethods__["terrainLakeLevel"] = _micropolisengine.Micropolis_terrainLakeLevel_set
    __swig_getmethods__["terrainLakeLevel"] = _micropolisengine.Micropolis_terrainLakeLevel_get
    if _newclass:terrainLakeLevel = _swig_property(_micropolisengine.Micropolis_terrainLakeLevel_get, _micropolisengine.Micropolis_terrainLakeLevel_set)
    __swig_setmethods__["terrainCurveLevel"] = _micropolisengine.Micropolis_terrainCurveLevel_set
    __swig_getmethods__["terrainCurveLevel"] = _micropolisengine.Micropolis_terrainCurveLevel_get
    if _newclass:terrainCurveLevel = _swig_property(_micropolisengine.Micropolis_terrainCurveLevel_get, _micropolisengine.Micropolis_terrainCurveLevel_set)
    __swig_setmethods__["terrainCreateIsland"] = _micropolisengine.Micropolis_terrainCreateIsland_set
    __swig_getmethods__["terrainCreateIsland"] = _micropolisengine.Micropolis_terrainCreateIsland_get
    if _newclass:terrainCreateIsland = _swig_property(_micropolisengine.Micropolis_terrainCreateIsland_get, _micropolisengine.Micropolis_terrainCreateIsland_set)
    def generateMap(self): return _micropolisengine.Micropolis_generateMap(self)
    def clearMap(self): return _micropolisengine.Micropolis_clearMap(self)
    def clearUnnatural(self): return _micropolisengine.Micropolis_clearUnnatural(self)
    def makeIsland(self): return _micropolisengine.Micropolis_makeIsland(self)
    def treeSplash(self, *args): return _micropolisengine.Micropolis_treeSplash(self, *args)
    def makeSingleLake(self, *args): return _micropolisengine.Micropolis_makeSingleLake(self, *args)
    def plopBRiver(self, *args): return _micropolisengine.Micropolis_plopBRiver(self, *args)
    def plopSRiver(self, *args): return _micropolisengine.Micropolis_plopSRiver(self, *args)
    def generateSomeCity(self, *args): return _micropolisengine.Micropolis_generateSomeCity(self, *args)
    __swig_setmethods__["historyInitialized"] = _micropolisengine.Micropolis_historyInitialized_set
    __swig_getmethods__["historyInitialized"] = _micropolisengine.Micropolis_historyInitialized_get
    if _newclass:historyInitialized = _swig_property(_micropolisengine.Micropolis_historyInitialized_get, _micropolisengine.Micropolis_historyInitialized_set)
    __swig_setmethods__["graph10Max"] = _micropolisengine.Micropolis_graph10Max_set
    __swig_getmethods__["graph10Max"] = _micropolisengine.Micropolis_graph10Max_get
    if _newclass:graph10Max = _swig_property(_micropolisengine.Micropolis_graph10Max_get, _micropolisengine.Micropolis_graph10Max_set)
    __swig_setmethods__["graph120Max"] = _micropolisengine.Micropolis_graph120Max_set
    __swig_getmethods__["graph120Max"] = _micropolisengine.Micropolis_graph120Max_get
    if _newclass:graph120Max = _swig_property(_micropolisengine.Micropolis_graph120Max_get, _micropolisengine.Micropolis_graph120Max_set)
    def drawMonth(self, *args): return _micropolisengine.Micropolis_drawMonth(self, *args)
    def changeCensus(self): return _micropolisengine.Micropolis_changeCensus(self)
    def graphDoer(self): return _micropolisengine.Micropolis_graphDoer(self)
    def initGraphs(self): return _micropolisengine.Micropolis_initGraphs(self)
    def initGraphMax(self): return _micropolisengine.Micropolis_initGraphMax(self)
    def getHistoryRange(self, *args): return _micropolisengine.Micropolis_getHistoryRange(self, *args)
    def getHistory(self, *args): return _micropolisengine.Micropolis_getHistory(self, *args)
    def setHistory(self, *args): return _micropolisengine.Micropolis_setHistory(self, *args)
    __swig_setmethods__["simLoops"] = _micropolisengine.Micropolis_simLoops_set
    __swig_getmethods__["simLoops"] = _micropolisengine.Micropolis_simLoops_get
    if _newclass:simLoops = _swig_property(_micropolisengine.Micropolis_simLoops_get, _micropolisengine.Micropolis_simLoops_set)
    __swig_setmethods__["simPasses"] = _micropolisengine.Micropolis_simPasses_set
    __swig_getmethods__["simPasses"] = _micropolisengine.Micropolis_simPasses_get
    if _newclass:simPasses = _swig_property(_micropolisengine.Micropolis_simPasses_get, _micropolisengine.Micropolis_simPasses_set)
    __swig_setmethods__["simPass"] = _micropolisengine.Micropolis_simPass_set
    __swig_getmethods__["simPass"] = _micropolisengine.Micropolis_simPass_get
    if _newclass:simPass = _swig_property(_micropolisengine.Micropolis_simPass_get, _micropolisengine.Micropolis_simPass_set)
    __swig_setmethods__["simPaused"] = _micropolisengine.Micropolis_simPaused_set
    __swig_getmethods__["simPaused"] = _micropolisengine.Micropolis_simPaused_get
    if _newclass:simPaused = _swig_property(_micropolisengine.Micropolis_simPaused_get, _micropolisengine.Micropolis_simPaused_set)
    __swig_setmethods__["simPausedSpeed"] = _micropolisengine.Micropolis_simPausedSpeed_set
    __swig_getmethods__["simPausedSpeed"] = _micropolisengine.Micropolis_simPausedSpeed_get
    if _newclass:simPausedSpeed = _swig_property(_micropolisengine.Micropolis_simPausedSpeed_get, _micropolisengine.Micropolis_simPausedSpeed_set)
    __swig_setmethods__["tilesAnimated"] = _micropolisengine.Micropolis_tilesAnimated_set
    __swig_getmethods__["tilesAnimated"] = _micropolisengine.Micropolis_tilesAnimated_get
    if _newclass:tilesAnimated = _swig_property(_micropolisengine.Micropolis_tilesAnimated_get, _micropolisengine.Micropolis_tilesAnimated_set)
    __swig_setmethods__["doAnimation"] = _micropolisengine.Micropolis_doAnimation_set
    __swig_getmethods__["doAnimation"] = _micropolisengine.Micropolis_doAnimation_get
    if _newclass:doAnimation = _swig_property(_micropolisengine.Micropolis_doAnimation_get, _micropolisengine.Micropolis_doAnimation_set)
    __swig_setmethods__["doMessages"] = _micropolisengine.Micropolis_doMessages_set
    __swig_getmethods__["doMessages"] = _micropolisengine.Micropolis_doMessages_get
    if _newclass:doMessages = _swig_property(_micropolisengine.Micropolis_doMessages_get, _micropolisengine.Micropolis_doMessages_set)
    __swig_setmethods__["doNotices"] = _micropolisengine.Micropolis_doNotices_set
    __swig_getmethods__["doNotices"] = _micropolisengine.Micropolis_doNotices_get
    if _newclass:doNotices = _swig_property(_micropolisengine.Micropolis_doNotices_get, _micropolisengine.Micropolis_doNotices_set)
    def getMicropolisVersion(self): return _micropolisengine.Micropolis_getMicropolisVersion(self)
    def simUpdate(self): return _micropolisengine.Micropolis_simUpdate(self)
    def simTick(self): return _micropolisengine.Micropolis_simTick(self)
    def simRobots(self): return _micropolisengine.Micropolis_simRobots(self)
    __swig_setmethods__["cityFileName"] = _micropolisengine.Micropolis_cityFileName_set
    __swig_getmethods__["cityFileName"] = _micropolisengine.Micropolis_cityFileName_get
    if _newclass:cityFileName = _swig_property(_micropolisengine.Micropolis_cityFileName_get, _micropolisengine.Micropolis_cityFileName_set)
    __swig_setmethods__["cityName"] = _micropolisengine.Micropolis_cityName_set
    __swig_getmethods__["cityName"] = _micropolisengine.Micropolis_cityName_get
    if _newclass:cityName = _swig_property(_micropolisengine.Micropolis_cityName_get, _micropolisengine.Micropolis_cityName_set)
    __swig_setmethods__["cityPopLast"] = _micropolisengine.Micropolis_cityPopLast_set
    __swig_getmethods__["cityPopLast"] = _micropolisengine.Micropolis_cityPopLast_get
    if _newclass:cityPopLast = _swig_property(_micropolisengine.Micropolis_cityPopLast_get, _micropolisengine.Micropolis_cityPopLast_set)
    __swig_setmethods__["categoryLast"] = _micropolisengine.Micropolis_categoryLast_set
    __swig_getmethods__["categoryLast"] = _micropolisengine.Micropolis_categoryLast_get
    if _newclass:categoryLast = _swig_property(_micropolisengine.Micropolis_categoryLast_get, _micropolisengine.Micropolis_categoryLast_set)
    __swig_setmethods__["autoGoto"] = _micropolisengine.Micropolis_autoGoto_set
    __swig_getmethods__["autoGoto"] = _micropolisengine.Micropolis_autoGoto_get
    if _newclass:autoGoto = _swig_property(_micropolisengine.Micropolis_autoGoto_get, _micropolisengine.Micropolis_autoGoto_set)
    def sendMessages(self): return _micropolisengine.Micropolis_sendMessages(self)
    def checkGrowth(self): return _micropolisengine.Micropolis_checkGrowth(self)
    def doScenarioScore(self, *args): return _micropolisengine.Micropolis_doScenarioScore(self, *args)
    def sendMessage(self, *args): return _micropolisengine.Micropolis_sendMessage(self, *args)
    def doMakeSound(self, *args): return _micropolisengine.Micropolis_doMakeSound(self, *args)
    def doAutoGoto(self, *args): return _micropolisengine.Micropolis_doAutoGoto(self, *args)
    def doLoseGame(self): return _micropolisengine.Micropolis_doLoseGame(self)
    def doWinGame(self): return _micropolisengine.Micropolis_doWinGame(self)
    __swig_setmethods__["homeDir"] = _micropolisengine.Micropolis_homeDir_set
    __swig_getmethods__["homeDir"] = _micropolisengine.Micropolis_homeDir_get
    if _newclass:homeDir = _swig_property(_micropolisengine.Micropolis_homeDir_get, _micropolisengine.Micropolis_homeDir_set)
    __swig_setmethods__["resourceDir"] = _micropolisengine.Micropolis_resourceDir_set
    __swig_getmethods__["resourceDir"] = _micropolisengine.Micropolis_resourceDir_get
    if _newclass:resourceDir = _swig_property(_micropolisengine.Micropolis_resourceDir_get, _micropolisengine.Micropolis_resourceDir_set)
    __swig_setmethods__["resources"] = _micropolisengine.Micropolis_resources_set
    __swig_getmethods__["resources"] = _micropolisengine.Micropolis_resources_get
    if _newclass:resources = _swig_property(_micropolisengine.Micropolis_resources_get, _micropolisengine.Micropolis_resources_set)
    __swig_setmethods__["stringTables"] = _micropolisengine.Micropolis_stringTables_set
    __swig_getmethods__["stringTables"] = _micropolisengine.Micropolis_stringTables_get
    if _newclass:stringTables = _swig_property(_micropolisengine.Micropolis_stringTables_get, _micropolisengine.Micropolis_stringTables_set)
    def getResource(self, *args): return _micropolisengine.Micropolis_getResource(self, *args)
    def getIndString(self, *args): return _micropolisengine.Micropolis_getIndString(self, *args)
    __swig_setmethods__["valveFlag"] = _micropolisengine.Micropolis_valveFlag_set
    __swig_getmethods__["valveFlag"] = _micropolisengine.Micropolis_valveFlag_get
    if _newclass:valveFlag = _swig_property(_micropolisengine.Micropolis_valveFlag_get, _micropolisengine.Micropolis_valveFlag_set)
    __swig_setmethods__["crimeRamp"] = _micropolisengine.Micropolis_crimeRamp_set
    __swig_getmethods__["crimeRamp"] = _micropolisengine.Micropolis_crimeRamp_get
    if _newclass:crimeRamp = _swig_property(_micropolisengine.Micropolis_crimeRamp_get, _micropolisengine.Micropolis_crimeRamp_set)
    __swig_setmethods__["pollutionRamp"] = _micropolisengine.Micropolis_pollutionRamp_set
    __swig_getmethods__["pollutionRamp"] = _micropolisengine.Micropolis_pollutionRamp_get
    if _newclass:pollutionRamp = _swig_property(_micropolisengine.Micropolis_pollutionRamp_get, _micropolisengine.Micropolis_pollutionRamp_set)
    __swig_setmethods__["resCap"] = _micropolisengine.Micropolis_resCap_set
    __swig_getmethods__["resCap"] = _micropolisengine.Micropolis_resCap_get
    if _newclass:resCap = _swig_property(_micropolisengine.Micropolis_resCap_get, _micropolisengine.Micropolis_resCap_set)
    __swig_setmethods__["comCap"] = _micropolisengine.Micropolis_comCap_set
    __swig_getmethods__["comCap"] = _micropolisengine.Micropolis_comCap_get
    if _newclass:comCap = _swig_property(_micropolisengine.Micropolis_comCap_get, _micropolisengine.Micropolis_comCap_set)
    __swig_setmethods__["indCap"] = _micropolisengine.Micropolis_indCap_set
    __swig_getmethods__["indCap"] = _micropolisengine.Micropolis_indCap_get
    if _newclass:indCap = _swig_property(_micropolisengine.Micropolis_indCap_get, _micropolisengine.Micropolis_indCap_set)
    __swig_setmethods__["cashFlow"] = _micropolisengine.Micropolis_cashFlow_set
    __swig_getmethods__["cashFlow"] = _micropolisengine.Micropolis_cashFlow_get
    if _newclass:cashFlow = _swig_property(_micropolisengine.Micropolis_cashFlow_get, _micropolisengine.Micropolis_cashFlow_set)
    __swig_setmethods__["externalMarket"] = _micropolisengine.Micropolis_externalMarket_set
    __swig_getmethods__["externalMarket"] = _micropolisengine.Micropolis_externalMarket_get
    if _newclass:externalMarket = _swig_property(_micropolisengine.Micropolis_externalMarket_get, _micropolisengine.Micropolis_externalMarket_set)
    __swig_setmethods__["disasterEvent"] = _micropolisengine.Micropolis_disasterEvent_set
    __swig_getmethods__["disasterEvent"] = _micropolisengine.Micropolis_disasterEvent_get
    if _newclass:disasterEvent = _swig_property(_micropolisengine.Micropolis_disasterEvent_get, _micropolisengine.Micropolis_disasterEvent_set)
    __swig_setmethods__["disasterWait"] = _micropolisengine.Micropolis_disasterWait_set
    __swig_getmethods__["disasterWait"] = _micropolisengine.Micropolis_disasterWait_get
    if _newclass:disasterWait = _swig_property(_micropolisengine.Micropolis_disasterWait_get, _micropolisengine.Micropolis_disasterWait_set)
    __swig_setmethods__["scoreType"] = _micropolisengine.Micropolis_scoreType_set
    __swig_getmethods__["scoreType"] = _micropolisengine.Micropolis_scoreType_get
    if _newclass:scoreType = _swig_property(_micropolisengine.Micropolis_scoreType_get, _micropolisengine.Micropolis_scoreType_set)
    __swig_setmethods__["scoreWait"] = _micropolisengine.Micropolis_scoreWait_set
    __swig_getmethods__["scoreWait"] = _micropolisengine.Micropolis_scoreWait_get
    if _newclass:scoreWait = _swig_property(_micropolisengine.Micropolis_scoreWait_get, _micropolisengine.Micropolis_scoreWait_set)
    __swig_setmethods__["poweredZoneCount"] = _micropolisengine.Micropolis_poweredZoneCount_set
    __swig_getmethods__["poweredZoneCount"] = _micropolisengine.Micropolis_poweredZoneCount_get
    if _newclass:poweredZoneCount = _swig_property(_micropolisengine.Micropolis_poweredZoneCount_get, _micropolisengine.Micropolis_poweredZoneCount_set)
    __swig_setmethods__["unpoweredZoneCount"] = _micropolisengine.Micropolis_unpoweredZoneCount_set
    __swig_getmethods__["unpoweredZoneCount"] = _micropolisengine.Micropolis_unpoweredZoneCount_get
    if _newclass:unpoweredZoneCount = _swig_property(_micropolisengine.Micropolis_unpoweredZoneCount_get, _micropolisengine.Micropolis_unpoweredZoneCount_set)
    __swig_setmethods__["newPower"] = _micropolisengine.Micropolis_newPower_set
    __swig_getmethods__["newPower"] = _micropolisengine.Micropolis_newPower_get
    if _newclass:newPower = _swig_property(_micropolisengine.Micropolis_newPower_get, _micropolisengine.Micropolis_newPower_set)
    __swig_setmethods__["cityTaxAverage"] = _micropolisengine.Micropolis_cityTaxAverage_set
    __swig_getmethods__["cityTaxAverage"] = _micropolisengine.Micropolis_cityTaxAverage_get
    if _newclass:cityTaxAverage = _swig_property(_micropolisengine.Micropolis_cityTaxAverage_get, _micropolisengine.Micropolis_cityTaxAverage_set)
    __swig_setmethods__["simCycle"] = _micropolisengine.Micropolis_simCycle_set
    __swig_getmethods__["simCycle"] = _micropolisengine.Micropolis_simCycle_get
    if _newclass:simCycle = _swig_property(_micropolisengine.Micropolis_simCycle_get, _micropolisengine.Micropolis_simCycle_set)
    __swig_setmethods__["phaseCycle"] = _micropolisengine.Micropolis_phaseCycle_set
    __swig_getmethods__["phaseCycle"] = _micropolisengine.Micropolis_phaseCycle_get
    if _newclass:phaseCycle = _swig_property(_micropolisengine.Micropolis_phaseCycle_get, _micropolisengine.Micropolis_phaseCycle_set)
    __swig_setmethods__["speedCycle"] = _micropolisengine.Micropolis_speedCycle_set
    __swig_getmethods__["speedCycle"] = _micropolisengine.Micropolis_speedCycle_get
    if _newclass:speedCycle = _swig_property(_micropolisengine.Micropolis_speedCycle_get, _micropolisengine.Micropolis_speedCycle_set)
    __swig_setmethods__["doInitialEval"] = _micropolisengine.Micropolis_doInitialEval_set
    __swig_getmethods__["doInitialEval"] = _micropolisengine.Micropolis_doInitialEval_get
    if _newclass:doInitialEval = _swig_property(_micropolisengine.Micropolis_doInitialEval_get, _micropolisengine.Micropolis_doInitialEval_set)
    __swig_setmethods__["mapSerial"] = _micropolisengine.Micropolis_mapSerial_set
    __swig_getmethods__["mapSerial"] = _micropolisengine.Micropolis_mapSerial_get
    if _newclass:mapSerial = _swig_property(_micropolisengine.Micropolis_mapSerial_get, _micropolisengine.Micropolis_mapSerial_set)
    def updateFundEffects(self): return _micropolisengine.Micropolis_updateFundEffects(self)
    __swig_setmethods__["spriteList"] = _micropolisengine.Micropolis_spriteList_set
    __swig_getmethods__["spriteList"] = _micropolisengine.Micropolis_spriteList_get
    if _newclass:spriteList = _swig_property(_micropolisengine.Micropolis_spriteList_get, _micropolisengine.Micropolis_spriteList_set)
    def newSprite(self, *args): return _micropolisengine.Micropolis_newSprite(self, *args)
    def initSprite(self, *args): return _micropolisengine.Micropolis_initSprite(self, *args)
    def destroyAllSprites(self): return _micropolisengine.Micropolis_destroyAllSprites(self)
    def destroySprite(self, *args): return _micropolisengine.Micropolis_destroySprite(self, *args)
    def getSprite(self, *args): return _micropolisengine.Micropolis_getSprite(self, *args)
    def makeSprite(self, *args): return _micropolisengine.Micropolis_makeSprite(self, *args)
    def getChar(self, *args): return _micropolisengine.Micropolis_getChar(self, *args)
    def turnTo(self, *args): return _micropolisengine.Micropolis_turnTo(self, *args)
    def tryOther(self, *args): return _micropolisengine.Micropolis_tryOther(self, *args)
    def spriteNotInBounds(self, *args): return _micropolisengine.Micropolis_spriteNotInBounds(self, *args)
    def getDir(self, *args): return _micropolisengine.Micropolis_getDir(self, *args)
    def getDistance(self, *args): return _micropolisengine.Micropolis_getDistance(self, *args)
    def checkSpriteCollision(self, *args): return _micropolisengine.Micropolis_checkSpriteCollision(self, *args)
    def moveObjects(self): return _micropolisengine.Micropolis_moveObjects(self)
    def doTrainSprite(self, *args): return _micropolisengine.Micropolis_doTrainSprite(self, *args)
    def doCopterSprite(self, *args): return _micropolisengine.Micropolis_doCopterSprite(self, *args)
    def doAirplaneSprite(self, *args): return _micropolisengine.Micropolis_doAirplaneSprite(self, *args)
    def doShipSprite(self, *args): return _micropolisengine.Micropolis_doShipSprite(self, *args)
    def doMonsterSprite(self, *args): return _micropolisengine.Micropolis_doMonsterSprite(self, *args)
    def doTornadoSprite(self, *args): return _micropolisengine.Micropolis_doTornadoSprite(self, *args)
    def doExplosionSprite(self, *args): return _micropolisengine.Micropolis_doExplosionSprite(self, *args)
    def doBusSprite(self, *args): return _micropolisengine.Micropolis_doBusSprite(self, *args)
    def canDriveOn(self, *args): return _micropolisengine.Micropolis_canDriveOn(self, *args)
    def explodeSprite(self, *args): return _micropolisengine.Micropolis_explodeSprite(self, *args)
    def checkWet(self, *args): return _micropolisengine.Micropolis_checkWet(self, *args)
    def destroyMapTile(self, *args): return _micropolisengine.Micropolis_destroyMapTile(self, *args)
    def startFireInZone(self, *args): return _micropolisengine.Micropolis_startFireInZone(self, *args)
    def startFire(self, *args): return _micropolisengine.Micropolis_startFire(self, *args)
    def generateTrain(self, *args): return _micropolisengine.Micropolis_generateTrain(self, *args)
    def generateBus(self, *args): return _micropolisengine.Micropolis_generateBus(self, *args)
    def generateShip(self): return _micropolisengine.Micropolis_generateShip(self)
    def makeShipHere(self, *args): return _micropolisengine.Micropolis_makeShipHere(self, *args)
    def makeMonster(self): return _micropolisengine.Micropolis_makeMonster(self)
    def makeMonsterAt(self, *args): return _micropolisengine.Micropolis_makeMonsterAt(self, *args)
    def generateCopter(self, *args): return _micropolisengine.Micropolis_generateCopter(self, *args)
    def generatePlane(self, *args): return _micropolisengine.Micropolis_generatePlane(self, *args)
    def makeTornado(self): return _micropolisengine.Micropolis_makeTornado(self)
    def makeExplosion(self, *args): return _micropolisengine.Micropolis_makeExplosion(self, *args)
    def makeExplosionAt(self, *args): return _micropolisengine.Micropolis_makeExplosionAt(self, *args)
    __swig_setmethods__["totalFunds"] = _micropolisengine.Micropolis_totalFunds_set
    __swig_getmethods__["totalFunds"] = _micropolisengine.Micropolis_totalFunds_get
    if _newclass:totalFunds = _swig_property(_micropolisengine.Micropolis_totalFunds_get, _micropolisengine.Micropolis_totalFunds_set)
    __swig_setmethods__["autoBulldoze"] = _micropolisengine.Micropolis_autoBulldoze_set
    __swig_getmethods__["autoBulldoze"] = _micropolisengine.Micropolis_autoBulldoze_get
    if _newclass:autoBulldoze = _swig_property(_micropolisengine.Micropolis_autoBulldoze_get, _micropolisengine.Micropolis_autoBulldoze_set)
    __swig_setmethods__["autoBudget"] = _micropolisengine.Micropolis_autoBudget_set
    __swig_getmethods__["autoBudget"] = _micropolisengine.Micropolis_autoBudget_get
    if _newclass:autoBudget = _swig_property(_micropolisengine.Micropolis_autoBudget_get, _micropolisengine.Micropolis_autoBudget_set)
    __swig_setmethods__["messageTimeLast"] = _micropolisengine.Micropolis_messageTimeLast_set
    __swig_getmethods__["messageTimeLast"] = _micropolisengine.Micropolis_messageTimeLast_get
    if _newclass:messageTimeLast = _swig_property(_micropolisengine.Micropolis_messageTimeLast_get, _micropolisengine.Micropolis_messageTimeLast_set)
    __swig_setmethods__["gameLevel"] = _micropolisengine.Micropolis_gameLevel_set
    __swig_getmethods__["gameLevel"] = _micropolisengine.Micropolis_gameLevel_get
    if _newclass:gameLevel = _swig_property(_micropolisengine.Micropolis_gameLevel_get, _micropolisengine.Micropolis_gameLevel_set)
    __swig_setmethods__["initSimLoad"] = _micropolisengine.Micropolis_initSimLoad_set
    __swig_getmethods__["initSimLoad"] = _micropolisengine.Micropolis_initSimLoad_get
    if _newclass:initSimLoad = _swig_property(_micropolisengine.Micropolis_initSimLoad_get, _micropolisengine.Micropolis_initSimLoad_set)
    __swig_setmethods__["scenario"] = _micropolisengine.Micropolis_scenario_set
    __swig_getmethods__["scenario"] = _micropolisengine.Micropolis_scenario_get
    if _newclass:scenario = _swig_property(_micropolisengine.Micropolis_scenario_get, _micropolisengine.Micropolis_scenario_set)
    __swig_setmethods__["simSpeed"] = _micropolisengine.Micropolis_simSpeed_set
    __swig_getmethods__["simSpeed"] = _micropolisengine.Micropolis_simSpeed_get
    if _newclass:simSpeed = _swig_property(_micropolisengine.Micropolis_simSpeed_get, _micropolisengine.Micropolis_simSpeed_set)
    __swig_setmethods__["simSpeedMeta"] = _micropolisengine.Micropolis_simSpeedMeta_set
    __swig_getmethods__["simSpeedMeta"] = _micropolisengine.Micropolis_simSpeedMeta_get
    if _newclass:simSpeedMeta = _swig_property(_micropolisengine.Micropolis_simSpeedMeta_get, _micropolisengine.Micropolis_simSpeedMeta_set)
    __swig_setmethods__["enableSound"] = _micropolisengine.Micropolis_enableSound_set
    __swig_getmethods__["enableSound"] = _micropolisengine.Micropolis_enableSound_get
    if _newclass:enableSound = _swig_property(_micropolisengine.Micropolis_enableSound_get, _micropolisengine.Micropolis_enableSound_set)
    __swig_setmethods__["enableDisasters"] = _micropolisengine.Micropolis_enableDisasters_set
    __swig_getmethods__["enableDisasters"] = _micropolisengine.Micropolis_enableDisasters_get
    if _newclass:enableDisasters = _swig_property(_micropolisengine.Micropolis_enableDisasters_get, _micropolisengine.Micropolis_enableDisasters_set)
    __swig_setmethods__["messageNumber"] = _micropolisengine.Micropolis_messageNumber_set
    __swig_getmethods__["messageNumber"] = _micropolisengine.Micropolis_messageNumber_get
    if _newclass:messageNumber = _swig_property(_micropolisengine.Micropolis_messageNumber_get, _micropolisengine.Micropolis_messageNumber_set)
    __swig_setmethods__["evalChanged"] = _micropolisengine.Micropolis_evalChanged_set
    __swig_getmethods__["evalChanged"] = _micropolisengine.Micropolis_evalChanged_get
    if _newclass:evalChanged = _swig_property(_micropolisengine.Micropolis_evalChanged_get, _micropolisengine.Micropolis_evalChanged_set)
    __swig_setmethods__["blinkFlag"] = _micropolisengine.Micropolis_blinkFlag_set
    __swig_getmethods__["blinkFlag"] = _micropolisengine.Micropolis_blinkFlag_get
    if _newclass:blinkFlag = _swig_property(_micropolisengine.Micropolis_blinkFlag_get, _micropolisengine.Micropolis_blinkFlag_set)
    __swig_setmethods__["callbackHook"] = _micropolisengine.Micropolis_callbackHook_set
    __swig_getmethods__["callbackHook"] = _micropolisengine.Micropolis_callbackHook_get
    if _newclass:callbackHook = _swig_property(_micropolisengine.Micropolis_callbackHook_get, _micropolisengine.Micropolis_callbackHook_set)
    __swig_setmethods__["callbackData"] = _micropolisengine.Micropolis_callbackData_set
    __swig_getmethods__["callbackData"] = _micropolisengine.Micropolis_callbackData_get
    if _newclass:callbackData = _swig_property(_micropolisengine.Micropolis_callbackData_get, _micropolisengine.Micropolis_callbackData_set)
    __swig_setmethods__["userData"] = _micropolisengine.Micropolis_userData_set
    __swig_getmethods__["userData"] = _micropolisengine.Micropolis_userData_get
    if _newclass:userData = _swig_property(_micropolisengine.Micropolis_userData_get, _micropolisengine.Micropolis_userData_set)
    __swig_getmethods__["testBounds"] = lambda x: _micropolisengine.Micropolis_testBounds
    if _newclass:testBounds = staticmethod(_micropolisengine.Micropolis_testBounds)
    def spend(self, *args): return _micropolisengine.Micropolis_spend(self, *args)
    def setFunds(self, *args): return _micropolisengine.Micropolis_setFunds(self, *args)
    def tickCount(self): return _micropolisengine.Micropolis_tickCount(self)
    def newPtr(self, *args): return _micropolisengine.Micropolis_newPtr(self, *args)
    def freePtr(self, *args): return _micropolisengine.Micropolis_freePtr(self, *args)
    def doPlayNewCity(self): return _micropolisengine.Micropolis_doPlayNewCity(self)
    def doReallyStartGame(self): return _micropolisengine.Micropolis_doReallyStartGame(self)
    def doStartLoad(self): return _micropolisengine.Micropolis_doStartLoad(self)
    def doStartScenario(self, *args): return _micropolisengine.Micropolis_doStartScenario(self, *args)
    def initGame(self): return _micropolisengine.Micropolis_initGame(self)
    def callback(self, *args): return _micropolisengine.Micropolis_callback(self, *args)
    def doEarthquake(self, *args): return _micropolisengine.Micropolis_doEarthquake(self, *args)
    def invalidateMaps(self): return _micropolisengine.Micropolis_invalidateMaps(self)
    def makeSound(self, *args): return _micropolisengine.Micropolis_makeSound(self, *args)
    def getTile(self, *args): return _micropolisengine.Micropolis_getTile(self, *args)
    def setTile(self, *args): return _micropolisengine.Micropolis_setTile(self, *args)
    def getMapBuffer(self): return _micropolisengine.Micropolis_getMapBuffer(self)
    def getPowerGrid(self, *args): return _micropolisengine.Micropolis_getPowerGrid(self, *args)
    def setPowerGrid(self, *args): return _micropolisengine.Micropolis_setPowerGrid(self, *args)
    def getPowerGridMapBuffer(self): return _micropolisengine.Micropolis_getPowerGridMapBuffer(self)
    def getPopulationDensity(self, *args): return _micropolisengine.Micropolis_getPopulationDensity(self, *args)
    def setPopulationDensity(self, *args): return _micropolisengine.Micropolis_setPopulationDensity(self, *args)
    def getPopulationDensityMapBuffer(self): return _micropolisengine.Micropolis_getPopulationDensityMapBuffer(self)
    def getRateOfGrowth(self, *args): return _micropolisengine.Micropolis_getRateOfGrowth(self, *args)
    def setRateOfGrowth(self, *args): return _micropolisengine.Micropolis_setRateOfGrowth(self, *args)
    def getRateOfGrowthMapBuffer(self): return _micropolisengine.Micropolis_getRateOfGrowthMapBuffer(self)
    def getTrafficDensity(self, *args): return _micropolisengine.Micropolis_getTrafficDensity(self, *args)
    def setTrafficDensity(self, *args): return _micropolisengine.Micropolis_setTrafficDensity(self, *args)
    def getTrafficDensityMapBuffer(self): return _micropolisengine.Micropolis_getTrafficDensityMapBuffer(self)
    def getPollutionDensity(self, *args): return _micropolisengine.Micropolis_getPollutionDensity(self, *args)
    def setPollutionDensity(self, *args): return _micropolisengine.Micropolis_setPollutionDensity(self, *args)
    def getPollutionDensityMapBuffer(self): return _micropolisengine.Micropolis_getPollutionDensityMapBuffer(self)
    def getCrimeRate(self, *args): return _micropolisengine.Micropolis_getCrimeRate(self, *args)
    def setCrimeRate(self, *args): return _micropolisengine.Micropolis_setCrimeRate(self, *args)
    def getCrimeRateMapBuffer(self): return _micropolisengine.Micropolis_getCrimeRateMapBuffer(self)
    def getLandValue(self, *args): return _micropolisengine.Micropolis_getLandValue(self, *args)
    def setLandValue(self, *args): return _micropolisengine.Micropolis_setLandValue(self, *args)
    def getLandValueMapBuffer(self): return _micropolisengine.Micropolis_getLandValueMapBuffer(self)
    def getFireCoverage(self, *args): return _micropolisengine.Micropolis_getFireCoverage(self, *args)
    def setFireCoverage(self, *args): return _micropolisengine.Micropolis_setFireCoverage(self, *args)
    def getFireCoverageMapBuffer(self): return _micropolisengine.Micropolis_getFireCoverageMapBuffer(self)
    def getPoliceCoverage(self, *args): return _micropolisengine.Micropolis_getPoliceCoverage(self, *args)
    def setPoliceCoverage(self, *args): return _micropolisengine.Micropolis_setPoliceCoverage(self, *args)
    def getPoliceCoverageMapBuffer(self): return _micropolisengine.Micropolis_getPoliceCoverageMapBuffer(self)
    def doTool(self, *args): return _micropolisengine.Micropolis_doTool(self, *args)
    def toolDown(self, *args): return _micropolisengine.Micropolis_toolDown(self, *args)
    def toolDrag(self, *args): return _micropolisengine.Micropolis_toolDrag(self, *args)
    def didTool(self, *args): return _micropolisengine.Micropolis_didTool(self, *args)
    def makeTrafficAt(self, *args): return _micropolisengine.Micropolis_makeTrafficAt(self, *args)
    def makeTraffic(self, *args): return _micropolisengine.Micropolis_makeTraffic(self, *args)
    __swig_setmethods__["mustUpdateFunds"] = _micropolisengine.Micropolis_mustUpdateFunds_set
    __swig_getmethods__["mustUpdateFunds"] = _micropolisengine.Micropolis_mustUpdateFunds_get
    if _newclass:mustUpdateFunds = _swig_property(_micropolisengine.Micropolis_mustUpdateFunds_get, _micropolisengine.Micropolis_mustUpdateFunds_set)
    __swig_setmethods__["mustUpdateOptions"] = _micropolisengine.Micropolis_mustUpdateOptions_set
    __swig_getmethods__["mustUpdateOptions"] = _micropolisengine.Micropolis_mustUpdateOptions_get
    if _newclass:mustUpdateOptions = _swig_property(_micropolisengine.Micropolis_mustUpdateOptions_get, _micropolisengine.Micropolis_mustUpdateOptions_set)
    __swig_setmethods__["cityTimeLast"] = _micropolisengine.Micropolis_cityTimeLast_set
    __swig_getmethods__["cityTimeLast"] = _micropolisengine.Micropolis_cityTimeLast_get
    if _newclass:cityTimeLast = _swig_property(_micropolisengine.Micropolis_cityTimeLast_get, _micropolisengine.Micropolis_cityTimeLast_set)
    __swig_setmethods__["cityYearLast"] = _micropolisengine.Micropolis_cityYearLast_set
    __swig_getmethods__["cityYearLast"] = _micropolisengine.Micropolis_cityYearLast_get
    if _newclass:cityYearLast = _swig_property(_micropolisengine.Micropolis_cityYearLast_get, _micropolisengine.Micropolis_cityYearLast_set)
    __swig_setmethods__["cityMonthLast"] = _micropolisengine.Micropolis_cityMonthLast_set
    __swig_getmethods__["cityMonthLast"] = _micropolisengine.Micropolis_cityMonthLast_get
    if _newclass:cityMonthLast = _swig_property(_micropolisengine.Micropolis_cityMonthLast_get, _micropolisengine.Micropolis_cityMonthLast_set)
    __swig_setmethods__["totalFundsLast"] = _micropolisengine.Micropolis_totalFundsLast_set
    __swig_getmethods__["totalFundsLast"] = _micropolisengine.Micropolis_totalFundsLast_get
    if _newclass:totalFundsLast = _swig_property(_micropolisengine.Micropolis_totalFundsLast_get, _micropolisengine.Micropolis_totalFundsLast_set)
    __swig_setmethods__["resLast"] = _micropolisengine.Micropolis_resLast_set
    __swig_getmethods__["resLast"] = _micropolisengine.Micropolis_resLast_get
    if _newclass:resLast = _swig_property(_micropolisengine.Micropolis_resLast_get, _micropolisengine.Micropolis_resLast_set)
    __swig_setmethods__["comLast"] = _micropolisengine.Micropolis_comLast_set
    __swig_getmethods__["comLast"] = _micropolisengine.Micropolis_comLast_get
    if _newclass:comLast = _swig_property(_micropolisengine.Micropolis_comLast_get, _micropolisengine.Micropolis_comLast_set)
    __swig_setmethods__["indLast"] = _micropolisengine.Micropolis_indLast_set
    __swig_getmethods__["indLast"] = _micropolisengine.Micropolis_indLast_get
    if _newclass:indLast = _swig_property(_micropolisengine.Micropolis_indLast_get, _micropolisengine.Micropolis_indLast_set)
    def doUpdateHeads(self): return _micropolisengine.Micropolis_doUpdateHeads(self)
    def updateMaps(self): return _micropolisengine.Micropolis_updateMaps(self)
    def updateGraphs(self): return _micropolisengine.Micropolis_updateGraphs(self)
    def updateEvaluation(self): return _micropolisengine.Micropolis_updateEvaluation(self)
    def updateHeads(self): return _micropolisengine.Micropolis_updateHeads(self)
    def updateFunds(self): return _micropolisengine.Micropolis_updateFunds(self)
    def reallyUpdateFunds(self): return _micropolisengine.Micropolis_reallyUpdateFunds(self)
    def doTimeStuff(self): return _micropolisengine.Micropolis_doTimeStuff(self)
    def updateDate(self): return _micropolisengine.Micropolis_updateDate(self)
    def showValves(self): return _micropolisengine.Micropolis_showValves(self)
    def drawValve(self): return _micropolisengine.Micropolis_drawValve(self)
    def setDemand(self, *args): return _micropolisengine.Micropolis_setDemand(self, *args)
    def updateOptions(self): return _micropolisengine.Micropolis_updateOptions(self)
    def updateUserInterface(self): return _micropolisengine.Micropolis_updateUserInterface(self)
    def pause(self): return _micropolisengine.Micropolis_pause(self)
    def resume(self): return _micropolisengine.Micropolis_resume(self)
    def setSpeed(self, *args): return _micropolisengine.Micropolis_setSpeed(self, *args)
    def setPasses(self, *args): return _micropolisengine.Micropolis_setPasses(self, *args)
    def setGameLevelFunds(self, *args): return _micropolisengine.Micropolis_setGameLevelFunds(self, *args)
    def setGameLevel(self, *args): return _micropolisengine.Micropolis_setGameLevel(self, *args)
    def updateGameLevel(self): return _micropolisengine.Micropolis_updateGameLevel(self)
    def setCityName(self, *args): return _micropolisengine.Micropolis_setCityName(self, *args)
    def setCleanCityName(self, *args): return _micropolisengine.Micropolis_setCleanCityName(self, *args)
    def setYear(self, *args): return _micropolisengine.Micropolis_setYear(self, *args)
    def currentYear(self): return _micropolisengine.Micropolis_currentYear(self)
    def doNewGame(self): return _micropolisengine.Micropolis_doNewGame(self)
    def setEnableDisasters(self, *args): return _micropolisengine.Micropolis_setEnableDisasters(self, *args)
    def setAutoBudget(self, *args): return _micropolisengine.Micropolis_setAutoBudget(self, *args)
    def setAutoBulldoze(self, *args): return _micropolisengine.Micropolis_setAutoBulldoze(self, *args)
    def setAutoGoto(self, *args): return _micropolisengine.Micropolis_setAutoGoto(self, *args)
    def setEnableSound(self, *args): return _micropolisengine.Micropolis_setEnableSound(self, *args)
    def setDoAnimation(self, *args): return _micropolisengine.Micropolis_setDoAnimation(self, *args)
    def setDoMessages(self, *args): return _micropolisengine.Micropolis_setDoMessages(self, *args)
    def setDoNotices(self, *args): return _micropolisengine.Micropolis_setDoNotices(self, *args)
    def getDemands(self): return _micropolisengine.Micropolis_getDemands(self)
Micropolis_swigregister = _micropolisengine.Micropolis_swigregister
Micropolis_swigregister(Micropolis)

def Micropolis_getNextAnimatedTile(*args):
  return _micropolisengine.Micropolis_getNextAnimatedTile(*args)
Micropolis_getNextAnimatedTile = _micropolisengine.Micropolis_getNextAnimatedTile

def Micropolis_testBounds(*args):
  return _micropolisengine.Micropolis_testBounds(*args)
Micropolis_testBounds = _micropolisengine.Micropolis_testBounds

STR202_POPULATIONDENSITY_LOW = _micropolisengine.STR202_POPULATIONDENSITY_LOW
STR202_POPULATIONDENSITY_MEDIUM = _micropolisengine.STR202_POPULATIONDENSITY_MEDIUM
STR202_POPULATIONDENSITY_HIGH = _micropolisengine.STR202_POPULATIONDENSITY_HIGH
STR202_POPULATIONDENSITY_VERYHIGH = _micropolisengine.STR202_POPULATIONDENSITY_VERYHIGH
STR202_LANDVALUE_SLUM = _micropolisengine.STR202_LANDVALUE_SLUM
STR202_LANDVALUE_LOWER_CLASS = _micropolisengine.STR202_LANDVALUE_LOWER_CLASS
STR202_LANDVALUE_MIDDLE_CLASS = _micropolisengine.STR202_LANDVALUE_MIDDLE_CLASS
STR202_LANDVALUE_HIGH_CLASS = _micropolisengine.STR202_LANDVALUE_HIGH_CLASS
STR202_CRIME_NONE = _micropolisengine.STR202_CRIME_NONE
STR202_CRIME_LIGHT = _micropolisengine.STR202_CRIME_LIGHT
STR202_CRIME_MODERATE = _micropolisengine.STR202_CRIME_MODERATE
STR202_CRIME_DANGEROUS = _micropolisengine.STR202_CRIME_DANGEROUS
STR202_POLLUTION_NONE = _micropolisengine.STR202_POLLUTION_NONE
STR202_POLLUTION_MODERATE = _micropolisengine.STR202_POLLUTION_MODERATE
STR202_POLLUTION_HEAVY = _micropolisengine.STR202_POLLUTION_HEAVY
STR202_POLLUTION_VERY_HEAVY = _micropolisengine.STR202_POLLUTION_VERY_HEAVY
STR202_GROWRATE_DECLINING = _micropolisengine.STR202_GROWRATE_DECLINING
STR202_GROWRATE_STABLE = _micropolisengine.STR202_GROWRATE_STABLE
STR202_GROWRATE_SLOWGROWTH = _micropolisengine.STR202_GROWRATE_SLOWGROWTH
STR202_GROWRATE_FASTGROWTH = _micropolisengine.STR202_GROWRATE_FASTGROWTH
MESSAGE_NEED_MORE_RESIDENTIAL = _micropolisengine.MESSAGE_NEED_MORE_RESIDENTIAL
MESSAGE_NEED_MORE_COMMERCIAL = _micropolisengine.MESSAGE_NEED_MORE_COMMERCIAL
MESSAGE_NEED_MORE_INDUSTRIAL = _micropolisengine.MESSAGE_NEED_MORE_INDUSTRIAL
MESSAGE_NEED_MORE_ROADS = _micropolisengine.MESSAGE_NEED_MORE_ROADS
MESSAGE_NEED_MORE_RAILS = _micropolisengine.MESSAGE_NEED_MORE_RAILS
MESSAGE_NEED_ELECTRICITY = _micropolisengine.MESSAGE_NEED_ELECTRICITY
MESSAGE_NEED_STADIUM = _micropolisengine.MESSAGE_NEED_STADIUM
MESSAGE_NEED_SEAPORT = _micropolisengine.MESSAGE_NEED_SEAPORT
MESSAGE_NEED_AIRPORT = _micropolisengine.MESSAGE_NEED_AIRPORT
MESSAGE_HIGH_POLLUTION = _micropolisengine.MESSAGE_HIGH_POLLUTION
MESSAGE_HIGH_CRIME = _micropolisengine.MESSAGE_HIGH_CRIME
MESSAGE_TRAFFIC_JAMS = _micropolisengine.MESSAGE_TRAFFIC_JAMS
MESSAGE_NEED_FIRE_STATION = _micropolisengine.MESSAGE_NEED_FIRE_STATION
MESSAGE_NEED_POLICE_STATION = _micropolisengine.MESSAGE_NEED_POLICE_STATION
MESSAGE_BLACKOUTS_REPORTED = _micropolisengine.MESSAGE_BLACKOUTS_REPORTED
MESSAGE_TAX_TOO_HIGH = _micropolisengine.MESSAGE_TAX_TOO_HIGH
MESSAGE_ROAD_NEEDS_FUNDING = _micropolisengine.MESSAGE_ROAD_NEEDS_FUNDING
MESSAGE_FIRE_STATION_NEEDS_FUNDING = _micropolisengine.MESSAGE_FIRE_STATION_NEEDS_FUNDING
MESSAGE_POLICE_NEEDS_FUNDING = _micropolisengine.MESSAGE_POLICE_NEEDS_FUNDING
MESSAGE_FIRE_REPORTED = _micropolisengine.MESSAGE_FIRE_REPORTED
MESSAGE_MONSTER_SIGHTED = _micropolisengine.MESSAGE_MONSTER_SIGHTED
MESSAGE_TORNADO_SIGHTED = _micropolisengine.MESSAGE_TORNADO_SIGHTED
MESSAGE_EARTHQUAKE = _micropolisengine.MESSAGE_EARTHQUAKE
MESSAGE_PLANE_CRASHED = _micropolisengine.MESSAGE_PLANE_CRASHED
MESSAGE_SHIP_CRASHED = _micropolisengine.MESSAGE_SHIP_CRASHED
MESSAGE_TRAIN_CRASHED = _micropolisengine.MESSAGE_TRAIN_CRASHED
MESSAGE_HELICOPTER_CRASHED = _micropolisengine.MESSAGE_HELICOPTER_CRASHED
MESSAGE_HIGH_UNEMPLOYMENT = _micropolisengine.MESSAGE_HIGH_UNEMPLOYMENT
MESSAGE_NO_MONEY = _micropolisengine.MESSAGE_NO_MONEY
MESSAGE_FIREBOMBING = _micropolisengine.MESSAGE_FIREBOMBING
MESSAGE_NEED_MORE_PARKS = _micropolisengine.MESSAGE_NEED_MORE_PARKS
MESSAGE_EXPLOSION_REPORTED = _micropolisengine.MESSAGE_EXPLOSION_REPORTED
MESSAGE_NOT_ENOUGH_FUNDS = _micropolisengine.MESSAGE_NOT_ENOUGH_FUNDS
MESSAGE_BULLDOZE_AREA_FIRST = _micropolisengine.MESSAGE_BULLDOZE_AREA_FIRST
MESSAGE_REACHED_TOWN = _micropolisengine.MESSAGE_REACHED_TOWN
MESSAGE_REACHED_CITY = _micropolisengine.MESSAGE_REACHED_CITY
MESSAGE_REACHED_CAPITAL = _micropolisengine.MESSAGE_REACHED_CAPITAL
MESSAGE_REACHED_METROPOLIS = _micropolisengine.MESSAGE_REACHED_METROPOLIS
MESSAGE_REACHED_MEGALOPOLIS = _micropolisengine.MESSAGE_REACHED_MEGALOPOLIS
MESSAGE_NOT_ENOUGH_POWER = _micropolisengine.MESSAGE_NOT_ENOUGH_POWER
MESSAGE_HEAVY_TRAFFIC = _micropolisengine.MESSAGE_HEAVY_TRAFFIC
MESSAGE_FLOODING_REPORTED = _micropolisengine.MESSAGE_FLOODING_REPORTED
MESSAGE_NUCLEAR_MELTDOWN = _micropolisengine.MESSAGE_NUCLEAR_MELTDOWN
MESSAGE_RIOTS_REPORTED = _micropolisengine.MESSAGE_RIOTS_REPORTED
MESSAGE_STARTED_NEW_CITY = _micropolisengine.MESSAGE_STARTED_NEW_CITY
MESSAGE_LOADED_SAVED_CITY = _micropolisengine.MESSAGE_LOADED_SAVED_CITY
MESSAGE_SCENARIO_WON = _micropolisengine.MESSAGE_SCENARIO_WON
MESSAGE_SCENARIO_LOST = _micropolisengine.MESSAGE_SCENARIO_LOST
MESSAGE_ABOUT_MICROPOLIS = _micropolisengine.MESSAGE_ABOUT_MICROPOLIS
MESSAGE_SCENARIO_DULLSVILLE = _micropolisengine.MESSAGE_SCENARIO_DULLSVILLE
MESSAGE_SCENARIO_SAN_FRANCISCO = _micropolisengine.MESSAGE_SCENARIO_SAN_FRANCISCO
MESSAGE_SCENARIO_HAMBURG = _micropolisengine.MESSAGE_SCENARIO_HAMBURG
MESSAGE_SCENARIO_BERN = _micropolisengine.MESSAGE_SCENARIO_BERN
MESSAGE_SCENARIO_TOKYO = _micropolisengine.MESSAGE_SCENARIO_TOKYO
MESSAGE_SCENARIO_DETROIT = _micropolisengine.MESSAGE_SCENARIO_DETROIT
MESSAGE_SCENARIO_BOSTON = _micropolisengine.MESSAGE_SCENARIO_BOSTON
MESSAGE_SCENARIO_RIO_DE_JANEIRO = _micropolisengine.MESSAGE_SCENARIO_RIO_DE_JANEIRO
MESSAGE_LAST = _micropolisengine.MESSAGE_LAST
class MapByte1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapByte1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapByte1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _micropolisengine.new_MapByte1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_MapByte1
    __del__ = lambda self : None;
    __swig_getmethods__["MAP_BLOCKSIZE"] = _micropolisengine.MapByte1_MAP_BLOCKSIZE_get
    if _newclass:MAP_BLOCKSIZE = _swig_property(_micropolisengine.MapByte1_MAP_BLOCKSIZE_get)
    __swig_getmethods__["MAP_W"] = _micropolisengine.MapByte1_MAP_W_get
    if _newclass:MAP_W = _swig_property(_micropolisengine.MapByte1_MAP_W_get)
    __swig_getmethods__["MAP_H"] = _micropolisengine.MapByte1_MAP_H_get
    if _newclass:MAP_H = _swig_property(_micropolisengine.MapByte1_MAP_H_get)
    def fill(self, *args): return _micropolisengine.MapByte1_fill(self, *args)
    def clear(self): return _micropolisengine.MapByte1_clear(self)
    def set(self, *args): return _micropolisengine.MapByte1_set(self, *args)
    def get(self, *args): return _micropolisengine.MapByte1_get(self, *args)
    def onMap(self, *args): return _micropolisengine.MapByte1_onMap(self, *args)
    def worldSet(self, *args): return _micropolisengine.MapByte1_worldSet(self, *args)
    def worldGet(self, *args): return _micropolisengine.MapByte1_worldGet(self, *args)
    def worldOnMap(self, *args): return _micropolisengine.MapByte1_worldOnMap(self, *args)
    def getBase(self): return _micropolisengine.MapByte1_getBase(self)
MapByte1_swigregister = _micropolisengine.MapByte1_swigregister
MapByte1_swigregister(MapByte1)
ISLAND_RADIUS = cvar.ISLAND_RADIUS

class MapByte2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapByte2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapByte2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _micropolisengine.new_MapByte2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_MapByte2
    __del__ = lambda self : None;
    __swig_getmethods__["MAP_BLOCKSIZE"] = _micropolisengine.MapByte2_MAP_BLOCKSIZE_get
    if _newclass:MAP_BLOCKSIZE = _swig_property(_micropolisengine.MapByte2_MAP_BLOCKSIZE_get)
    __swig_getmethods__["MAP_W"] = _micropolisengine.MapByte2_MAP_W_get
    if _newclass:MAP_W = _swig_property(_micropolisengine.MapByte2_MAP_W_get)
    __swig_getmethods__["MAP_H"] = _micropolisengine.MapByte2_MAP_H_get
    if _newclass:MAP_H = _swig_property(_micropolisengine.MapByte2_MAP_H_get)
    def fill(self, *args): return _micropolisengine.MapByte2_fill(self, *args)
    def clear(self): return _micropolisengine.MapByte2_clear(self)
    def set(self, *args): return _micropolisengine.MapByte2_set(self, *args)
    def get(self, *args): return _micropolisengine.MapByte2_get(self, *args)
    def onMap(self, *args): return _micropolisengine.MapByte2_onMap(self, *args)
    def worldSet(self, *args): return _micropolisengine.MapByte2_worldSet(self, *args)
    def worldGet(self, *args): return _micropolisengine.MapByte2_worldGet(self, *args)
    def worldOnMap(self, *args): return _micropolisengine.MapByte2_worldOnMap(self, *args)
    def getBase(self): return _micropolisengine.MapByte2_getBase(self)
MapByte2_swigregister = _micropolisengine.MapByte2_swigregister
MapByte2_swigregister(MapByte2)

class MapByte4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapByte4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapByte4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _micropolisengine.new_MapByte4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_MapByte4
    __del__ = lambda self : None;
    __swig_getmethods__["MAP_BLOCKSIZE"] = _micropolisengine.MapByte4_MAP_BLOCKSIZE_get
    if _newclass:MAP_BLOCKSIZE = _swig_property(_micropolisengine.MapByte4_MAP_BLOCKSIZE_get)
    __swig_getmethods__["MAP_W"] = _micropolisengine.MapByte4_MAP_W_get
    if _newclass:MAP_W = _swig_property(_micropolisengine.MapByte4_MAP_W_get)
    __swig_getmethods__["MAP_H"] = _micropolisengine.MapByte4_MAP_H_get
    if _newclass:MAP_H = _swig_property(_micropolisengine.MapByte4_MAP_H_get)
    def fill(self, *args): return _micropolisengine.MapByte4_fill(self, *args)
    def clear(self): return _micropolisengine.MapByte4_clear(self)
    def set(self, *args): return _micropolisengine.MapByte4_set(self, *args)
    def get(self, *args): return _micropolisengine.MapByte4_get(self, *args)
    def onMap(self, *args): return _micropolisengine.MapByte4_onMap(self, *args)
    def worldSet(self, *args): return _micropolisengine.MapByte4_worldSet(self, *args)
    def worldGet(self, *args): return _micropolisengine.MapByte4_worldGet(self, *args)
    def worldOnMap(self, *args): return _micropolisengine.MapByte4_worldOnMap(self, *args)
    def getBase(self): return _micropolisengine.MapByte4_getBase(self)
MapByte4_swigregister = _micropolisengine.MapByte4_swigregister
MapByte4_swigregister(MapByte4)

class MapShort8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapShort8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapShort8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _micropolisengine.new_MapShort8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _micropolisengine.delete_MapShort8
    __del__ = lambda self : None;
    __swig_getmethods__["MAP_BLOCKSIZE"] = _micropolisengine.MapShort8_MAP_BLOCKSIZE_get
    if _newclass:MAP_BLOCKSIZE = _swig_property(_micropolisengine.MapShort8_MAP_BLOCKSIZE_get)
    __swig_getmethods__["MAP_W"] = _micropolisengine.MapShort8_MAP_W_get
    if _newclass:MAP_W = _swig_property(_micropolisengine.MapShort8_MAP_W_get)
    __swig_getmethods__["MAP_H"] = _micropolisengine.MapShort8_MAP_H_get
    if _newclass:MAP_H = _swig_property(_micropolisengine.MapShort8_MAP_H_get)
    def fill(self, *args): return _micropolisengine.MapShort8_fill(self, *args)
    def clear(self): return _micropolisengine.MapShort8_clear(self)
    def set(self, *args): return _micropolisengine.MapShort8_set(self, *args)
    def get(self, *args): return _micropolisengine.MapShort8_get(self, *args)
    def onMap(self, *args): return _micropolisengine.MapShort8_onMap(self, *args)
    def worldSet(self, *args): return _micropolisengine.MapShort8_worldSet(self, *args)
    def worldGet(self, *args): return _micropolisengine.MapShort8_worldGet(self, *args)
    def worldOnMap(self, *args): return _micropolisengine.MapShort8_worldOnMap(self, *args)
    def getBase(self): return _micropolisengine.MapShort8_getBase(self)
MapShort8_swigregister = _micropolisengine.MapShort8_swigregister
MapShort8_swigregister(MapShort8)



