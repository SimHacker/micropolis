========================================================================

Work to be done on MicropolisCore:

Rework the build system. 
  Old fashioned crude makefiles need to be brought up to date. 
  Currently using python setup.py to compile to Python extensions. 
    Is setup.py the thing to be using to compile SWIG python extensions? 
    Is using setup.py a good idea or not? What are the alternatives? (Ian Bicking would know.)
  To use gnu configure or not?
    I can't stand it, but I realize there are reasons to use it. 
  What about compiling extensions for other languages. 
  The code and makefiles need to be able to compile any number of wrapers for different extension langauges. 
  The "make clean" command should not delete the swig generated files, and we should check in and distribute the swig generated wrappers.
    Different people have different versions of SWIG, or might not have it at all. 
    Once things stabilize, most developers won't have to change the swig bindings very often.
    Have a "make cleanswig" command to clean out the SWIG output files, so you can regenerate everything from scratch. 

Replace explicit world bounds checking with a macro. 

Implement sound support. 

Refactor the tool code. Move out of game. Make stateless tool API. All state in client. 

Implement sprites.

Implement overall map view and overlays.

Implement zooming. 

Integrate map view and editor view with seamless zooming. 

Need a way to blink the unpowered tiles.

Make sure the explosion decays into a static dirt tile and animates properly in the client.
                                   
Clean up and rationalize callbacks.
Make a generic update notification system. 
Don't try formatting, converting and passing parameters, if they can be read from the simulator. 
Update clients read the data out of the simulator that they need. 
Format date, money, translate strings, etc, themselves. 
Remove all i18n related code from the simulator, and do it properly in the user interface instead. 
Web update client pushes any changes to the sessions looking at the game.
Smart about what needs to be sent, because it tracks what it knows the client has, and sends deltas or nothing if no change. 
How do we make this robust against missed updates? 
  Easy, stupid: If we detect an out of sequence update, just flush all caches and re-send everything. 
    (Re-sync when connection is lost.)
  Hard, smart: Send a simulator timestamp back and forth, so we know how long in the past to update from. 
    (Re-invent TCP/IP).
Try easy and stupid for now. 

========================================================================

Messages:

Callback("UIAutoGoto", "dd", x, y);
  Useful. Sent to client. 

Callback("UIDidGenerateNewCity", "");
  UI notification. Sent to client. 

Callback("UIDidLoadCity", "");
  UI notification. Sent to client. 

Callback("UIDidLoadScenario", "");
  UI notification. Sent to client. 

Callback("UIDidSaveCity", "");
  UI notification. Sent to client. 

Callback("UIDidTool", "sdd", name, x, y);
  UI notification. Sent to client. 
  Makes a sound according to the selected tool being used.

Callback("UIDidntLoadCity", "s", msg);
  UI notification. Sent to client. 
  Translate error message.

Callback("UIDidntSaveCity", "s", msg);
  UI notification. Sent to client. 
  Translate error message.

Callback("UIDoPendTool", "ddd", tool, x, y);
  Used for multiplayer voting. Not needed now. 

Callback("UIDropFireBombs", "");
  Useful. Disasters. 
  Starts dropping firebombs asynchronoysly. 

  FireBomb
  after 300 FireBomb
  after 600 FireBomb
  after 900 FireBomb

  Should not be in UI, or time dependent. 
  Make tick dependent, implement in simulator. 

Callback("UIInitializeSound", "");
  Not necessary.

Callback("UIInvalidateEditors", "");
  Called whenever a city is loaded, or whenever an editing tool changes the map, or whenever UpdateEditors is called.
  Should not send a message to the client. Should just mark editors as needing to be updated.

Callback("UIInvalidateMaps", "");
  Called whenever a city is loaded, or whenever an editing tool changes the map, or whenever UpdateMaps is called.
  Should not send a message to the client. Should just mark editors as needing to be updated.

Callback("UILoseGame", "");
  UI notification. Sent to client. 
  Shouldn't there be a parameter with the lose message id?
  No. Same message for any failure. TODO: Add different messages for different scenarios.

Callback("UIMakeSound", "ss", channel, sound);
  Send to client.

Callback("UINewEvaluation", "");
  Now UIUpdate "evaluation".

Callback("UINewGame", "");
  Called from NewGame, but that is not called from the simulator directly.

  global OldBudget
  set OldBudget 0
  sim InitGame
  sim EraseOverlay
  InitEditors
  InitMaps
  InitGraphs
  update
  sim UpdateMaps

Callback("UIPlayNewCity", "");
  Called from PlayNewCity, but that is not called from the simulator directly.

  UIGenerateNewCity
  UIPlayGame

UIPlayGame

  global State
  global Priority
  set State play
  sim Resume
  sim Speed 3
  sim AutoGoto 1
  SetPriority $Priority
  InitHeads
  InitAllHeadMenus
  ShowInitial
  sim NeedRest 10

Callback("UIReallyStartGame", "");
  Show splash screen, go to pick city mode.

Callback("UISaveCityAs", "");
  Show save city as dialog.

Callback("UISetBudget", "ssssd", flowStr, previousStr, currentStr, collectedStr, tax);
  Update budget windows, money displays, etc. 

Callback("UISetBudgetValues", "ssdssdssd", roadGot, roadWant, roadPercent, policeGot, policeWant, policePercent, fireGot, fireWant, firePercent);
  Set sliders and labels on budget window.

Callback("UISetCityName", "s", CityName);
  Update city name fields.

Callback("UISetDate", "sdd", str, m, y);
  Update date field.

Callback("UISetDemand", "ddd", r, c, i);
  Set demand gauges.

Callback("UISetGameLevel", "d", GameLevel);
  Update game level selected radio in choose city dialog. 

Callback("UISetMessage", "s", str);
  Set message fields. Append message to log.

Callback("UISetOptions", "dddddddd", autoBudget, gotoGoto, autoBulldoze, noDisasters, sound, doAnimation, doMessages, doNotices)
  Congigure options menu.

Callback("UISetSpeed", "d", speed);
  Set game speed.
  Should stop timer if speed == 0, and start timer if speed > 0.

Callback("UIShowBudgetAndWait", "");
  Pauses the simulation, shows a dialog, resumes after the dialog is done. 

Callback("UIShowPicture", "d", id);
  Shows a dialog with a picture of a given id. 

Callback("UIShowZoneStatus", "ssssssdd", str, s0, s1, s2, s3, s4, x, y);
  Shows a dialog with a live view of the selected zone, and information about it. 
  This should be a function local to the view, not global in the simulator. 
  Remove strings from game. Internationalize. 

Callback("UIStartEarthquake", "d", magnitude);
  Start the earth quaking. 
  Use a timer in the client and get rid of the StopEarthquake message.

Callback("UIStartLoad", "");
  Called after loading a city by GameStarted. 
  Calls UIPlayGame.

Callback("UIStartScenario", "d", scenario);
  Called to start scenario by GameStarted.

  global Scenario
  set Scenario $id
  UILoadScenario $id
  UIPlayGame
  UIShowPicture $id

Callback("UIUpdate", "s", name);
  General purpose update callback. 
  Called when an aspect of the model has changed:
    city: after load file, load scenario, or generate city
    map: when small overall map changes
    editor: when large close-up map changes
    graph: when graph changes
    evaluation: when evaluation changes
    budget: when budget changes
    date: when date changes
    funds: when funds change
    demand: when demand changes
    level: when level changes
    speed: when speed changes
    delay: when delay changes
    option: when options change

Callback("UIUpdateBudget", "");
  Updates all labels that depend on the auto budget flag. 
  (button in budget window to toggle autobudget)
  Called after invalidating current percents. 
    drawCurrPercents => MustDrawCurrPercents
    drawBudgetWindow => MustDrawBudgetWindow
  All this stuff should be sent to clients only if it has changed.

Callback("UIWinGame", "");
  Show picture 100. 

========================================================================

State:

  short SMapX;

  short SMapY;

  short CChr;

  short CChr9;

  short RoadTotal;

  short RailTotal;

  short FirePop;

  short ResPop;

  short ComPop;

  short IndPop;

  short TotalPop;

  short LastTotalPop;

  short ResZPop;

  short ComZPop;

  short IndZPop;

  short TotalZPop;

  short HospPop;

  short ChurchPop;

  short StadiumPop;

  short PolicePop;

  short FireStPop;

  short CoalPop;

  short NuclearPop;

  short PortPop;

  short APortPop;

  short NeedHosp;

  short NeedChurch;

  short CrimeAverage;

  short PolluteAverage;

  short LVAverage;

  Quad CityTime;

  Quad CityMonth;

  Quad CityYear;

  short StartingYear;

  short *Map[WORLD_X];

  short ResHisMax;

  short Res2HisMax;

  short ComHisMax;

  short Com2HisMax;

  short IndHisMax;

  short Ind2HisMax;

  short CensusChanged;

  short MessagePort;

  short MesX;

  short MesY;

  Quad RoadSpend;

  short PoliceSpend;

  short FireSpend;

  Quad RoadFund;

  short PoliceFund;

  short FireFund;

  short RoadEffect;

  short PoliceEffect;

  short FireEffect;

  Quad TaxFund; 

  short CityTax;

  short TaxFlag;

  Byte *PopDensity[HWLDX];

  Byte *TrfDensity[HWLDX];

  Byte *PollutionMem[HWLDX];

  Byte *LandValueMem[HWLDX];

  Byte *CrimeMem[HWLDX];

  Byte *tem[HWLDX];

  Byte *tem2[HWLDX];

  Byte *TerrainMem[QWX];

  Byte *Qtem[QWX];

  short RateOGMem[SmX][SmY];

  short FireStMap[SmX][SmY];

  short PoliceMap[SmX][SmY];

  short PoliceMapEffect[SmX][SmY];

  short FireRate[SmX][SmY];

  short ComRate[SmX][SmY];

  short STem[SmX][SmY];

  Ptr terrainBase;

  Ptr qTemBase;

  Ptr tem1Base;

  Ptr tem2Base;

  Ptr popPtr;

  Ptr trfPtr;

  Ptr polPtr;

  Ptr landPtr;

  Ptr crimePtr;

  Ptr auxPopPtr;

  Ptr auxTrfPtr;

  Ptr auxPolPtr;

  Ptr auxLandPtr;

  Ptr auxCrimePtr;

  Ptr brettPtr;

  unsigned short *mapPtr;

  short *ResHis;

  short *ComHis;

  short *IndHis;

  short *MoneyHis;

  short *PollutionHis;

  short *CrimeHis;

  short *MiscHis;

  short *PowerMap;

  float roadPercent;

  float policePercent;

  float firePercent;

  Quad roadValue;

  Quad policeValue;

  Quad fireValue;

  Quad roadMaxValue;

  Quad policeMaxValue;

  Quad fireMaxValue;

  int MustDrawCurrPercents;

  int MustDrawBudgetWindow;

  short ShakeNow;

  short FloodCnt;

  short FloodX;

  short FloodY;

  short EvalValid;

  short CityYes;

  short CityNo;

  short ProblemTable[PROBNUM];

  short ProblemTaken[PROBNUM];

  short ProblemVotes[PROBNUM]; /* these are the votes for each  */

  short ProblemOrder[4]; /* sorted index to above  */

  Quad CityPop;

  Quad deltaCityPop;

  Quad CityAssValue;

  short CityClass; /*  0..5  */

  short CityScore;

  short deltaCityScore;

  short AverageCityScore;

  short TrafficAverage;

  static char *cityClassStr[6];

  static char *cityLevelStr[3];

  static char *probStr[10];

  std::string evalChanged;

  std::string evalScore;

  std::string evalPs0;

  std::string evalPs1;

  std::string evalPs2;

  std::string evalPs3;

  std::string evalPv0;

  std::string evalPv1;

  std::string evalPv2;

  std::string evalPv3;

  std::string evalPop;

  std::string evalDelta;

  std::string evalAssessedDollars;

  std::string evalCityClass;

  std::string evalCityLevel;

  std::string evalGoodYes;

  std::string evalGoodNo;

  std::string evalTitle;

  short XStart;

  short YStart;

  short MapX;

  short MapY;

  short Dir;

  short LastDir;

  int TreeLevel; /* level for tree creation */

  int LakeLevel; /* level for lake creation */

  int CurveLevel; /* level for river curviness */

  int CreateIsland; /* -1 => 10%, 0 => never, 1 => always */

  short NewGraph;

  short AllMax;

  unsigned char *History10[HISTORIES];

  unsigned char *History120[HISTORIES];

  int HistoryInitialized;

  short Graph10Max;

  short Graph120Max;

  int GraphUpdateTime;

  static char *HistName[];

  static unsigned char HistColor[];

  char *MicropolisVersion;

  int sim_loops;

  int sim_delay;

  int sim_skips;

  int sim_skip;

  int sim_paused;

  int sim_paused_speed;

  int heat_steps;

  int heat_flow;

  int heat_rule;

  int heat_wrap;

  char *CityFileName;

  int MultiPlayerMode;

  int TilesAnimated;

  int DoAnimation;

  int DoMessages;

  int DoNotices;

  short *CellSrc;

  short *CellDst;

  Quad LastCityPop;

  short LastCategory;

  short LastPicNum;

  short autoGo;

  short HaveLastMessage;

  char LastMessage[256];

  int PowerStackNum;

  short PowerStackX[PWRSTKSIZE];

  short PowerStackY[PWRSTKSIZE];

  Quad MaxPower;

  Quad NumPower;

  UQuad nextRandom;

  char *HomeDir;

  char *ResourceDir;

  char *KeyDir;

  char *HostName;

  Resource *Resources;

  StringTable *StringTables;

  short NewMap;

  short NewMapFlags[NMAPS];

  short CCx;

  short CCy;

  short CCx2;

  short CCy2;

  short PolMaxX;

  short PolMaxY;

  short CrimeMaxX;

  short CrimeMaxY;

  Quad DonDither;

  short ValveFlag;

  short CrimeRamp;

  short PolluteRamp;

  short RValve;

  short CValve;

  short IValve;

  short ResCap;

  short ComCap;

  short IndCap;

  short CashFlow;

  float EMarket;

  short DisasterEvent;

  short DisasterWait;

  short ScoreType;

  short ScoreWait;

  short PwrdZCnt;

  short unPwrdZCnt;

  short NewPower; /* post */

  short AvCityTax;

  short Scycle;

  short Fcycle;

  short Spdcycle;

  short DoInitialEval;

  short MeltX;

  short MeltY;

  SimSprite *spriteList;

  int spriteCount;

  SimSprite *FreeSprites;

  SimSprite *GlobalSprites[OBJN];

  short CrashX;

  short CrashY;

  int absDist;

  short Cycle;

  Quad TotalFunds;

  short PunishCnt;

  short autoBulldoze;

  short autoBudget;

  Quad LastMesTime;

  short GameLevel;

  short InitSimLoad;

  short ScenarioID;

  short SimSpeed;

  short SimMetaSpeed;

  short UserSoundOn;

  char *CityName;

  short NoDisasters;

  short MesNum;

  short EvalChanged;

  short flagBlink;

  // Hook into scripting language to send callbacks. 
  // (i.e. a function that calls back into the Python interpreter.)
  CallbackFunction callbackHook;

  // Hook for scripting language to store scripted callback function. 
  // (i.e. a callable Python object.)
  void *callbackData;

  // Hook for scripting language to store context (i.e. peer object).
  // (i.e. Python SWIG wrapper of this Micropolis object.)
  void *userData;

  int OverRide;

  int Expensive;

  int Players;

  int Votes;

  int PendingTool;

  int PendingX;

  int PendingY;

  int last_x;

  int last_y;

  int tool_x;

  int tool_y;

  static Quad CostOf[];

  static short toolSize[];

  static short toolOffset[];

  static Quad toolColors[];

  short PosStackN;

  short SMapXStack[MAX_TRAFFIC_DISTANCE + 1];

  short SMapYStack[MAX_TRAFFIC_DISTANCE + 1];

  short LDir;

  short Zsource;

  short TrafMaxX;

  short TrafMaxY;

  short MustUpdateFunds;

  short MustUpdateOptions;

  Quad LastCityTime;

  Quad LastCityYear;

  Quad LastCityMonth;

  Quad LastFunds;

  Quad LastR;

  Quad LastC;

  Quad LastI;


========================================================================
