/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_micropolisengine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_micropolisengine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_micropolisengine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


////////////////////////////////////////////////////////////////////////
// Headers inserted into micropolisengine_wrap.cpp,
// from micropolisengine-swig-csharp.i
#include "micropolis.h"
#include "generate.h"
#include "text.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_W_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_W;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_H_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_H;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IS_INTEL_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MICROPOLIS_VERSION_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *) "5.0";
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BITS_PER_TILE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BITS_PER_TILE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BYTES_PER_TILE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BYTES_PER_TILE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_W_2_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_W_2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_H_2_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_H_2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_W_4_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_W_4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_H_4_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_H_4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_W_8_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_W_8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WORLD_H_8_get() {
  int jresult ;
  int result;
  
  result = (int)(int)WORLD_H_8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EDITOR_TILE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)EDITOR_TILE_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PASSES_PER_CITYTIME_get() {
  int jresult ;
  int result;
  
  result = (int)(int)PASSES_PER_CITYTIME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CITYTIMES_PER_MONTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)CITYTIMES_PER_MONTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CITYTIMES_PER_YEAR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)CITYTIMES_PER_YEAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HISTORY_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)HISTORY_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MISC_HISTORY_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MISC_HISTORY_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HISTORY_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)HISTORY_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POWER_STACK_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)POWER_STACK_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NOWHERE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)NOWHERE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TRAFFIC_DISTANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MAX_TRAFFIC_DISTANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_ROAD_EFFECT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MAX_ROAD_EFFECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_POLICE_STATION_EFFECT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MAX_POLICE_STATION_EFFECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_FIRE_STATION_EFFECT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MAX_FIRE_STATION_EFFECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RES_VALVE_RANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)RES_VALVE_RANGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COM_VALVE_RANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)COM_VALVE_RANGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IND_VALVE_RANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)IND_VALVE_RANGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_not_reached(int jarg1, char * jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  not_reached(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_buf_set(void * jarg1, char * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg1->buf) delete [] arg1->buf;
    if (arg2) {
      arg1->buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->buf, (const char *)arg2);
    } else {
      arg1->buf = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Resource_buf_get(void * jarg1) {
  char * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  char *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (char *) ((arg1)->buf);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_size_set(void * jarg1, long jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  Quad arg2 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Resource_size_get(void * jarg1) {
  long jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Quad result;
  
  arg1 = (Resource *)jarg1; 
  result = (Quad) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_name_set(void * jarg1, char * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  char *arg2 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 4-1);
      arg1->name[4-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Resource_name_get(void * jarg1) {
  char * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  char *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_id_set(void * jarg1, long jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  Quad arg2 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Resource_id_get(void * jarg1) {
  long jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Quad result;
  
  arg1 = (Resource *)jarg1; 
  result = (Quad) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_next_set(void * jarg1, void * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  Resource *arg2 = (Resource *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (Resource *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_next_get(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Resource *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (Resource *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Resource() {
  void * jresult ;
  Resource *result = 0 ;
  
  result = (Resource *)new Resource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Resource(void * jarg1) {
  Resource *arg1 = (Resource *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringTable_id_set(void * jarg1, long jarg2) {
  StringTable *arg1 = (StringTable *) 0 ;
  Quad arg2 ;
  
  arg1 = (StringTable *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_StringTable_id_get(void * jarg1) {
  long jresult ;
  StringTable *arg1 = (StringTable *) 0 ;
  Quad result;
  
  arg1 = (StringTable *)jarg1; 
  result = (Quad) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringTable_lines_set(void * jarg1, int jarg2) {
  StringTable *arg1 = (StringTable *) 0 ;
  int arg2 ;
  
  arg1 = (StringTable *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lines = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringTable_lines_get(void * jarg1) {
  int jresult ;
  StringTable *arg1 = (StringTable *) 0 ;
  int result;
  
  arg1 = (StringTable *)jarg1; 
  result = (int) ((arg1)->lines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringTable_strings_set(void * jarg1, void * jarg2) {
  StringTable *arg1 = (StringTable *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (StringTable *)jarg1; 
  arg2 = (char **)jarg2; 
  if (arg1) (arg1)->strings = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringTable_strings_get(void * jarg1) {
  void * jresult ;
  StringTable *arg1 = (StringTable *) 0 ;
  char **result = 0 ;
  
  arg1 = (StringTable *)jarg1; 
  result = (char **) ((arg1)->strings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringTable_next_set(void * jarg1, void * jarg2) {
  StringTable *arg1 = (StringTable *) 0 ;
  StringTable *arg2 = (StringTable *) 0 ;
  
  arg1 = (StringTable *)jarg1; 
  arg2 = (StringTable *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringTable_next_get(void * jarg1) {
  void * jresult ;
  StringTable *arg1 = (StringTable *) 0 ;
  StringTable *result = 0 ;
  
  arg1 = (StringTable *)jarg1; 
  result = (StringTable *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringTable() {
  void * jresult ;
  StringTable *result = 0 ;
  
  result = (StringTable *)new StringTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringTable(void * jarg1) {
  StringTable *arg1 = (StringTable *) 0 ;
  
  arg1 = (StringTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_next_set(void * jarg1, void * jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimSprite_next_get(void * jarg1) {
  void * jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  SimSprite *result = 0 ;
  
  arg1 = (SimSprite *)jarg1; 
  result = (SimSprite *) ((arg1)->next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_name_set(void * jarg1, char * jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SimSprite_name_get(void * jarg1) {
  char * jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  char *result = 0 ;
  
  arg1 = (SimSprite *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_type_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_type_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_frame_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->frame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_frame_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->frame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_x_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_x_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_y_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_y_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_width_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_width_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_height_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_height_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_xOffset_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_xOffset_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->xOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_yOffset_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_yOffset_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->yOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_xHot_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xHot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_xHot_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->xHot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_yHot_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yHot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_yHot_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->yHot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_origX_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->origX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_origX_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->origX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_origY_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->origY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_origY_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->origY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_destX_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->destX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_destX_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->destX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_destY_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->destY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_destY_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->destY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_count_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_count_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_soundCount_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->soundCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_soundCount_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->soundCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_dir_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_dir_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->dir);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_newDir_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->newDir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_newDir_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->newDir);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_step_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->step = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_step_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->step);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_flag_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_flag_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->flag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_control_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->control = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_control_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->control);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_turn_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->turn = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_turn_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->turn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_accel_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_accel_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->accel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimSprite_speed_set(void * jarg1, int jarg2) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  int arg2 ;
  
  arg1 = (SimSprite *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SimSprite_speed_get(void * jarg1) {
  int jresult ;
  SimSprite *arg1 = (SimSprite *) 0 ;
  int result;
  
  arg1 = (SimSprite *)jarg1; 
  result = (int) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimSprite() {
  void * jresult ;
  SimSprite *result = 0 ;
  
  result = (SimSprite *)new SimSprite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SimSprite(void * jarg1) {
  SimSprite *arg1 = (SimSprite *) 0 ;
  
  arg1 = (SimSprite *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Micropolis() {
  void * jresult ;
  Micropolis *result = 0 ;
  
  result = (Micropolis *)new Micropolis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Micropolis(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadTotal_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->roadTotal = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_roadTotal_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->roadTotal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_railTotal_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->railTotal = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_railTotal_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->railTotal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_firePop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->firePop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_firePop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->firePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->resPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_resPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->resPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->comPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_comPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->comPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->indPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_indPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->indPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_totalPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->totalPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_totalPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->totalPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_totalPopLast_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->totalPopLast = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_totalPopLast_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->totalPopLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resZonePop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->resZonePop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_resZonePop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->resZonePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comZonePop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->comZonePop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_comZonePop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->comZonePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indZonePop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->indZonePop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_indZonePop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->indZonePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_totalZonePop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->totalZonePop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_totalZonePop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->totalZonePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_hospitalPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->hospitalPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_hospitalPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->hospitalPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_churchPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->churchPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_churchPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->churchPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_faith_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->faith = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_faith_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->faith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_stadiumPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->stadiumPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_stadiumPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->stadiumPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeStationPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->policeStationPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_policeStationPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->policeStationPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireStationPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->fireStationPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_fireStationPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->fireStationPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_coalPowerPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->coalPowerPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_coalPowerPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->coalPowerPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_nuclearPowerPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->nuclearPowerPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_nuclearPowerPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->nuclearPowerPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_seaportPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->seaportPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_seaportPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->seaportPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_airportPop_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->airportPop = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_airportPop_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->airportPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_crimeAverage_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->crimeAverage = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_crimeAverage_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->crimeAverage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_pollutionAverage_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->pollutionAverage = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_pollutionAverage_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->pollutionAverage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_landValueAverage_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->landValueAverage = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_landValueAverage_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->landValueAverage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityTime_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityTime = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityTime_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityMonth_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityMonth = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityMonth_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityMonth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityYear_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityYear = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityYear_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityYear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_startingYear_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->startingYear = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_startingYear_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->startingYear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_map_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  unsigned short **arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (unsigned short **)jarg2; 
  {
    size_t ii;
    unsigned short * *b = (unsigned short * *) arg1->map;
    for (ii = 0; ii < (size_t)WORLD_W; ii++) b[ii] = *((unsigned short * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_map_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  unsigned short **result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (unsigned short **)(unsigned short **) ((arg1)->map);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resHist10Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->resHist10Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_resHist10Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->resHist10Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resHist120Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->resHist120Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_resHist120Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->resHist120Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comHist10Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->comHist10Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_comHist10Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->comHist10Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comHist120Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->comHist120Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_comHist120Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->comHist120Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indHist10Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->indHist10Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_indHist10Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->indHist10Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indHist120Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->indHist120Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_indHist120Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->indHist120Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_censusChanged_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->censusChanged = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_censusChanged_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->censusChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadSpend_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->roadSpend = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_roadSpend_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->roadSpend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeSpend_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->policeSpend = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_policeSpend_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->policeSpend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireSpend_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->fireSpend = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_fireSpend_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->fireSpend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadFund_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->roadFund = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_roadFund_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->roadFund);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeFund_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->policeFund = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_policeFund_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->policeFund);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireFund_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->fireFund = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_fireFund_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->fireFund);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadEffect_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->roadEffect = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_roadEffect_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->roadEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeEffect_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->policeEffect = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_policeEffect_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->policeEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireEffect_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->fireEffect = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_fireEffect_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->fireEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_taxFund_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->taxFund = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_taxFund_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->taxFund);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityTax_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cityTax = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cityTax_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cityTax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_taxFlag_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->taxFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_taxFlag_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->taxFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_populationDensityMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->populationDensityMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_populationDensityMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->populationDensityMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_trafficDensityMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->trafficDensityMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_trafficDensityMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->trafficDensityMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_pollutionDensityMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->pollutionDensityMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_pollutionDensityMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->pollutionDensityMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_landValueMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->landValueMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_landValueMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->landValueMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_crimeRateMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->crimeRateMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_crimeRateMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->crimeRateMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_terrainDensityMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte4 *arg2 = (MapByte4 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte4 *)jarg2; 
  if (arg1) (arg1)->terrainDensityMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_terrainDensityMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte4 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte4 *)& ((arg1)->terrainDensityMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_tempMap1_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->tempMap1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_tempMap1_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->tempMap1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_tempMap2_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *arg2 = (MapByte2 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte2 *)jarg2; 
  if (arg1) (arg1)->tempMap2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_tempMap2_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte2 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte2 *)& ((arg1)->tempMap2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_tempMap3_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte4 *arg2 = (MapByte4 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte4 *)jarg2; 
  if (arg1) (arg1)->tempMap3 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_tempMap3_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte4 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte4 *)& ((arg1)->tempMap3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_powerGridMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte1 *arg2 = (MapByte1 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapByte1 *)jarg2; 
  if (arg1) (arg1)->powerGridMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_powerGridMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapByte1 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapByte1 *)& ((arg1)->powerGridMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_rateOfGrowthMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->rateOfGrowthMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_rateOfGrowthMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->rateOfGrowthMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireStationMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->fireStationMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_fireStationMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->fireStationMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireStationEffectMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->fireStationEffectMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_fireStationEffectMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->fireStationEffectMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeStationMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->policeStationMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_policeStationMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->policeStationMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeStationEffectMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->policeStationEffectMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_policeStationEffectMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->policeStationEffectMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comRateMap_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *arg2 = (MapShort8 *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (MapShort8 *)jarg2; 
  if (arg1) (arg1)->comRateMap = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_comRateMap_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  MapShort8 *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (MapShort8 *)& ((arg1)->comRateMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->resHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_resHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->resHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->comHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_comHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->comHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->indHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_indHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->indHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_moneyHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->moneyHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_moneyHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->moneyHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_pollutionHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->pollutionHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_pollutionHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->pollutionHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_crimeHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->crimeHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_crimeHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->crimeHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_miscHist_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  if (arg1) (arg1)->miscHist = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_miscHist_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *) ((arg1)->miscHist);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_animateTiles(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->animateTiles();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getNextAnimatedTile(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)Micropolis::getNextAnimatedTile(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadPercent_set(void * jarg1, float jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roadPercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Micropolis_roadPercent_get(void * jarg1) {
  float jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  float result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (float) ((arg1)->roadPercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policePercent_set(void * jarg1, float jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->policePercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Micropolis_policePercent_get(void * jarg1) {
  float jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  float result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (float) ((arg1)->policePercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_firePercent_set(void * jarg1, float jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->firePercent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Micropolis_firePercent_get(void * jarg1) {
  float jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  float result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (float) ((arg1)->firePercent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_roadValue_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->roadValue = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_roadValue_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->roadValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_policeValue_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->policeValue = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_policeValue_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->policeValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireValue_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->fireValue = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_fireValue_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->fireValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_mustDrawBudget_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mustDrawBudget = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_mustDrawBudget_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->mustDrawBudget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initFundingLevel(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->initFundingLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doBudget(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doBudget();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doBudgetFromMenu(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doBudgetFromMenu();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doBudgetNow(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->doBudgetNow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateBudget(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateBudget();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_showBudgetWindowAndStartWaiting(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->showBudgetWindowAndStartWaiting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setCityTax(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setCityTax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_floodCount_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->floodCount = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_floodCount_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->floodCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeMeltdown(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeMeltdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeFireBombs(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeFireBombs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeEarthquake(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeEarthquake();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeFire(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeFire();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeFlood(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeFlood();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setFire(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->setFire();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_fireBomb(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->fireBomb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityYes_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cityYes = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cityYes_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cityYes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_problemVotes_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->problemVotes;
    for (ii = 0; ii < (size_t)PROBNUM; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_problemVotes_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *)(short *) ((arg1)->problemVotes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_problemOrder_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->problemOrder;
    for (ii = 0; ii < (size_t)CVP_PROBLEM_COMPLAINTS; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_problemOrder_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short *)(short *) ((arg1)->problemOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityPop_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityPop = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityPop_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityPopDelta_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityPopDelta = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityPopDelta_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityPopDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityAssessedValue_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityAssessedValue = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityAssessedValue_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityAssessedValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityClass_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  CityClass arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (CityClass)jarg2; 
  if (arg1) (arg1)->cityClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_cityClass_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  CityClass result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (CityClass) ((arg1)->cityClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityScore_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cityScore = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cityScore_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cityScore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityScoreDelta_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cityScoreDelta = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cityScoreDelta_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cityScoreDelta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_trafficAverage_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->trafficAverage = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_trafficAverage_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->trafficAverage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityEvaluation(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->cityEvaluation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_evalInit(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->evalInit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doScoreCard(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doScoreCard();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_changeEval(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->changeEval();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_scoreDoer(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->scoreDoer();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_countProblems(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int)(arg1)->countProblems();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getProblemNumber(void * jarg1, int jarg2) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getProblemNumber(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getProblemVotes(void * jarg1, int jarg2) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getProblemVotes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_loadFileDir(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->loadFileDir((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_loadFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_saveFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->saveFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_loadScenario(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Scenario)jarg2; 
  (arg1)->loadScenario(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didLoadScenario(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->didLoadScenario();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_loadCity(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadCity((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didLoadCity(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->didLoadCity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didntLoadCity(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->didntLoadCity((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_saveCity(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->saveCity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doSaveCityAs(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doSaveCityAs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didSaveCity(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->didSaveCity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didntSaveCity(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->didntSaveCity((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_saveCityAs(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->saveCityAs((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_terrainTreeLevel_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->terrainTreeLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_terrainTreeLevel_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->terrainTreeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_terrainLakeLevel_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->terrainLakeLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_terrainLakeLevel_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->terrainLakeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_terrainCurveLevel_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->terrainCurveLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_terrainCurveLevel_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->terrainCurveLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_terrainCreateIsland_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->terrainCreateIsland = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_terrainCreateIsland_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->terrainCreateIsland);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateMap(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->generateMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_clearMap(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->clearMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_clearUnnatural(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->clearUnnatural();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeIsland(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeIsland();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_treeSplash(void * jarg1, short jarg2, short jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->treeSplash(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeSingleLake(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Position *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Position const & type is null", 0);
    return ;
  } 
  (arg1)->makeSingleLake((Position const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_plopBRiver(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Position *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Position const & type is null", 0);
    return ;
  } 
  (arg1)->plopBRiver((Position const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_plopSRiver(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Position *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Position const & type is null", 0);
    return ;
  } 
  (arg1)->plopSRiver((Position const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateSomeCity(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->generateSomeCity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_historyInitialized_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->historyInitialized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_historyInitialized_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->historyInitialized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_graph10Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->graph10Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_graph10Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->graph10Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_graph120Max_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->graph120Max = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_graph120Max_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->graph120Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_drawMonth(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  float arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->drawMonth(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_changeCensus(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->changeCensus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_graphDoer(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->graphDoer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initGraphs(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->initGraphs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initGraphMax(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->initGraphMax();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_getHistoryRange(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  short *arg4 = (short *) 0 ;
  short *arg5 = (short *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (short *)jarg4; 
  arg5 = (short *)jarg5; 
  (arg1)->getHistoryRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_getHistory(void * jarg1, int jarg2, int jarg3, int jarg4) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (short)(arg1)->getHistory(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setHistory(void * jarg1, int jarg2, int jarg3, int jarg4, short jarg5) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  short arg5 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (short)jarg5; 
  (arg1)->setHistory(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simLoops_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->simLoops = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_simLoops_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->simLoops);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simPasses_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->simPasses = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_simPasses_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->simPasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simPass_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->simPass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_simPass_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->simPass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simPaused_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->simPaused = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_simPaused_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->simPaused);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simPausedSpeed_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->simPausedSpeed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_simPausedSpeed_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->simPausedSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_tilesAnimated_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tilesAnimated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_tilesAnimated_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->tilesAnimated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doAnimation_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doAnimation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_doAnimation_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->doAnimation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doMessages_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doMessages = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_doMessages_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->doMessages);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doNotices_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doNotices = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_doNotices_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->doNotices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Micropolis_getMicropolisVersion(void * jarg1) {
  char * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (char *)(arg1)->getMicropolisVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simUpdate(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->simUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simTick(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->simTick();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simRobots(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->simRobots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityFileName_set(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cityFileName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Micropolis_cityFileName_get(void * jarg1) {
  char * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (std::string *) & ((arg1)->cityFileName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityName_set(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cityName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Micropolis_cityName_get(void * jarg1) {
  char * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (std::string *) & ((arg1)->cityName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityPopLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityPopLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityPopLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityPopLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_categoryLast_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->categoryLast = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_categoryLast_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->categoryLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_autoGoto_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoGoto = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_autoGoto_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->autoGoto);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessages(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->sendMessages();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_checkGrowth(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->checkGrowth();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doScenarioScore(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Scenario)jarg2; 
  (arg1)->doScenarioScore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessage__SWIG_0(void * jarg1, short jarg2, short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  short arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->sendMessage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessage__SWIG_1(void * jarg1, short jarg2, short jarg3, short jarg4, unsigned int jarg5) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  short arg4 ;
  bool arg5 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->sendMessage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessage__SWIG_2(void * jarg1, short jarg2, short jarg3, short jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->sendMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessage__SWIG_3(void * jarg1, short jarg2, short jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->sendMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_sendMessage__SWIG_4(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->sendMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doMakeSound(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->doMakeSound(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doAutoGoto(void * jarg1, short jarg2, short jarg3, char * jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  short arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->doAutoGoto(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doLoseGame(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doLoseGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doWinGame(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doWinGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_homeDir_set(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->homeDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Micropolis_homeDir_get(void * jarg1) {
  char * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (std::string *) & ((arg1)->homeDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resourceDir_set(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->resourceDir = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Micropolis_resourceDir_get(void * jarg1) {
  char * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (std::string *) & ((arg1)->resourceDir);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resources_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Resource *arg2 = (Resource *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Resource *)jarg2; 
  if (arg1) (arg1)->resources = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_resources_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Resource *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Resource *) ((arg1)->resources);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_stringTables_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  StringTable *arg2 = (StringTable *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (StringTable *)jarg2; 
  if (arg1) (arg1)->stringTables = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_stringTables_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  StringTable *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (StringTable *) ((arg1)->stringTables);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getResource(void * jarg1, char * jarg2, long jarg3) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  Quad arg3 ;
  Resource *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Quad)jarg3; 
  result = (Resource *)(arg1)->getResource((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_getIndString(void * jarg1, char * jarg2, int jarg3, short jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  short arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->getIndString(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_valveFlag_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->valveFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_valveFlag_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->valveFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_crimeRamp_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->crimeRamp = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_crimeRamp_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->crimeRamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_pollutionRamp_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->pollutionRamp = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_pollutionRamp_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->pollutionRamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resCap_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->resCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_resCap_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->resCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comCap_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->comCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_comCap_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->comCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indCap_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->indCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_indCap_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->indCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cashFlow_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cashFlow = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cashFlow_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cashFlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_externalMarket_set(void * jarg1, float jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->externalMarket = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Micropolis_externalMarket_get(void * jarg1) {
  float jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  float result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (float) ((arg1)->externalMarket);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_disasterEvent_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Scenario)jarg2; 
  if (arg1) (arg1)->disasterEvent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_disasterEvent_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Scenario) ((arg1)->disasterEvent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_disasterWait_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->disasterWait = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_disasterWait_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->disasterWait);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_scoreType_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Scenario)jarg2; 
  if (arg1) (arg1)->scoreType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_scoreType_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Scenario) ((arg1)->scoreType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_scoreWait_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->scoreWait = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_scoreWait_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->scoreWait);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_poweredZoneCount_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->poweredZoneCount = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_poweredZoneCount_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->poweredZoneCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_unpoweredZoneCount_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->unpoweredZoneCount = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_unpoweredZoneCount_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->unpoweredZoneCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_newPower_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->newPower = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_newPower_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->newPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityTaxAverage_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->cityTaxAverage = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_cityTaxAverage_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->cityTaxAverage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simCycle_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->simCycle = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_simCycle_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->simCycle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_phaseCycle_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->phaseCycle = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_phaseCycle_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->phaseCycle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_speedCycle_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->speedCycle = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_speedCycle_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->speedCycle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doInitialEval_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doInitialEval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_doInitialEval_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->doInitialEval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_mapSerial_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mapSerial = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_mapSerial_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int) ((arg1)->mapSerial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateFundEffects(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateFundEffects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_spriteList_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  if (arg1) (arg1)->spriteList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_spriteList_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (SimSprite *) ((arg1)->spriteList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_newSprite(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  SimSprite *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (SimSprite *)(arg1)->newSprite((char const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initSprite(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->initSprite(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_destroyAllSprites(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->destroyAllSprites();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_destroySprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->destroySprite(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getSprite(void * jarg1, int jarg2) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  SimSprite *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  result = (SimSprite *)(arg1)->getSprite(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_makeSprite(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SimSprite *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (SimSprite *)(arg1)->makeSprite(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_getChar(void * jarg1, int jarg2, int jarg3) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (short)(arg1)->getChar(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_turnTo(void * jarg1, int jarg2, int jarg3) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (short)(arg1)->turnTo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_tryOther(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->tryOther(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_spriteNotInBounds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  result = (bool)(arg1)->spriteNotInBounds(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_getDir(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (short)(arg1)->getDir(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getDistance(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->getDistance(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_checkSpriteCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  SimSprite *arg3 = (SimSprite *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  arg3 = (SimSprite *)jarg3; 
  result = (bool)(arg1)->checkSpriteCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_moveObjects(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->moveObjects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doTrainSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doTrainSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doCopterSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doCopterSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doAirplaneSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doAirplaneSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doShipSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doShipSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doMonsterSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doMonsterSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doTornadoSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doTornadoSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doExplosionSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doExplosionSprite(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doBusSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->doBusSprite(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_canDriveOn(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->canDriveOn(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_explodeSprite(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  SimSprite *arg2 = (SimSprite *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (SimSprite *)jarg2; 
  (arg1)->explodeSprite(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_checkWet(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->checkWet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_destroyMapTile(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->destroyMapTile(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_startFireInZone(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->startFireInZone(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_startFire(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->startFire(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateTrain(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->generateTrain(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateBus(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->generateBus(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateShip(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->generateShip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeShipHere(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->makeShipHere(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeMonster(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeMonster();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeMonsterAt(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->makeMonsterAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generateCopter(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Position *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Position const & type is null", 0);
    return ;
  } 
  (arg1)->generateCopter((Position const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_generatePlane(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Position *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Position const & type is null", 0);
    return ;
  } 
  (arg1)->generatePlane((Position const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeTornado(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->makeTornado();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeExplosion(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->makeExplosion(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeExplosionAt(void * jarg1, int jarg2, int jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->makeExplosionAt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_totalFunds_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->totalFunds = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_totalFunds_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->totalFunds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_autoBulldoze_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoBulldoze = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_autoBulldoze_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->autoBulldoze);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_autoBudget_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoBudget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_autoBudget_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->autoBudget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_messageTimeLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->messageTimeLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_messageTimeLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->messageTimeLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_gameLevel_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  GameLevel arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (GameLevel)jarg2; 
  if (arg1) (arg1)->gameLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_gameLevel_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  GameLevel result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (GameLevel) ((arg1)->gameLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initSimLoad_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->initSimLoad = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_initSimLoad_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->initSimLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_scenario_set(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Scenario)jarg2; 
  if (arg1) (arg1)->scenario = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_scenario_get(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Scenario result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Scenario) ((arg1)->scenario);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simSpeed_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->simSpeed = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_simSpeed_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->simSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_simSpeedMeta_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->simSpeedMeta = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_simSpeedMeta_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->simSpeedMeta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_enableSound_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableSound = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_enableSound_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->enableSound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_enableDisasters_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableDisasters = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_enableDisasters_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->enableDisasters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_messageNumber_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->messageNumber = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_messageNumber_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->messageNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_evalChanged_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->evalChanged = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_evalChanged_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->evalChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_blinkFlag_set(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->blinkFlag = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_blinkFlag_get(void * jarg1) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (short) ((arg1)->blinkFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_callbackHook_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  CallbackFunction arg2 = (CallbackFunction) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (CallbackFunction)jarg2; 
  if (arg1) (arg1)->callbackHook = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_callbackHook_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  CallbackFunction result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (CallbackFunction) ((arg1)->callbackHook);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_callbackData_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->callbackData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_callbackData_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *) ((arg1)->callbackData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_userData_set(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_userData_get(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_testBounds(int jarg1, int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Micropolis::testBounds(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_spend(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->spend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setFunds(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFunds(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_tickCount(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad)(arg1)->tickCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_newPtr(void * jarg1, int jarg2) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  Ptr result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Ptr)(arg1)->newPtr(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_freePtr(void * jarg1, void * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->freePtr(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doPlayNewCity(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doPlayNewCity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doReallyStartGame(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doReallyStartGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doStartLoad(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doStartLoad();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doStartScenario(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doStartScenario(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_initGame(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->initGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_callback(void * jarg1, char * jarg2, char * jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->callback((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doEarthquake(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doEarthquake(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_invalidateMaps(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->invalidateMaps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeSound__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, int jarg5) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->makeSound((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeSound__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->makeSound((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_makeSound__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->makeSound((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getTile(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTile(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setTile(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTile(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getPowerGrid(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getPowerGrid(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setPowerGrid(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setPowerGrid(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getPowerGridMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getPowerGridMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getPopulationDensity(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getPopulationDensity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setPopulationDensity(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setPopulationDensity(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getPopulationDensityMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getPopulationDensityMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getRateOfGrowth(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getRateOfGrowth(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setRateOfGrowth(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setRateOfGrowth(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getRateOfGrowthMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getRateOfGrowthMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getTrafficDensity(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTrafficDensity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setTrafficDensity(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setTrafficDensity(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getTrafficDensityMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getTrafficDensityMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getPollutionDensity(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getPollutionDensity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setPollutionDensity(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setPollutionDensity(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getPollutionDensityMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getPollutionDensityMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getCrimeRate(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getCrimeRate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setCrimeRate(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setCrimeRate(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getCrimeRateMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getCrimeRateMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getLandValue(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getLandValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setLandValue(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLandValue(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getLandValueMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getLandValueMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getFireCoverage(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getFireCoverage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setFireCoverage(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setFireCoverage(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getFireCoverageMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getFireCoverageMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_getPoliceCoverage(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getPoliceCoverage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setPoliceCoverage(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setPoliceCoverage(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Micropolis_getPoliceCoverageMapBuffer(void * jarg1) {
  void * jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  void *result = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  result = (void *)(arg1)->getPoliceCoverageMapBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_doTool(void * jarg1, int jarg2, short jarg3, short jarg4) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  EditingTool arg2 ;
  short arg3 ;
  short arg4 ;
  ToolResult result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (EditingTool)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  result = (ToolResult)(arg1)->doTool(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_toolDown(void * jarg1, int jarg2, short jarg3, short jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  EditingTool arg2 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (EditingTool)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->toolDown(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_toolDrag(void * jarg1, int jarg2, short jarg3, short jarg4, short jarg5, short jarg6) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  EditingTool arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (EditingTool)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = (short)jarg5; 
  arg6 = (short)jarg6; 
  (arg1)->toolDrag(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_didTool(void * jarg1, char * jarg2, short jarg3, short jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->didTool((char const *)arg2,arg3,arg4);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_makeTrafficAt(void * jarg1, int jarg2, int jarg3, int jarg4) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  ZoneType arg4 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ZoneType)jarg4; 
  result = (short)(arg1)->makeTrafficAt(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Micropolis_makeTraffic(void * jarg1, int jarg2, int jarg3, int jarg4) {
  short jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  int arg3 ;
  ZoneType arg4 ;
  short result;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ZoneType)jarg4; 
  result = (short)(arg1)->makeTraffic(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_mustUpdateFunds_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mustUpdateFunds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_mustUpdateFunds_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->mustUpdateFunds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_mustUpdateOptions_set(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mustUpdateOptions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Micropolis_mustUpdateOptions_get(void * jarg1) {
  unsigned int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (bool) ((arg1)->mustUpdateOptions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityTimeLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityTimeLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityTimeLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityTimeLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityYearLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityYearLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityYearLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityYearLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_cityMonthLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->cityMonthLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_cityMonthLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->cityMonthLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_totalFundsLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->totalFundsLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_totalFundsLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->totalFundsLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->resLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_resLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->resLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_comLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->comLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_comLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->comLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_indLast_set(void * jarg1, long jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (Quad)jarg2; 
  if (arg1) (arg1)->indLast = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_Micropolis_indLast_get(void * jarg1) {
  long jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  Quad result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (Quad) ((arg1)->indLast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doUpdateHeads(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doUpdateHeads();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateMaps(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateMaps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateGraphs(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateGraphs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateEvaluation(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateEvaluation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateHeads(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateHeads();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateFunds(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateFunds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_reallyUpdateFunds(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->reallyUpdateFunds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doTimeStuff(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doTimeStuff();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateDate(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateDate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_showValves(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->showValves();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_drawValve(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->drawValve();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setDemand(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setDemand(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateOptions(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateOptions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateUserInterface(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateUserInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_pause(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_resume(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setSpeed(void * jarg1, short jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  short arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setPasses(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPasses(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setGameLevelFunds(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  GameLevel arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (GameLevel)jarg2; 
  (arg1)->setGameLevelFunds(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setGameLevel(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  GameLevel arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (GameLevel)jarg2; 
  (arg1)->setGameLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_updateGameLevel(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->updateGameLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setCityName(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setCityName((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setCleanCityName(void * jarg1, char * jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->setCleanCityName((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setYear(void * jarg1, int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  int arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setYear(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Micropolis_currentYear(void * jarg1) {
  int jresult ;
  Micropolis *arg1 = (Micropolis *) 0 ;
  int result;
  
  arg1 = (Micropolis *)jarg1; 
  result = (int)(arg1)->currentYear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_doNewGame(void * jarg1) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  (arg1)->doNewGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setEnableDisasters(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableDisasters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setAutoBudget(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoBudget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setAutoBulldoze(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoBulldoze(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setAutoGoto(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoGoto(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setEnableSound(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableSound(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setDoAnimation(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setDoMessages(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoMessages(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_setDoNotices(void * jarg1, unsigned int jarg2) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  bool arg2 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoNotices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Micropolis_getDemands(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Micropolis *arg1 = (Micropolis *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Micropolis *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->getDemands(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ISLAND_RADIUS_get() {
  int jresult ;
  int result;
  
  result = (int)(int)ISLAND_RADIUS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte1__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  Map< Byte,1 > *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (Map< Byte,1 > *)new Map< Byte,1 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte1__SWIG_1(void * jarg1) {
  void * jresult ;
  Map< unsigned char,1 > *arg1 = 0 ;
  Map< Byte,1 > *result = 0 ;
  
  arg1 = (Map< unsigned char,1 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Map< unsigned char,1 > const & type is null", 0);
    return 0;
  } 
  result = (Map< Byte,1 > *)new Map< Byte,1 >((Map< unsigned char,1 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapByte1(void * jarg1) {
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte1_MAP_BLOCKSIZE_get(void * jarg1) {
  int jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_BLOCKSIZE);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte1_MAP_W_get(void * jarg1) {
  int jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_W);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte1_MAP_H_get(void * jarg1) {
  int jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_H);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte1_fill(void * jarg1, unsigned char jarg2) {
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->fill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte1_clear(void * jarg1) {
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte1_set(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte1_get(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,1 > const *)arg1)->get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte1_onMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,1 > const *)arg1)->onMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte1_worldSet(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->worldSet(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte1_worldGet(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,1 > const *)arg1)->worldGet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte1_worldOnMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,1 > const *)arg1)->worldOnMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapByte1_getBase(void * jarg1) {
  void * jresult ;
  Map< Byte,1 > *arg1 = (Map< Byte,1 > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Map< Byte,1 > *)jarg1; 
  result = (unsigned char *)(arg1)->getBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte2__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  Map< Byte,2 > *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (Map< Byte,2 > *)new Map< Byte,2 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte2__SWIG_1(void * jarg1) {
  void * jresult ;
  Map< unsigned char,2 > *arg1 = 0 ;
  Map< Byte,2 > *result = 0 ;
  
  arg1 = (Map< unsigned char,2 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Map< unsigned char,2 > const & type is null", 0);
    return 0;
  } 
  result = (Map< Byte,2 > *)new Map< Byte,2 >((Map< unsigned char,2 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapByte2(void * jarg1) {
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte2_MAP_BLOCKSIZE_get(void * jarg1) {
  int jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_BLOCKSIZE);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte2_MAP_W_get(void * jarg1) {
  int jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_W);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte2_MAP_H_get(void * jarg1) {
  int jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_H);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte2_fill(void * jarg1, unsigned char jarg2) {
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->fill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte2_clear(void * jarg1) {
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte2_set(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte2_get(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,2 > const *)arg1)->get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte2_onMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,2 > const *)arg1)->onMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte2_worldSet(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->worldSet(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte2_worldGet(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,2 > const *)arg1)->worldGet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte2_worldOnMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,2 > const *)arg1)->worldOnMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapByte2_getBase(void * jarg1) {
  void * jresult ;
  Map< Byte,2 > *arg1 = (Map< Byte,2 > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Map< Byte,2 > *)jarg1; 
  result = (unsigned char *)(arg1)->getBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte4__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  Map< Byte,4 > *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (Map< Byte,4 > *)new Map< Byte,4 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapByte4__SWIG_1(void * jarg1) {
  void * jresult ;
  Map< unsigned char,4 > *arg1 = 0 ;
  Map< Byte,4 > *result = 0 ;
  
  arg1 = (Map< unsigned char,4 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Map< unsigned char,4 > const & type is null", 0);
    return 0;
  } 
  result = (Map< Byte,4 > *)new Map< Byte,4 >((Map< unsigned char,4 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapByte4(void * jarg1) {
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte4_MAP_BLOCKSIZE_get(void * jarg1) {
  int jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_BLOCKSIZE);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte4_MAP_W_get(void * jarg1) {
  int jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_W);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapByte4_MAP_H_get(void * jarg1) {
  int jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_H);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte4_fill(void * jarg1, unsigned char jarg2) {
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->fill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte4_clear(void * jarg1) {
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte4_set(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte4_get(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,4 > const *)arg1)->get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte4_onMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,4 > const *)arg1)->onMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapByte4_worldSet(void * jarg1, int jarg2, int jarg3, unsigned char jarg4) {
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->worldSet(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MapByte4_worldGet(void * jarg1, int jarg2, int jarg3) {
  unsigned char jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned char)((Map< Byte,4 > const *)arg1)->worldGet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapByte4_worldOnMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< Byte,4 > const *)arg1)->worldOnMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapByte4_getBase(void * jarg1) {
  void * jresult ;
  Map< Byte,4 > *arg1 = (Map< Byte,4 > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Map< Byte,4 > *)jarg1; 
  result = (unsigned char *)(arg1)->getBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapShort8__SWIG_0(short jarg1) {
  void * jresult ;
  short arg1 ;
  Map< short,8 > *result = 0 ;
  
  arg1 = (short)jarg1; 
  result = (Map< short,8 > *)new Map< short,8 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapShort8__SWIG_1(void * jarg1) {
  void * jresult ;
  Map< short,8 > *arg1 = 0 ;
  Map< short,8 > *result = 0 ;
  
  arg1 = (Map< short,8 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Map< short,8 > const & type is null", 0);
    return 0;
  } 
  result = (Map< short,8 > *)new Map< short,8 >((Map< short,8 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapShort8(void * jarg1) {
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapShort8_MAP_BLOCKSIZE_get(void * jarg1) {
  int jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_BLOCKSIZE);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapShort8_MAP_W_get(void * jarg1) {
  int jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_W);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapShort8_MAP_H_get(void * jarg1) {
  int jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  result = (int)(int) ((arg1)->MAP_H);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapShort8_fill(void * jarg1, short jarg2) {
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  short arg2 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (short)jarg2; 
  (arg1)->fill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapShort8_clear(void * jarg1) {
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapShort8_set(void * jarg1, int jarg2, int jarg3, short jarg4) {
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  short arg4 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT short SWIGSTDCALL CSharp_MapShort8_get(void * jarg1, int jarg2, int jarg3) {
  short jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  short result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (short)((Map< short,8 > const *)arg1)->get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapShort8_onMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< short,8 > const *)arg1)->onMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapShort8_worldSet(void * jarg1, int jarg2, int jarg3, short jarg4) {
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  short arg4 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->worldSet(arg2,arg3,arg4);
}


SWIGEXPORT short SWIGSTDCALL CSharp_MapShort8_worldGet(void * jarg1, int jarg2, int jarg3) {
  short jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  short result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (short)((Map< short,8 > const *)arg1)->worldGet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapShort8_worldOnMap(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Map< short,8 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((Map< short,8 > const *)arg1)->worldOnMap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapShort8_getBase(void * jarg1) {
  void * jresult ;
  Map< short,8 > *arg1 = (Map< short,8 > *) 0 ;
  short *result = 0 ;
  
  arg1 = (Map< short,8 > *)jarg1; 
  result = (short *)(arg1)->getBase();
  jresult = (void *)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

