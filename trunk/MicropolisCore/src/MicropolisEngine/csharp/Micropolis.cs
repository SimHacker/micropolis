/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Micropolis : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Micropolis(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Micropolis obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Micropolis() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          micropolisenginePINVOKE.delete_Micropolis(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Micropolis() : this(micropolisenginePINVOKE.new_Micropolis(), true) {
  }

  public short roadTotal {
    set {
      micropolisenginePINVOKE.Micropolis_roadTotal_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_roadTotal_get(swigCPtr);
      return ret;
    } 
  }

  public short railTotal {
    set {
      micropolisenginePINVOKE.Micropolis_railTotal_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_railTotal_get(swigCPtr);
      return ret;
    } 
  }

  public short firePop {
    set {
      micropolisenginePINVOKE.Micropolis_firePop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_firePop_get(swigCPtr);
      return ret;
    } 
  }

  public short resPop {
    set {
      micropolisenginePINVOKE.Micropolis_resPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_resPop_get(swigCPtr);
      return ret;
    } 
  }

  public short comPop {
    set {
      micropolisenginePINVOKE.Micropolis_comPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_comPop_get(swigCPtr);
      return ret;
    } 
  }

  public short indPop {
    set {
      micropolisenginePINVOKE.Micropolis_indPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_indPop_get(swigCPtr);
      return ret;
    } 
  }

  public short totalPop {
    set {
      micropolisenginePINVOKE.Micropolis_totalPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_totalPop_get(swigCPtr);
      return ret;
    } 
  }

  public short totalPopLast {
    set {
      micropolisenginePINVOKE.Micropolis_totalPopLast_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_totalPopLast_get(swigCPtr);
      return ret;
    } 
  }

  public short resZonePop {
    set {
      micropolisenginePINVOKE.Micropolis_resZonePop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_resZonePop_get(swigCPtr);
      return ret;
    } 
  }

  public short comZonePop {
    set {
      micropolisenginePINVOKE.Micropolis_comZonePop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_comZonePop_get(swigCPtr);
      return ret;
    } 
  }

  public short indZonePop {
    set {
      micropolisenginePINVOKE.Micropolis_indZonePop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_indZonePop_get(swigCPtr);
      return ret;
    } 
  }

  public short totalZonePop {
    set {
      micropolisenginePINVOKE.Micropolis_totalZonePop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_totalZonePop_get(swigCPtr);
      return ret;
    } 
  }

  public short hospitalPop {
    set {
      micropolisenginePINVOKE.Micropolis_hospitalPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_hospitalPop_get(swigCPtr);
      return ret;
    } 
  }

  public short churchPop {
    set {
      micropolisenginePINVOKE.Micropolis_churchPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_churchPop_get(swigCPtr);
      return ret;
    } 
  }

  public short faith {
    set {
      micropolisenginePINVOKE.Micropolis_faith_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_faith_get(swigCPtr);
      return ret;
    } 
  }

  public short stadiumPop {
    set {
      micropolisenginePINVOKE.Micropolis_stadiumPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_stadiumPop_get(swigCPtr);
      return ret;
    } 
  }

  public short policeStationPop {
    set {
      micropolisenginePINVOKE.Micropolis_policeStationPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_policeStationPop_get(swigCPtr);
      return ret;
    } 
  }

  public short fireStationPop {
    set {
      micropolisenginePINVOKE.Micropolis_fireStationPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_fireStationPop_get(swigCPtr);
      return ret;
    } 
  }

  public short coalPowerPop {
    set {
      micropolisenginePINVOKE.Micropolis_coalPowerPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_coalPowerPop_get(swigCPtr);
      return ret;
    } 
  }

  public short nuclearPowerPop {
    set {
      micropolisenginePINVOKE.Micropolis_nuclearPowerPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_nuclearPowerPop_get(swigCPtr);
      return ret;
    } 
  }

  public short seaportPop {
    set {
      micropolisenginePINVOKE.Micropolis_seaportPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_seaportPop_get(swigCPtr);
      return ret;
    } 
  }

  public short airportPop {
    set {
      micropolisenginePINVOKE.Micropolis_airportPop_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_airportPop_get(swigCPtr);
      return ret;
    } 
  }

  public short crimeAverage {
    set {
      micropolisenginePINVOKE.Micropolis_crimeAverage_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_crimeAverage_get(swigCPtr);
      return ret;
    } 
  }

  public short pollutionAverage {
    set {
      micropolisenginePINVOKE.Micropolis_pollutionAverage_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_pollutionAverage_get(swigCPtr);
      return ret;
    } 
  }

  public short landValueAverage {
    set {
      micropolisenginePINVOKE.Micropolis_landValueAverage_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_landValueAverage_get(swigCPtr);
      return ret;
    } 
  }

  public int cityTime {
    set {
      micropolisenginePINVOKE.Micropolis_cityTime_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityTime_get(swigCPtr);
      return ret;
    } 
  }

  public int cityMonth {
    set {
      micropolisenginePINVOKE.Micropolis_cityMonth_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityMonth_get(swigCPtr);
      return ret;
    } 
  }

  public int cityYear {
    set {
      micropolisenginePINVOKE.Micropolis_cityYear_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityYear_get(swigCPtr);
      return ret;
    } 
  }

  public short startingYear {
    set {
      micropolisenginePINVOKE.Micropolis_startingYear_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_startingYear_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_unsigned_short map {
    set {
      micropolisenginePINVOKE.Micropolis_map_set(swigCPtr, SWIGTYPE_p_p_unsigned_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_map_get(swigCPtr);
      SWIGTYPE_p_p_unsigned_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_unsigned_short(cPtr, false);
      return ret;
    } 
  }

  public short resHist10Max {
    set {
      micropolisenginePINVOKE.Micropolis_resHist10Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_resHist10Max_get(swigCPtr);
      return ret;
    } 
  }

  public short resHist120Max {
    set {
      micropolisenginePINVOKE.Micropolis_resHist120Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_resHist120Max_get(swigCPtr);
      return ret;
    } 
  }

  public short comHist10Max {
    set {
      micropolisenginePINVOKE.Micropolis_comHist10Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_comHist10Max_get(swigCPtr);
      return ret;
    } 
  }

  public short comHist120Max {
    set {
      micropolisenginePINVOKE.Micropolis_comHist120Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_comHist120Max_get(swigCPtr);
      return ret;
    } 
  }

  public short indHist10Max {
    set {
      micropolisenginePINVOKE.Micropolis_indHist10Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_indHist10Max_get(swigCPtr);
      return ret;
    } 
  }

  public short indHist120Max {
    set {
      micropolisenginePINVOKE.Micropolis_indHist120Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_indHist120Max_get(swigCPtr);
      return ret;
    } 
  }

  public bool censusChanged {
    set {
      micropolisenginePINVOKE.Micropolis_censusChanged_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_censusChanged_get(swigCPtr);
      return ret;
    } 
  }

  public int roadSpend {
    set {
      micropolisenginePINVOKE.Micropolis_roadSpend_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_roadSpend_get(swigCPtr);
      return ret;
    } 
  }

  public int policeSpend {
    set {
      micropolisenginePINVOKE.Micropolis_policeSpend_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_policeSpend_get(swigCPtr);
      return ret;
    } 
  }

  public int fireSpend {
    set {
      micropolisenginePINVOKE.Micropolis_fireSpend_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_fireSpend_get(swigCPtr);
      return ret;
    } 
  }

  public int roadFund {
    set {
      micropolisenginePINVOKE.Micropolis_roadFund_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_roadFund_get(swigCPtr);
      return ret;
    } 
  }

  public int policeFund {
    set {
      micropolisenginePINVOKE.Micropolis_policeFund_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_policeFund_get(swigCPtr);
      return ret;
    } 
  }

  public int fireFund {
    set {
      micropolisenginePINVOKE.Micropolis_fireFund_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_fireFund_get(swigCPtr);
      return ret;
    } 
  }

  public int roadEffect {
    set {
      micropolisenginePINVOKE.Micropolis_roadEffect_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_roadEffect_get(swigCPtr);
      return ret;
    } 
  }

  public int policeEffect {
    set {
      micropolisenginePINVOKE.Micropolis_policeEffect_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_policeEffect_get(swigCPtr);
      return ret;
    } 
  }

  public int fireEffect {
    set {
      micropolisenginePINVOKE.Micropolis_fireEffect_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_fireEffect_get(swigCPtr);
      return ret;
    } 
  }

  public int taxFund {
    set {
      micropolisenginePINVOKE.Micropolis_taxFund_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_taxFund_get(swigCPtr);
      return ret;
    } 
  }

  public short cityTax {
    set {
      micropolisenginePINVOKE.Micropolis_cityTax_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cityTax_get(swigCPtr);
      return ret;
    } 
  }

  public bool taxFlag {
    set {
      micropolisenginePINVOKE.Micropolis_taxFlag_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_taxFlag_get(swigCPtr);
      return ret;
    } 
  }

  public MapByte2 populationDensityMap {
    set {
      micropolisenginePINVOKE.Micropolis_populationDensityMap_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_populationDensityMap_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 trafficDensityMap {
    set {
      micropolisenginePINVOKE.Micropolis_trafficDensityMap_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_trafficDensityMap_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 pollutionDensityMap {
    set {
      micropolisenginePINVOKE.Micropolis_pollutionDensityMap_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_pollutionDensityMap_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 landValueMap {
    set {
      micropolisenginePINVOKE.Micropolis_landValueMap_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_landValueMap_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 crimeRateMap {
    set {
      micropolisenginePINVOKE.Micropolis_crimeRateMap_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_crimeRateMap_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte4 terrainDensityMap {
    set {
      micropolisenginePINVOKE.Micropolis_terrainDensityMap_set(swigCPtr, MapByte4.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_terrainDensityMap_get(swigCPtr);
      MapByte4 ret = (cPtr == IntPtr.Zero) ? null : new MapByte4(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 tempMap1 {
    set {
      micropolisenginePINVOKE.Micropolis_tempMap1_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_tempMap1_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte2 tempMap2 {
    set {
      micropolisenginePINVOKE.Micropolis_tempMap2_set(swigCPtr, MapByte2.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_tempMap2_get(swigCPtr);
      MapByte2 ret = (cPtr == IntPtr.Zero) ? null : new MapByte2(cPtr, false);
      return ret;
    } 
  }

  public MapByte4 tempMap3 {
    set {
      micropolisenginePINVOKE.Micropolis_tempMap3_set(swigCPtr, MapByte4.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_tempMap3_get(swigCPtr);
      MapByte4 ret = (cPtr == IntPtr.Zero) ? null : new MapByte4(cPtr, false);
      return ret;
    } 
  }

  public MapByte1 powerGridMap {
    set {
      micropolisenginePINVOKE.Micropolis_powerGridMap_set(swigCPtr, MapByte1.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_powerGridMap_get(swigCPtr);
      MapByte1 ret = (cPtr == IntPtr.Zero) ? null : new MapByte1(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 rateOfGrowthMap {
    set {
      micropolisenginePINVOKE.Micropolis_rateOfGrowthMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_rateOfGrowthMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 fireStationMap {
    set {
      micropolisenginePINVOKE.Micropolis_fireStationMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_fireStationMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 fireStationEffectMap {
    set {
      micropolisenginePINVOKE.Micropolis_fireStationEffectMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_fireStationEffectMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 policeStationMap {
    set {
      micropolisenginePINVOKE.Micropolis_policeStationMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_policeStationMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 policeStationEffectMap {
    set {
      micropolisenginePINVOKE.Micropolis_policeStationEffectMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_policeStationEffectMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public MapShort8 comRateMap {
    set {
      micropolisenginePINVOKE.Micropolis_comRateMap_set(swigCPtr, MapShort8.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_comRateMap_get(swigCPtr);
      MapShort8 ret = (cPtr == IntPtr.Zero) ? null : new MapShort8(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short resHist {
    set {
      micropolisenginePINVOKE.Micropolis_resHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_resHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short comHist {
    set {
      micropolisenginePINVOKE.Micropolis_comHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_comHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short indHist {
    set {
      micropolisenginePINVOKE.Micropolis_indHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_indHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short moneyHist {
    set {
      micropolisenginePINVOKE.Micropolis_moneyHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_moneyHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short pollutionHist {
    set {
      micropolisenginePINVOKE.Micropolis_pollutionHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_pollutionHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short crimeHist {
    set {
      micropolisenginePINVOKE.Micropolis_crimeHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_crimeHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short miscHist {
    set {
      micropolisenginePINVOKE.Micropolis_miscHist_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_miscHist_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public void animateTiles() {
    micropolisenginePINVOKE.Micropolis_animateTiles(swigCPtr);
  }

  public static int getNextAnimatedTile(int index) {
    int ret = micropolisenginePINVOKE.Micropolis_getNextAnimatedTile(index);
    return ret;
  }

  public float roadPercent {
    set {
      micropolisenginePINVOKE.Micropolis_roadPercent_set(swigCPtr, value);
    } 
    get {
      float ret = micropolisenginePINVOKE.Micropolis_roadPercent_get(swigCPtr);
      return ret;
    } 
  }

  public float policePercent {
    set {
      micropolisenginePINVOKE.Micropolis_policePercent_set(swigCPtr, value);
    } 
    get {
      float ret = micropolisenginePINVOKE.Micropolis_policePercent_get(swigCPtr);
      return ret;
    } 
  }

  public float firePercent {
    set {
      micropolisenginePINVOKE.Micropolis_firePercent_set(swigCPtr, value);
    } 
    get {
      float ret = micropolisenginePINVOKE.Micropolis_firePercent_get(swigCPtr);
      return ret;
    } 
  }

  public int roadValue {
    set {
      micropolisenginePINVOKE.Micropolis_roadValue_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_roadValue_get(swigCPtr);
      return ret;
    } 
  }

  public int policeValue {
    set {
      micropolisenginePINVOKE.Micropolis_policeValue_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_policeValue_get(swigCPtr);
      return ret;
    } 
  }

  public int fireValue {
    set {
      micropolisenginePINVOKE.Micropolis_fireValue_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_fireValue_get(swigCPtr);
      return ret;
    } 
  }

  public int mustDrawBudget {
    set {
      micropolisenginePINVOKE.Micropolis_mustDrawBudget_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_mustDrawBudget_get(swigCPtr);
      return ret;
    } 
  }

  public void initFundingLevel() {
    micropolisenginePINVOKE.Micropolis_initFundingLevel(swigCPtr);
  }

  public void doBudget() {
    micropolisenginePINVOKE.Micropolis_doBudget(swigCPtr);
  }

  public void doBudgetFromMenu() {
    micropolisenginePINVOKE.Micropolis_doBudgetFromMenu(swigCPtr);
  }

  public void doBudgetNow(bool fromMenu) {
    micropolisenginePINVOKE.Micropolis_doBudgetNow(swigCPtr, fromMenu);
  }

  public void updateBudget() {
    micropolisenginePINVOKE.Micropolis_updateBudget(swigCPtr);
  }

  public void showBudgetWindowAndStartWaiting() {
    micropolisenginePINVOKE.Micropolis_showBudgetWindowAndStartWaiting(swigCPtr);
  }

  public void setCityTax(short tax) {
    micropolisenginePINVOKE.Micropolis_setCityTax(swigCPtr, tax);
  }

  public short floodCount {
    set {
      micropolisenginePINVOKE.Micropolis_floodCount_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_floodCount_get(swigCPtr);
      return ret;
    } 
  }

  public void makeMeltdown() {
    micropolisenginePINVOKE.Micropolis_makeMeltdown(swigCPtr);
  }

  public void makeFireBombs() {
    micropolisenginePINVOKE.Micropolis_makeFireBombs(swigCPtr);
  }

  public void makeEarthquake() {
    micropolisenginePINVOKE.Micropolis_makeEarthquake(swigCPtr);
  }

  public void makeFire() {
    micropolisenginePINVOKE.Micropolis_makeFire(swigCPtr);
  }

  public void makeFlood() {
    micropolisenginePINVOKE.Micropolis_makeFlood(swigCPtr);
  }

  public void setFire() {
    micropolisenginePINVOKE.Micropolis_setFire(swigCPtr);
  }

  public void fireBomb() {
    micropolisenginePINVOKE.Micropolis_fireBomb(swigCPtr);
  }

  public short cityYes {
    set {
      micropolisenginePINVOKE.Micropolis_cityYes_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cityYes_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_short problemVotes {
    set {
      micropolisenginePINVOKE.Micropolis_problemVotes_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_problemVotes_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_short problemOrder {
    set {
      micropolisenginePINVOKE.Micropolis_problemOrder_set(swigCPtr, SWIGTYPE_p_short.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_problemOrder_get(swigCPtr);
      SWIGTYPE_p_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
      return ret;
    } 
  }

  public int cityPop {
    set {
      micropolisenginePINVOKE.Micropolis_cityPop_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityPop_get(swigCPtr);
      return ret;
    } 
  }

  public int cityPopDelta {
    set {
      micropolisenginePINVOKE.Micropolis_cityPopDelta_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityPopDelta_get(swigCPtr);
      return ret;
    } 
  }

  public int cityAssessedValue {
    set {
      micropolisenginePINVOKE.Micropolis_cityAssessedValue_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityAssessedValue_get(swigCPtr);
      return ret;
    } 
  }

  public CityClass cityClass {
    set {
      micropolisenginePINVOKE.Micropolis_cityClass_set(swigCPtr, (int)value);
    } 
    get {
      CityClass ret = (CityClass)micropolisenginePINVOKE.Micropolis_cityClass_get(swigCPtr);
      return ret;
    } 
  }

  public short cityScore {
    set {
      micropolisenginePINVOKE.Micropolis_cityScore_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cityScore_get(swigCPtr);
      return ret;
    } 
  }

  public short cityScoreDelta {
    set {
      micropolisenginePINVOKE.Micropolis_cityScoreDelta_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cityScoreDelta_get(swigCPtr);
      return ret;
    } 
  }

  public short trafficAverage {
    set {
      micropolisenginePINVOKE.Micropolis_trafficAverage_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_trafficAverage_get(swigCPtr);
      return ret;
    } 
  }

  public void cityEvaluation() {
    micropolisenginePINVOKE.Micropolis_cityEvaluation(swigCPtr);
  }

  public void evalInit() {
    micropolisenginePINVOKE.Micropolis_evalInit(swigCPtr);
  }

  public void doScoreCard() {
    micropolisenginePINVOKE.Micropolis_doScoreCard(swigCPtr);
  }

  public void changeEval() {
    micropolisenginePINVOKE.Micropolis_changeEval(swigCPtr);
  }

  public void scoreDoer() {
    micropolisenginePINVOKE.Micropolis_scoreDoer(swigCPtr);
  }

  public int countProblems() {
    int ret = micropolisenginePINVOKE.Micropolis_countProblems(swigCPtr);
    return ret;
  }

  public int getProblemNumber(int i) {
    int ret = micropolisenginePINVOKE.Micropolis_getProblemNumber(swigCPtr, i);
    return ret;
  }

  public int getProblemVotes(int i) {
    int ret = micropolisenginePINVOKE.Micropolis_getProblemVotes(swigCPtr, i);
    return ret;
  }

  public bool loadFileDir(string filename, string dir) {
    bool ret = micropolisenginePINVOKE.Micropolis_loadFileDir(swigCPtr, filename, dir);
    return ret;
  }

  public bool loadFile(string filename) {
    bool ret = micropolisenginePINVOKE.Micropolis_loadFile(swigCPtr, filename);
    return ret;
  }

  public bool saveFile(string filename) {
    bool ret = micropolisenginePINVOKE.Micropolis_saveFile(swigCPtr, filename);
    return ret;
  }

  public void loadScenario(Scenario s) {
    micropolisenginePINVOKE.Micropolis_loadScenario(swigCPtr, (int)s);
  }

  public void didLoadScenario() {
    micropolisenginePINVOKE.Micropolis_didLoadScenario(swigCPtr);
  }

  public bool loadCity(string filename) {
    bool ret = micropolisenginePINVOKE.Micropolis_loadCity(swigCPtr, filename);
    return ret;
  }

  public void didLoadCity() {
    micropolisenginePINVOKE.Micropolis_didLoadCity(swigCPtr);
  }

  public void didntLoadCity(string msg) {
    micropolisenginePINVOKE.Micropolis_didntLoadCity(swigCPtr, msg);
  }

  public void saveCity() {
    micropolisenginePINVOKE.Micropolis_saveCity(swigCPtr);
  }

  public void doSaveCityAs() {
    micropolisenginePINVOKE.Micropolis_doSaveCityAs(swigCPtr);
  }

  public void didSaveCity() {
    micropolisenginePINVOKE.Micropolis_didSaveCity(swigCPtr);
  }

  public void didntSaveCity(string msg) {
    micropolisenginePINVOKE.Micropolis_didntSaveCity(swigCPtr, msg);
  }

  public void saveCityAs(string filename) {
    micropolisenginePINVOKE.Micropolis_saveCityAs(swigCPtr, filename);
  }

  public int terrainTreeLevel {
    set {
      micropolisenginePINVOKE.Micropolis_terrainTreeLevel_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_terrainTreeLevel_get(swigCPtr);
      return ret;
    } 
  }

  public int terrainLakeLevel {
    set {
      micropolisenginePINVOKE.Micropolis_terrainLakeLevel_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_terrainLakeLevel_get(swigCPtr);
      return ret;
    } 
  }

  public int terrainCurveLevel {
    set {
      micropolisenginePINVOKE.Micropolis_terrainCurveLevel_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_terrainCurveLevel_get(swigCPtr);
      return ret;
    } 
  }

  public int terrainCreateIsland {
    set {
      micropolisenginePINVOKE.Micropolis_terrainCreateIsland_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_terrainCreateIsland_get(swigCPtr);
      return ret;
    } 
  }

  public void generateMap() {
    micropolisenginePINVOKE.Micropolis_generateMap(swigCPtr);
  }

  public void clearMap() {
    micropolisenginePINVOKE.Micropolis_clearMap(swigCPtr);
  }

  public void clearUnnatural() {
    micropolisenginePINVOKE.Micropolis_clearUnnatural(swigCPtr);
  }

  public void makeIsland() {
    micropolisenginePINVOKE.Micropolis_makeIsland(swigCPtr);
  }

  public void treeSplash(short xloc, short yloc) {
    micropolisenginePINVOKE.Micropolis_treeSplash(swigCPtr, xloc, yloc);
  }

  public void makeSingleLake(SWIGTYPE_p_Position pos) {
    micropolisenginePINVOKE.Micropolis_makeSingleLake(swigCPtr, SWIGTYPE_p_Position.getCPtr(pos));
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void plopBRiver(SWIGTYPE_p_Position pos) {
    micropolisenginePINVOKE.Micropolis_plopBRiver(swigCPtr, SWIGTYPE_p_Position.getCPtr(pos));
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void plopSRiver(SWIGTYPE_p_Position pos) {
    micropolisenginePINVOKE.Micropolis_plopSRiver(swigCPtr, SWIGTYPE_p_Position.getCPtr(pos));
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void generateSomeCity(int seed) {
    micropolisenginePINVOKE.Micropolis_generateSomeCity(swigCPtr, seed);
  }

  public bool historyInitialized {
    set {
      micropolisenginePINVOKE.Micropolis_historyInitialized_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_historyInitialized_get(swigCPtr);
      return ret;
    } 
  }

  public short graph10Max {
    set {
      micropolisenginePINVOKE.Micropolis_graph10Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_graph10Max_get(swigCPtr);
      return ret;
    } 
  }

  public short graph120Max {
    set {
      micropolisenginePINVOKE.Micropolis_graph120Max_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_graph120Max_get(swigCPtr);
      return ret;
    } 
  }

  public void drawMonth(SWIGTYPE_p_short hist, SWIGTYPE_p_unsigned_char s, float scale) {
    micropolisenginePINVOKE.Micropolis_drawMonth(swigCPtr, SWIGTYPE_p_short.getCPtr(hist), SWIGTYPE_p_unsigned_char.getCPtr(s), scale);
  }

  public void changeCensus() {
    micropolisenginePINVOKE.Micropolis_changeCensus(swigCPtr);
  }

  public void graphDoer() {
    micropolisenginePINVOKE.Micropolis_graphDoer(swigCPtr);
  }

  public void initGraphs() {
    micropolisenginePINVOKE.Micropolis_initGraphs(swigCPtr);
  }

  public void initGraphMax() {
    micropolisenginePINVOKE.Micropolis_initGraphMax(swigCPtr);
  }

  public void getHistoryRange(int historyType, int historyScale, SWIGTYPE_p_short minValResult, SWIGTYPE_p_short maxValResult) {
    micropolisenginePINVOKE.Micropolis_getHistoryRange(swigCPtr, historyType, historyScale, SWIGTYPE_p_short.getCPtr(minValResult), SWIGTYPE_p_short.getCPtr(maxValResult));
  }

  public short getHistory(int historyType, int historyScale, int historyIndex) {
    short ret = micropolisenginePINVOKE.Micropolis_getHistory(swigCPtr, historyType, historyScale, historyIndex);
    return ret;
  }

  public void setHistory(int historyType, int historyScale, int historyIndex, short historyValue) {
    micropolisenginePINVOKE.Micropolis_setHistory(swigCPtr, historyType, historyScale, historyIndex, historyValue);
  }

  public int simLoops {
    set {
      micropolisenginePINVOKE.Micropolis_simLoops_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_simLoops_get(swigCPtr);
      return ret;
    } 
  }

  public int simPasses {
    set {
      micropolisenginePINVOKE.Micropolis_simPasses_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_simPasses_get(swigCPtr);
      return ret;
    } 
  }

  public int simPass {
    set {
      micropolisenginePINVOKE.Micropolis_simPass_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_simPass_get(swigCPtr);
      return ret;
    } 
  }

  public bool simPaused {
    set {
      micropolisenginePINVOKE.Micropolis_simPaused_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_simPaused_get(swigCPtr);
      return ret;
    } 
  }

  public int simPausedSpeed {
    set {
      micropolisenginePINVOKE.Micropolis_simPausedSpeed_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_simPausedSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public bool tilesAnimated {
    set {
      micropolisenginePINVOKE.Micropolis_tilesAnimated_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_tilesAnimated_get(swigCPtr);
      return ret;
    } 
  }

  public bool doAnimation {
    set {
      micropolisenginePINVOKE.Micropolis_doAnimation_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_doAnimation_get(swigCPtr);
      return ret;
    } 
  }

  public bool doMessages {
    set {
      micropolisenginePINVOKE.Micropolis_doMessages_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_doMessages_get(swigCPtr);
      return ret;
    } 
  }

  public bool doNotices {
    set {
      micropolisenginePINVOKE.Micropolis_doNotices_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_doNotices_get(swigCPtr);
      return ret;
    } 
  }

  public string getMicropolisVersion() {
    string ret = micropolisenginePINVOKE.Micropolis_getMicropolisVersion(swigCPtr);
    return ret;
  }

  public void simUpdate() {
    micropolisenginePINVOKE.Micropolis_simUpdate(swigCPtr);
  }

  public void simTick() {
    micropolisenginePINVOKE.Micropolis_simTick(swigCPtr);
  }

  public void simRobots() {
    micropolisenginePINVOKE.Micropolis_simRobots(swigCPtr);
  }

  public string cityFileName {
    set {
      micropolisenginePINVOKE.Micropolis_cityFileName_set(swigCPtr, value);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = micropolisenginePINVOKE.Micropolis_cityFileName_get(swigCPtr);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string cityName {
    set {
      micropolisenginePINVOKE.Micropolis_cityName_set(swigCPtr, value);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = micropolisenginePINVOKE.Micropolis_cityName_get(swigCPtr);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int cityPopLast {
    set {
      micropolisenginePINVOKE.Micropolis_cityPopLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityPopLast_get(swigCPtr);
      return ret;
    } 
  }

  public short categoryLast {
    set {
      micropolisenginePINVOKE.Micropolis_categoryLast_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_categoryLast_get(swigCPtr);
      return ret;
    } 
  }

  public bool autoGoto {
    set {
      micropolisenginePINVOKE.Micropolis_autoGoto_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_autoGoto_get(swigCPtr);
      return ret;
    } 
  }

  public void sendMessages() {
    micropolisenginePINVOKE.Micropolis_sendMessages(swigCPtr);
  }

  public void checkGrowth() {
    micropolisenginePINVOKE.Micropolis_checkGrowth(swigCPtr);
  }

  public void doScenarioScore(Scenario type) {
    micropolisenginePINVOKE.Micropolis_doScenarioScore(swigCPtr, (int)type);
  }

  public void sendMessage(short Mnum, short x, short y, bool picture, bool important) {
    micropolisenginePINVOKE.Micropolis_sendMessage__SWIG_0(swigCPtr, Mnum, x, y, picture, important);
  }

  public void sendMessage(short Mnum, short x, short y, bool picture) {
    micropolisenginePINVOKE.Micropolis_sendMessage__SWIG_1(swigCPtr, Mnum, x, y, picture);
  }

  public void sendMessage(short Mnum, short x, short y) {
    micropolisenginePINVOKE.Micropolis_sendMessage__SWIG_2(swigCPtr, Mnum, x, y);
  }

  public void sendMessage(short Mnum, short x) {
    micropolisenginePINVOKE.Micropolis_sendMessage__SWIG_3(swigCPtr, Mnum, x);
  }

  public void sendMessage(short Mnum) {
    micropolisenginePINVOKE.Micropolis_sendMessage__SWIG_4(swigCPtr, Mnum);
  }

  public void doMakeSound(int mesgNum, int x, int y) {
    micropolisenginePINVOKE.Micropolis_doMakeSound(swigCPtr, mesgNum, x, y);
  }

  public void doAutoGoto(short x, short y, string msg) {
    micropolisenginePINVOKE.Micropolis_doAutoGoto(swigCPtr, x, y, msg);
  }

  public void doLoseGame() {
    micropolisenginePINVOKE.Micropolis_doLoseGame(swigCPtr);
  }

  public void doWinGame() {
    micropolisenginePINVOKE.Micropolis_doWinGame(swigCPtr);
  }

  public string homeDir {
    set {
      micropolisenginePINVOKE.Micropolis_homeDir_set(swigCPtr, value);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = micropolisenginePINVOKE.Micropolis_homeDir_get(swigCPtr);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string resourceDir {
    set {
      micropolisenginePINVOKE.Micropolis_resourceDir_set(swigCPtr, value);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = micropolisenginePINVOKE.Micropolis_resourceDir_get(swigCPtr);
      if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Resource resources {
    set {
      micropolisenginePINVOKE.Micropolis_resources_set(swigCPtr, Resource.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_resources_get(swigCPtr);
      Resource ret = (cPtr == IntPtr.Zero) ? null : new Resource(cPtr, false);
      return ret;
    } 
  }

  public StringTable stringTables {
    set {
      micropolisenginePINVOKE.Micropolis_stringTables_set(swigCPtr, StringTable.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_stringTables_get(swigCPtr);
      StringTable ret = (cPtr == IntPtr.Zero) ? null : new StringTable(cPtr, false);
      return ret;
    } 
  }

  public Resource getResource(string name, int id) {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getResource(swigCPtr, name, id);
    Resource ret = (cPtr == IntPtr.Zero) ? null : new Resource(cPtr, false);
    return ret;
  }

  public void getIndString(string str, int id, short num) {
    micropolisenginePINVOKE.Micropolis_getIndString(swigCPtr, str, id, num);
  }

  public bool valveFlag {
    set {
      micropolisenginePINVOKE.Micropolis_valveFlag_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_valveFlag_get(swigCPtr);
      return ret;
    } 
  }

  public short crimeRamp {
    set {
      micropolisenginePINVOKE.Micropolis_crimeRamp_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_crimeRamp_get(swigCPtr);
      return ret;
    } 
  }

  public short pollutionRamp {
    set {
      micropolisenginePINVOKE.Micropolis_pollutionRamp_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_pollutionRamp_get(swigCPtr);
      return ret;
    } 
  }

  public bool resCap {
    set {
      micropolisenginePINVOKE.Micropolis_resCap_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_resCap_get(swigCPtr);
      return ret;
    } 
  }

  public bool comCap {
    set {
      micropolisenginePINVOKE.Micropolis_comCap_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_comCap_get(swigCPtr);
      return ret;
    } 
  }

  public bool indCap {
    set {
      micropolisenginePINVOKE.Micropolis_indCap_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_indCap_get(swigCPtr);
      return ret;
    } 
  }

  public short cashFlow {
    set {
      micropolisenginePINVOKE.Micropolis_cashFlow_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cashFlow_get(swigCPtr);
      return ret;
    } 
  }

  public float externalMarket {
    set {
      micropolisenginePINVOKE.Micropolis_externalMarket_set(swigCPtr, value);
    } 
    get {
      float ret = micropolisenginePINVOKE.Micropolis_externalMarket_get(swigCPtr);
      return ret;
    } 
  }

  public Scenario disasterEvent {
    set {
      micropolisenginePINVOKE.Micropolis_disasterEvent_set(swigCPtr, (int)value);
    } 
    get {
      Scenario ret = (Scenario)micropolisenginePINVOKE.Micropolis_disasterEvent_get(swigCPtr);
      return ret;
    } 
  }

  public short disasterWait {
    set {
      micropolisenginePINVOKE.Micropolis_disasterWait_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_disasterWait_get(swigCPtr);
      return ret;
    } 
  }

  public Scenario scoreType {
    set {
      micropolisenginePINVOKE.Micropolis_scoreType_set(swigCPtr, (int)value);
    } 
    get {
      Scenario ret = (Scenario)micropolisenginePINVOKE.Micropolis_scoreType_get(swigCPtr);
      return ret;
    } 
  }

  public short scoreWait {
    set {
      micropolisenginePINVOKE.Micropolis_scoreWait_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_scoreWait_get(swigCPtr);
      return ret;
    } 
  }

  public short poweredZoneCount {
    set {
      micropolisenginePINVOKE.Micropolis_poweredZoneCount_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_poweredZoneCount_get(swigCPtr);
      return ret;
    } 
  }

  public short unpoweredZoneCount {
    set {
      micropolisenginePINVOKE.Micropolis_unpoweredZoneCount_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_unpoweredZoneCount_get(swigCPtr);
      return ret;
    } 
  }

  public bool newPower {
    set {
      micropolisenginePINVOKE.Micropolis_newPower_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_newPower_get(swigCPtr);
      return ret;
    } 
  }

  public short cityTaxAverage {
    set {
      micropolisenginePINVOKE.Micropolis_cityTaxAverage_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_cityTaxAverage_get(swigCPtr);
      return ret;
    } 
  }

  public short simCycle {
    set {
      micropolisenginePINVOKE.Micropolis_simCycle_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_simCycle_get(swigCPtr);
      return ret;
    } 
  }

  public short phaseCycle {
    set {
      micropolisenginePINVOKE.Micropolis_phaseCycle_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_phaseCycle_get(swigCPtr);
      return ret;
    } 
  }

  public short speedCycle {
    set {
      micropolisenginePINVOKE.Micropolis_speedCycle_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_speedCycle_get(swigCPtr);
      return ret;
    } 
  }

  public bool doInitialEval {
    set {
      micropolisenginePINVOKE.Micropolis_doInitialEval_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_doInitialEval_get(swigCPtr);
      return ret;
    } 
  }

  public int mapSerial {
    set {
      micropolisenginePINVOKE.Micropolis_mapSerial_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_mapSerial_get(swigCPtr);
      return ret;
    } 
  }

  public void updateFundEffects() {
    micropolisenginePINVOKE.Micropolis_updateFundEffects(swigCPtr);
  }

  public SimSprite spriteList {
    set {
      micropolisenginePINVOKE.Micropolis_spriteList_set(swigCPtr, SimSprite.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_spriteList_get(swigCPtr);
      SimSprite ret = (cPtr == IntPtr.Zero) ? null : new SimSprite(cPtr, false);
      return ret;
    } 
  }

  public SimSprite newSprite(string name, int type, int x, int y) {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_newSprite(swigCPtr, name, type, x, y);
    SimSprite ret = (cPtr == IntPtr.Zero) ? null : new SimSprite(cPtr, false);
    return ret;
  }

  public void initSprite(SimSprite sprite, int x, int y) {
    micropolisenginePINVOKE.Micropolis_initSprite(swigCPtr, SimSprite.getCPtr(sprite), x, y);
  }

  public void destroyAllSprites() {
    micropolisenginePINVOKE.Micropolis_destroyAllSprites(swigCPtr);
  }

  public void destroySprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_destroySprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public SimSprite getSprite(int type) {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getSprite(swigCPtr, type);
    SimSprite ret = (cPtr == IntPtr.Zero) ? null : new SimSprite(cPtr, false);
    return ret;
  }

  public SimSprite makeSprite(int type, int x, int y) {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_makeSprite(swigCPtr, type, x, y);
    SimSprite ret = (cPtr == IntPtr.Zero) ? null : new SimSprite(cPtr, false);
    return ret;
  }

  public short getChar(int x, int y) {
    short ret = micropolisenginePINVOKE.Micropolis_getChar(swigCPtr, x, y);
    return ret;
  }

  public short turnTo(int p, int d) {
    short ret = micropolisenginePINVOKE.Micropolis_turnTo(swigCPtr, p, d);
    return ret;
  }

  public bool tryOther(int Tpoo, int Told, int Tnew) {
    bool ret = micropolisenginePINVOKE.Micropolis_tryOther(swigCPtr, Tpoo, Told, Tnew);
    return ret;
  }

  public bool spriteNotInBounds(SimSprite sprite) {
    bool ret = micropolisenginePINVOKE.Micropolis_spriteNotInBounds(swigCPtr, SimSprite.getCPtr(sprite));
    return ret;
  }

  public short getDir(int orgX, int orgY, int desX, int desY) {
    short ret = micropolisenginePINVOKE.Micropolis_getDir(swigCPtr, orgX, orgY, desX, desY);
    return ret;
  }

  public int getDistance(int x1, int y1, int x2, int y2) {
    int ret = micropolisenginePINVOKE.Micropolis_getDistance(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public bool checkSpriteCollision(SimSprite s1, SimSprite s2) {
    bool ret = micropolisenginePINVOKE.Micropolis_checkSpriteCollision(swigCPtr, SimSprite.getCPtr(s1), SimSprite.getCPtr(s2));
    return ret;
  }

  public void moveObjects() {
    micropolisenginePINVOKE.Micropolis_moveObjects(swigCPtr);
  }

  public void doTrainSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doTrainSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doCopterSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doCopterSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doAirplaneSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doAirplaneSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doShipSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doShipSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doMonsterSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doMonsterSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doTornadoSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doTornadoSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doExplosionSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doExplosionSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public void doBusSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_doBusSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public int canDriveOn(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_canDriveOn(swigCPtr, x, y);
    return ret;
  }

  public void explodeSprite(SimSprite sprite) {
    micropolisenginePINVOKE.Micropolis_explodeSprite(swigCPtr, SimSprite.getCPtr(sprite));
  }

  public bool checkWet(int x) {
    bool ret = micropolisenginePINVOKE.Micropolis_checkWet(swigCPtr, x);
    return ret;
  }

  public void destroyMapTile(int ox, int oy) {
    micropolisenginePINVOKE.Micropolis_destroyMapTile(swigCPtr, ox, oy);
  }

  public void startFireInZone(int Xloc, int Yloc, int ch) {
    micropolisenginePINVOKE.Micropolis_startFireInZone(swigCPtr, Xloc, Yloc, ch);
  }

  public void startFire(int x, int y) {
    micropolisenginePINVOKE.Micropolis_startFire(swigCPtr, x, y);
  }

  public void generateTrain(int x, int y) {
    micropolisenginePINVOKE.Micropolis_generateTrain(swigCPtr, x, y);
  }

  public void generateBus(int x, int y) {
    micropolisenginePINVOKE.Micropolis_generateBus(swigCPtr, x, y);
  }

  public void generateShip() {
    micropolisenginePINVOKE.Micropolis_generateShip(swigCPtr);
  }

  public void makeShipHere(int x, int y) {
    micropolisenginePINVOKE.Micropolis_makeShipHere(swigCPtr, x, y);
  }

  public void makeMonster() {
    micropolisenginePINVOKE.Micropolis_makeMonster(swigCPtr);
  }

  public void makeMonsterAt(int x, int y) {
    micropolisenginePINVOKE.Micropolis_makeMonsterAt(swigCPtr, x, y);
  }

  public void generateCopter(SWIGTYPE_p_Position pos) {
    micropolisenginePINVOKE.Micropolis_generateCopter(swigCPtr, SWIGTYPE_p_Position.getCPtr(pos));
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void generatePlane(SWIGTYPE_p_Position pos) {
    micropolisenginePINVOKE.Micropolis_generatePlane(swigCPtr, SWIGTYPE_p_Position.getCPtr(pos));
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void makeTornado() {
    micropolisenginePINVOKE.Micropolis_makeTornado(swigCPtr);
  }

  public void makeExplosion(int x, int y) {
    micropolisenginePINVOKE.Micropolis_makeExplosion(swigCPtr, x, y);
  }

  public void makeExplosionAt(int x, int y) {
    micropolisenginePINVOKE.Micropolis_makeExplosionAt(swigCPtr, x, y);
  }

  public int totalFunds {
    set {
      micropolisenginePINVOKE.Micropolis_totalFunds_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_totalFunds_get(swigCPtr);
      return ret;
    } 
  }

  public bool autoBulldoze {
    set {
      micropolisenginePINVOKE.Micropolis_autoBulldoze_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_autoBulldoze_get(swigCPtr);
      return ret;
    } 
  }

  public bool autoBudget {
    set {
      micropolisenginePINVOKE.Micropolis_autoBudget_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_autoBudget_get(swigCPtr);
      return ret;
    } 
  }

  public int messageTimeLast {
    set {
      micropolisenginePINVOKE.Micropolis_messageTimeLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_messageTimeLast_get(swigCPtr);
      return ret;
    } 
  }

  public GameLevel gameLevel {
    set {
      micropolisenginePINVOKE.Micropolis_gameLevel_set(swigCPtr, (int)value);
    } 
    get {
      GameLevel ret = (GameLevel)micropolisenginePINVOKE.Micropolis_gameLevel_get(swigCPtr);
      return ret;
    } 
  }

  public short initSimLoad {
    set {
      micropolisenginePINVOKE.Micropolis_initSimLoad_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_initSimLoad_get(swigCPtr);
      return ret;
    } 
  }

  public Scenario scenario {
    set {
      micropolisenginePINVOKE.Micropolis_scenario_set(swigCPtr, (int)value);
    } 
    get {
      Scenario ret = (Scenario)micropolisenginePINVOKE.Micropolis_scenario_get(swigCPtr);
      return ret;
    } 
  }

  public short simSpeed {
    set {
      micropolisenginePINVOKE.Micropolis_simSpeed_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_simSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public short simSpeedMeta {
    set {
      micropolisenginePINVOKE.Micropolis_simSpeedMeta_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_simSpeedMeta_get(swigCPtr);
      return ret;
    } 
  }

  public bool enableSound {
    set {
      micropolisenginePINVOKE.Micropolis_enableSound_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_enableSound_get(swigCPtr);
      return ret;
    } 
  }

  public bool enableDisasters {
    set {
      micropolisenginePINVOKE.Micropolis_enableDisasters_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_enableDisasters_get(swigCPtr);
      return ret;
    } 
  }

  public short messageNumber {
    set {
      micropolisenginePINVOKE.Micropolis_messageNumber_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_messageNumber_get(swigCPtr);
      return ret;
    } 
  }

  public bool evalChanged {
    set {
      micropolisenginePINVOKE.Micropolis_evalChanged_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_evalChanged_get(swigCPtr);
      return ret;
    } 
  }

  public short blinkFlag {
    set {
      micropolisenginePINVOKE.Micropolis_blinkFlag_set(swigCPtr, value);
    } 
    get {
      short ret = micropolisenginePINVOKE.Micropolis_blinkFlag_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_f_p_Micropolis_p_void_p_q_const__char_p_q_const__char_va_list__void callbackHook {
    set {
      micropolisenginePINVOKE.Micropolis_callbackHook_set(swigCPtr, SWIGTYPE_p_f_p_Micropolis_p_void_p_q_const__char_p_q_const__char_va_list__void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_callbackHook_get(swigCPtr);
      SWIGTYPE_p_f_p_Micropolis_p_void_p_q_const__char_p_q_const__char_va_list__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_Micropolis_p_void_p_q_const__char_p_q_const__char_va_list__void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void callbackData {
    set {
      micropolisenginePINVOKE.Micropolis_callbackData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_callbackData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void userData {
    set {
      micropolisenginePINVOKE.Micropolis_userData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Micropolis_userData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public static bool testBounds(int wx, int wy) {
    bool ret = micropolisenginePINVOKE.Micropolis_testBounds(wx, wy);
    return ret;
  }

  public void spend(int dollars) {
    micropolisenginePINVOKE.Micropolis_spend(swigCPtr, dollars);
  }

  public void setFunds(int dollars) {
    micropolisenginePINVOKE.Micropolis_setFunds(swigCPtr, dollars);
  }

  public int tickCount() {
    int ret = micropolisenginePINVOKE.Micropolis_tickCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char newPtr(int size) {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_newPtr(swigCPtr, size);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public void freePtr(SWIGTYPE_p_void data) {
    micropolisenginePINVOKE.Micropolis_freePtr(swigCPtr, SWIGTYPE_p_void.getCPtr(data));
  }

  public void doPlayNewCity() {
    micropolisenginePINVOKE.Micropolis_doPlayNewCity(swigCPtr);
  }

  public void doReallyStartGame() {
    micropolisenginePINVOKE.Micropolis_doReallyStartGame(swigCPtr);
  }

  public void doStartLoad() {
    micropolisenginePINVOKE.Micropolis_doStartLoad(swigCPtr);
  }

  public void doStartScenario(int scenario) {
    micropolisenginePINVOKE.Micropolis_doStartScenario(swigCPtr, scenario);
  }

  public void initGame() {
    micropolisenginePINVOKE.Micropolis_initGame(swigCPtr);
  }

  public void callback(string name, string arg1) {
    micropolisenginePINVOKE.Micropolis_callback(swigCPtr, name, arg1);
  }

  public void doEarthquake(int strength) {
    micropolisenginePINVOKE.Micropolis_doEarthquake(swigCPtr, strength);
  }

  public void invalidateMaps() {
    micropolisenginePINVOKE.Micropolis_invalidateMaps(swigCPtr);
  }

  public void makeSound(string channel, string sound, int x, int y) {
    micropolisenginePINVOKE.Micropolis_makeSound__SWIG_0(swigCPtr, channel, sound, x, y);
  }

  public void makeSound(string channel, string sound, int x) {
    micropolisenginePINVOKE.Micropolis_makeSound__SWIG_1(swigCPtr, channel, sound, x);
  }

  public void makeSound(string channel, string sound) {
    micropolisenginePINVOKE.Micropolis_makeSound__SWIG_2(swigCPtr, channel, sound);
  }

  public int getTile(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getTile(swigCPtr, x, y);
    return ret;
  }

  public void setTile(int x, int y, int tile) {
    micropolisenginePINVOKE.Micropolis_setTile(swigCPtr, x, y, tile);
  }

  public SWIGTYPE_p_void getMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getPowerGrid(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getPowerGrid(swigCPtr, x, y);
    return ret;
  }

  public void setPowerGrid(int x, int y, int power) {
    micropolisenginePINVOKE.Micropolis_setPowerGrid(swigCPtr, x, y, power);
  }

  public SWIGTYPE_p_void getPowerGridMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getPowerGridMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getPopulationDensity(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getPopulationDensity(swigCPtr, x, y);
    return ret;
  }

  public void setPopulationDensity(int x, int y, int density) {
    micropolisenginePINVOKE.Micropolis_setPopulationDensity(swigCPtr, x, y, density);
  }

  public SWIGTYPE_p_void getPopulationDensityMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getPopulationDensityMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getRateOfGrowth(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getRateOfGrowth(swigCPtr, x, y);
    return ret;
  }

  public void setRateOfGrowth(int x, int y, int rate) {
    micropolisenginePINVOKE.Micropolis_setRateOfGrowth(swigCPtr, x, y, rate);
  }

  public SWIGTYPE_p_void getRateOfGrowthMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getRateOfGrowthMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getTrafficDensity(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getTrafficDensity(swigCPtr, x, y);
    return ret;
  }

  public void setTrafficDensity(int x, int y, int density) {
    micropolisenginePINVOKE.Micropolis_setTrafficDensity(swigCPtr, x, y, density);
  }

  public SWIGTYPE_p_void getTrafficDensityMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getTrafficDensityMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getPollutionDensity(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getPollutionDensity(swigCPtr, x, y);
    return ret;
  }

  public void setPollutionDensity(int x, int y, int density) {
    micropolisenginePINVOKE.Micropolis_setPollutionDensity(swigCPtr, x, y, density);
  }

  public SWIGTYPE_p_void getPollutionDensityMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getPollutionDensityMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getCrimeRate(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getCrimeRate(swigCPtr, x, y);
    return ret;
  }

  public void setCrimeRate(int x, int y, int rate) {
    micropolisenginePINVOKE.Micropolis_setCrimeRate(swigCPtr, x, y, rate);
  }

  public SWIGTYPE_p_void getCrimeRateMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getCrimeRateMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getLandValue(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getLandValue(swigCPtr, x, y);
    return ret;
  }

  public void setLandValue(int x, int y, int value) {
    micropolisenginePINVOKE.Micropolis_setLandValue(swigCPtr, x, y, value);
  }

  public SWIGTYPE_p_void getLandValueMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getLandValueMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getFireCoverage(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getFireCoverage(swigCPtr, x, y);
    return ret;
  }

  public void setFireCoverage(int x, int y, int coverage) {
    micropolisenginePINVOKE.Micropolis_setFireCoverage(swigCPtr, x, y, coverage);
  }

  public SWIGTYPE_p_void getFireCoverageMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getFireCoverageMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public int getPoliceCoverage(int x, int y) {
    int ret = micropolisenginePINVOKE.Micropolis_getPoliceCoverage(swigCPtr, x, y);
    return ret;
  }

  public void setPoliceCoverage(int x, int y, int coverage) {
    micropolisenginePINVOKE.Micropolis_setPoliceCoverage(swigCPtr, x, y, coverage);
  }

  public SWIGTYPE_p_void getPoliceCoverageMapBuffer() {
    IntPtr cPtr = micropolisenginePINVOKE.Micropolis_getPoliceCoverageMapBuffer(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public ToolResult doTool(EditingTool tool, short tileX, short tileY) {
    ToolResult ret = (ToolResult)micropolisenginePINVOKE.Micropolis_doTool(swigCPtr, (int)tool, tileX, tileY);
    return ret;
  }

  public void toolDown(EditingTool tool, short tileX, short tileY) {
    micropolisenginePINVOKE.Micropolis_toolDown(swigCPtr, (int)tool, tileX, tileY);
  }

  public void toolDrag(EditingTool tool, short fromX, short fromY, short toX, short toY) {
    micropolisenginePINVOKE.Micropolis_toolDrag(swigCPtr, (int)tool, fromX, fromY, toX, toY);
  }

  public void didTool(string name, short x, short y) {
    micropolisenginePINVOKE.Micropolis_didTool(swigCPtr, name, x, y);
  }

  public short makeTrafficAt(int x, int y, ZoneType dest) {
    short ret = micropolisenginePINVOKE.Micropolis_makeTrafficAt(swigCPtr, x, y, (int)dest);
    return ret;
  }

  public short makeTraffic(int x, int y, ZoneType dest) {
    short ret = micropolisenginePINVOKE.Micropolis_makeTraffic(swigCPtr, x, y, (int)dest);
    return ret;
  }

  public bool mustUpdateFunds {
    set {
      micropolisenginePINVOKE.Micropolis_mustUpdateFunds_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_mustUpdateFunds_get(swigCPtr);
      return ret;
    } 
  }

  public bool mustUpdateOptions {
    set {
      micropolisenginePINVOKE.Micropolis_mustUpdateOptions_set(swigCPtr, value);
    } 
    get {
      bool ret = micropolisenginePINVOKE.Micropolis_mustUpdateOptions_get(swigCPtr);
      return ret;
    } 
  }

  public int cityTimeLast {
    set {
      micropolisenginePINVOKE.Micropolis_cityTimeLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityTimeLast_get(swigCPtr);
      return ret;
    } 
  }

  public int cityYearLast {
    set {
      micropolisenginePINVOKE.Micropolis_cityYearLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityYearLast_get(swigCPtr);
      return ret;
    } 
  }

  public int cityMonthLast {
    set {
      micropolisenginePINVOKE.Micropolis_cityMonthLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_cityMonthLast_get(swigCPtr);
      return ret;
    } 
  }

  public int totalFundsLast {
    set {
      micropolisenginePINVOKE.Micropolis_totalFundsLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_totalFundsLast_get(swigCPtr);
      return ret;
    } 
  }

  public int resLast {
    set {
      micropolisenginePINVOKE.Micropolis_resLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_resLast_get(swigCPtr);
      return ret;
    } 
  }

  public int comLast {
    set {
      micropolisenginePINVOKE.Micropolis_comLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_comLast_get(swigCPtr);
      return ret;
    } 
  }

  public int indLast {
    set {
      micropolisenginePINVOKE.Micropolis_indLast_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Micropolis_indLast_get(swigCPtr);
      return ret;
    } 
  }

  public void doUpdateHeads() {
    micropolisenginePINVOKE.Micropolis_doUpdateHeads(swigCPtr);
  }

  public void updateMaps() {
    micropolisenginePINVOKE.Micropolis_updateMaps(swigCPtr);
  }

  public void updateGraphs() {
    micropolisenginePINVOKE.Micropolis_updateGraphs(swigCPtr);
  }

  public void updateEvaluation() {
    micropolisenginePINVOKE.Micropolis_updateEvaluation(swigCPtr);
  }

  public void updateHeads() {
    micropolisenginePINVOKE.Micropolis_updateHeads(swigCPtr);
  }

  public void updateFunds() {
    micropolisenginePINVOKE.Micropolis_updateFunds(swigCPtr);
  }

  public void reallyUpdateFunds() {
    micropolisenginePINVOKE.Micropolis_reallyUpdateFunds(swigCPtr);
  }

  public void doTimeStuff() {
    micropolisenginePINVOKE.Micropolis_doTimeStuff(swigCPtr);
  }

  public void updateDate() {
    micropolisenginePINVOKE.Micropolis_updateDate(swigCPtr);
  }

  public void showValves() {
    micropolisenginePINVOKE.Micropolis_showValves(swigCPtr);
  }

  public void drawValve() {
    micropolisenginePINVOKE.Micropolis_drawValve(swigCPtr);
  }

  public void setDemand(float r, float c, float i) {
    micropolisenginePINVOKE.Micropolis_setDemand(swigCPtr, r, c, i);
  }

  public void updateOptions() {
    micropolisenginePINVOKE.Micropolis_updateOptions(swigCPtr);
  }

  public void updateUserInterface() {
    micropolisenginePINVOKE.Micropolis_updateUserInterface(swigCPtr);
  }

  public void pause() {
    micropolisenginePINVOKE.Micropolis_pause(swigCPtr);
  }

  public void resume() {
    micropolisenginePINVOKE.Micropolis_resume(swigCPtr);
  }

  public void setSpeed(short speed) {
    micropolisenginePINVOKE.Micropolis_setSpeed(swigCPtr, speed);
  }

  public void setPasses(int passes) {
    micropolisenginePINVOKE.Micropolis_setPasses(swigCPtr, passes);
  }

  public void setGameLevelFunds(GameLevel level) {
    micropolisenginePINVOKE.Micropolis_setGameLevelFunds(swigCPtr, (int)level);
  }

  public void setGameLevel(GameLevel level) {
    micropolisenginePINVOKE.Micropolis_setGameLevel(swigCPtr, (int)level);
  }

  public void updateGameLevel() {
    micropolisenginePINVOKE.Micropolis_updateGameLevel(swigCPtr);
  }

  public void setCityName(string name) {
    micropolisenginePINVOKE.Micropolis_setCityName(swigCPtr, name);
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCleanCityName(string name) {
    micropolisenginePINVOKE.Micropolis_setCleanCityName(swigCPtr, name);
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setYear(int year) {
    micropolisenginePINVOKE.Micropolis_setYear(swigCPtr, year);
  }

  public int currentYear() {
    int ret = micropolisenginePINVOKE.Micropolis_currentYear(swigCPtr);
    return ret;
  }

  public void doNewGame() {
    micropolisenginePINVOKE.Micropolis_doNewGame(swigCPtr);
  }

  public void setEnableDisasters(bool value) {
    micropolisenginePINVOKE.Micropolis_setEnableDisasters(swigCPtr, value);
  }

  public void setAutoBudget(bool value) {
    micropolisenginePINVOKE.Micropolis_setAutoBudget(swigCPtr, value);
  }

  public void setAutoBulldoze(bool value) {
    micropolisenginePINVOKE.Micropolis_setAutoBulldoze(swigCPtr, value);
  }

  public void setAutoGoto(bool value) {
    micropolisenginePINVOKE.Micropolis_setAutoGoto(swigCPtr, value);
  }

  public void setEnableSound(bool value) {
    micropolisenginePINVOKE.Micropolis_setEnableSound(swigCPtr, value);
  }

  public void setDoAnimation(bool value) {
    micropolisenginePINVOKE.Micropolis_setDoAnimation(swigCPtr, value);
  }

  public void setDoMessages(bool value) {
    micropolisenginePINVOKE.Micropolis_setDoMessages(swigCPtr, value);
  }

  public void setDoNotices(bool value) {
    micropolisenginePINVOKE.Micropolis_setDoNotices(swigCPtr, value);
  }

  public void getDemands(SWIGTYPE_p_float resDemandResult, SWIGTYPE_p_float comDemandResult, SWIGTYPE_p_float indDemandResult) {
    micropolisenginePINVOKE.Micropolis_getDemands(swigCPtr, SWIGTYPE_p_float.getCPtr(resDemandResult), SWIGTYPE_p_float.getCPtr(comDemandResult), SWIGTYPE_p_float.getCPtr(indDemandResult));
  }

}
