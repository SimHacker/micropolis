/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MapByte2 : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MapByte2(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MapByte2 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MapByte2() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          micropolisenginePINVOKE.delete_MapByte2(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MapByte2(byte defaultValue) : this(micropolisenginePINVOKE.new_MapByte2__SWIG_0(defaultValue), true) {
  }

  public MapByte2(MapByte2 map) : this(micropolisenginePINVOKE.new_MapByte2__SWIG_1(MapByte2.getCPtr(map)), true) {
    if (micropolisenginePINVOKE.SWIGPendingException.Pending) throw micropolisenginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int MAP_BLOCKSIZE {
    get {
      int ret = micropolisenginePINVOKE.MapByte2_MAP_BLOCKSIZE_get(swigCPtr);
      return ret;
    } 
  }

  public int MAP_W {
    get {
      int ret = micropolisenginePINVOKE.MapByte2_MAP_W_get(swigCPtr);
      return ret;
    } 
  }

  public int MAP_H {
    get {
      int ret = micropolisenginePINVOKE.MapByte2_MAP_H_get(swigCPtr);
      return ret;
    } 
  }

  public void fill(byte val) {
    micropolisenginePINVOKE.MapByte2_fill(swigCPtr, val);
  }

  public void clear() {
    micropolisenginePINVOKE.MapByte2_clear(swigCPtr);
  }

  public void set(int x, int y, byte val) {
    micropolisenginePINVOKE.MapByte2_set(swigCPtr, x, y, val);
  }

  public byte get(int x, int y) {
    byte ret = micropolisenginePINVOKE.MapByte2_get(swigCPtr, x, y);
    return ret;
  }

  public bool onMap(int x, int y) {
    bool ret = micropolisenginePINVOKE.MapByte2_onMap(swigCPtr, x, y);
    return ret;
  }

  public void worldSet(int x, int y, byte val) {
    micropolisenginePINVOKE.MapByte2_worldSet(swigCPtr, x, y, val);
  }

  public byte worldGet(int x, int y) {
    byte ret = micropolisenginePINVOKE.MapByte2_worldGet(swigCPtr, x, y);
    return ret;
  }

  public bool worldOnMap(int x, int y) {
    bool ret = micropolisenginePINVOKE.MapByte2_worldOnMap(swigCPtr, x, y);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char getBase() {
    IntPtr cPtr = micropolisenginePINVOKE.MapByte2_getBase(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

}
