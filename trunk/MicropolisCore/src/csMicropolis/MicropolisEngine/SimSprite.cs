/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SimSprite : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SimSprite(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SimSprite obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SimSprite() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          micropolisenginePINVOKE.delete_SimSprite(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SimSprite next {
    set {
      micropolisenginePINVOKE.SimSprite_next_set(swigCPtr, SimSprite.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.SimSprite_next_get(swigCPtr);
      SimSprite ret = (cPtr == IntPtr.Zero) ? null : new SimSprite(cPtr, false);
      return ret;
    } 
  }

  public string name {
    set {
      micropolisenginePINVOKE.SimSprite_name_set(swigCPtr, value);
    } 
    get {
      string ret = micropolisenginePINVOKE.SimSprite_name_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      micropolisenginePINVOKE.SimSprite_type_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_type_get(swigCPtr);
      return ret;
    } 
  }

  public int frame {
    set {
      micropolisenginePINVOKE.SimSprite_frame_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_frame_get(swigCPtr);
      return ret;
    } 
  }

  public int x {
    set {
      micropolisenginePINVOKE.SimSprite_x_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      micropolisenginePINVOKE.SimSprite_y_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_y_get(swigCPtr);
      return ret;
    } 
  }

  public int width {
    set {
      micropolisenginePINVOKE.SimSprite_width_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_width_get(swigCPtr);
      return ret;
    } 
  }

  public int height {
    set {
      micropolisenginePINVOKE.SimSprite_height_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_height_get(swigCPtr);
      return ret;
    } 
  }

  public int xOffset {
    set {
      micropolisenginePINVOKE.SimSprite_xOffset_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_xOffset_get(swigCPtr);
      return ret;
    } 
  }

  public int yOffset {
    set {
      micropolisenginePINVOKE.SimSprite_yOffset_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_yOffset_get(swigCPtr);
      return ret;
    } 
  }

  public int xHot {
    set {
      micropolisenginePINVOKE.SimSprite_xHot_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_xHot_get(swigCPtr);
      return ret;
    } 
  }

  public int yHot {
    set {
      micropolisenginePINVOKE.SimSprite_yHot_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_yHot_get(swigCPtr);
      return ret;
    } 
  }

  public int origX {
    set {
      micropolisenginePINVOKE.SimSprite_origX_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_origX_get(swigCPtr);
      return ret;
    } 
  }

  public int origY {
    set {
      micropolisenginePINVOKE.SimSprite_origY_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_origY_get(swigCPtr);
      return ret;
    } 
  }

  public int destX {
    set {
      micropolisenginePINVOKE.SimSprite_destX_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_destX_get(swigCPtr);
      return ret;
    } 
  }

  public int destY {
    set {
      micropolisenginePINVOKE.SimSprite_destY_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_destY_get(swigCPtr);
      return ret;
    } 
  }

  public int count {
    set {
      micropolisenginePINVOKE.SimSprite_count_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_count_get(swigCPtr);
      return ret;
    } 
  }

  public int soundCount {
    set {
      micropolisenginePINVOKE.SimSprite_soundCount_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_soundCount_get(swigCPtr);
      return ret;
    } 
  }

  public int dir {
    set {
      micropolisenginePINVOKE.SimSprite_dir_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_dir_get(swigCPtr);
      return ret;
    } 
  }

  public int newDir {
    set {
      micropolisenginePINVOKE.SimSprite_newDir_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_newDir_get(swigCPtr);
      return ret;
    } 
  }

  public int step {
    set {
      micropolisenginePINVOKE.SimSprite_step_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_step_get(swigCPtr);
      return ret;
    } 
  }

  public int flag {
    set {
      micropolisenginePINVOKE.SimSprite_flag_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_flag_get(swigCPtr);
      return ret;
    } 
  }

  public int control {
    set {
      micropolisenginePINVOKE.SimSprite_control_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_control_get(swigCPtr);
      return ret;
    } 
  }

  public int turn {
    set {
      micropolisenginePINVOKE.SimSprite_turn_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_turn_get(swigCPtr);
      return ret;
    } 
  }

  public int accel {
    set {
      micropolisenginePINVOKE.SimSprite_accel_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_accel_get(swigCPtr);
      return ret;
    } 
  }

  public int speed {
    set {
      micropolisenginePINVOKE.SimSprite_speed_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.SimSprite_speed_get(swigCPtr);
      return ret;
    } 
  }

  public SimSprite() : this(micropolisenginePINVOKE.new_SimSprite(), true) {
  }

}
