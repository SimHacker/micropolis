/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Resource : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Resource(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Resource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Resource() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          micropolisenginePINVOKE.delete_Resource(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public string buf {
    set {
      micropolisenginePINVOKE.Resource_buf_set(swigCPtr, value);
    } 
    get {
      string ret = micropolisenginePINVOKE.Resource_buf_get(swigCPtr);
      return ret;
    } 
  }

  public int size {
    set {
      micropolisenginePINVOKE.Resource_size_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Resource_size_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      micropolisenginePINVOKE.Resource_name_set(swigCPtr, value);
    } 
    get {
      string ret = micropolisenginePINVOKE.Resource_name_get(swigCPtr);
      return ret;
    } 
  }

  public int id {
    set {
      micropolisenginePINVOKE.Resource_id_set(swigCPtr, value);
    } 
    get {
      int ret = micropolisenginePINVOKE.Resource_id_get(swigCPtr);
      return ret;
    } 
  }

  public Resource next {
    set {
      micropolisenginePINVOKE.Resource_next_set(swigCPtr, Resource.getCPtr(value));
    } 
    get {
      IntPtr cPtr = micropolisenginePINVOKE.Resource_next_get(swigCPtr);
      Resource ret = (cPtr == IntPtr.Zero) ? null : new Resource(cPtr, false);
      return ret;
    } 
  }

  public Resource() : this(micropolisenginePINVOKE.new_Resource(), true) {
  }

}
