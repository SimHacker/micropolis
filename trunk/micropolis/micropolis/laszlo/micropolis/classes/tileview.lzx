<library>


    <!-- Tile View -->


    <class name="tileview"
	clip="true"
    >


	<attribute name="worldCols" value="120"/>
	<attribute name="worldRows" value="100"/>
	<attribute name="tileSize" value="16"/>
	<attribute name="viewCol" value="0"/>
	<attribute name="viewRow" value="0"/>
	<attribute name="viewCols" value="0"/>
	<attribute name="viewRows" value="0"/>
	<attribute name="screenCol" value="${Math.floor((-this.container.x) / this.tileSize)}"/>
	<attribute name="screenRow" value="${Math.floor((-this.container.y) / this.tileSize)}"/>
	<attribute name="screenCols" value="${Math.floor(2 + (this.width / this.tileSize))}"/>
	<attribute name="screenRows" value="${Math.floor(2 + (this.height / this.tileSize))}"/>
	<attribute name="codeString" type="string" value="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-"/>
	<attribute name="codeMap" value="null"/>
	<attribute name="tileRows" value="null"/>
	<attribute name="aniTiles" value="null"/>


        <handler name="oninit"><![CDATA[
	    Debug.write("tileview init", this);

	    var codeString = this.codeString;
	    var codeMap = {};
	    this.codeMap = codeMap;

	    var i;
	    for (i = 0; i < codeString.length; i++) {
		var c = codeString.substr(i, 1);
		codeMap[c] = i;
	    }

	    var tileRows = [];
	    this.tileRows = tileRows;
	    var row;
	    for (row = 0; row < this.worldRows; row++) {
		var tileRow = [];
		tileRows.push(tileRow);
	        var col;
		for (col = 0; col < this.worldCols; col++) {
		    tileRow.push(null);
		}
	    }

	    this.aniTiles = [
		0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,
		16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, 
		32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
		48,  49,  50,  51,  52,  53,  54,  55,
		// Fire
							57,  58,  59,  60,  61,  62,  63,  56,
		// No Traffic
		64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
		// Light Traffic
		128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
		80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
		96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
		112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
		// Heavy Traffic
		192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
		144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
		160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
		176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
		// Wires & Rails
		208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
		224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
		// Residential
		240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
		256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
		272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
		288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
		304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
		320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
		336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
		352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
		368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
		384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
		400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
		416, 417, 418, 419, 420, 421, 422,
		// Commercial
						   423, 424, 425, 426, 427, 428, 429, 430, 431,
		432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
		448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
		464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
		480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
		496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
		512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
		528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
		544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
		560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
		576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
		592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
		608, 609, 610, 611,
		// Industrial
				    612, 613, 614, 615, 616, 617, 618, 619, 852, 621, 622, 623,
		624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
		640, 884, 642, 643, 888, 645, 646, 647, 648, 892, 896, 651, 652, 653, 654, 655,
		656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
		672, 673, 674, 675, 900, 904, 678, 679, 680, 681, 682, 683, 684, 685, 908, 687,
		688, 912, 690, 691, 692,
		// SeaPort
					 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
		704, 705, 706, 707, 708,
		// AirPort
					 709, 710, 832, 712, 713, 714, 715, 716, 717, 718, 719,
		720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
		736, 737, 738, 739, 740, 741, 742, 743, 744,
		// Coal power
							     745, 746, 916, 920, 749, 750, 924,
		928, 753, 754, 755, 756, 757, 758, 759, 760,
		// Fire Dept
							     761, 762, 763, 764, 765, 766, 767,
		768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
		// Stadium
								       779, 780, 781, 782, 783,
		784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
		// Stadium Anims
								       795, 796, 797, 798, 799,
		800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
		// Nuclear Power
								       811, 812, 813, 814, 815,
		816, 817, 818, 819, 952, 821, 822, 823, 824, 825, 826,
		// Power out + Bridges
								       827, 828, 829, 830, 831,
		// Radar dish
		833, 834, 835, 836, 837, 838, 839, 832,
		// Fountain / Flag
							841, 842, 843, 840, 845, 846, 847, 848,
		849, 850, 851, 844, 853, 854, 855, 856, 857, 858, 859, 852,
		// zone destruct & rubblize
									    861, 862, 863, 864,
		865, 866, 867, 867,
		// totally unsure
				    868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
		880, 881, 882, 883,
		// Smoke stacks
				    885, 886, 887, 884, 889, 890, 891, 888, 893, 894, 895, 892,
		897, 898, 899, 896, 901, 902, 903, 900, 905, 906, 907, 904, 909, 910, 911, 908,
		913, 914, 915, 912, 917, 918, 919, 916, 921, 922, 923, 920, 925, 926, 927, 924,
		929, 930, 931, 928,
		// Stadium Playfield
				    933, 934, 935, 936, 937, 938, 939, 932, 941, 942, 943, 944,
		945, 946, 947, 940,
		// Bridge up chars
				    948, 949, 950, 951,
		// Nuclear swirl
							953, 954, 955, 952
	    ];

	    gApp.addTicker(this);

	  ]]>
	</handler>


	<handler name="onwidth"><![CDATA[
	    this.refreshView();
	  ]]>
	</handler>


	<handler name="onheight"><![CDATA[
	    this.refreshView();
	  ]]>
	</handler>


	<handler name="onidle" reference="LzIdleService.LzIdle"><![CDATA[
	    this.animateTiles();
	  ]]>
	</handler>


	<method name="getTile" args="col, row"><![CDATA[
	    var tileRows = this.tileRows;
	    var tileRow = tileRows[row];
	    if (!tileRow) {
		tileRow = [];
		tileRows[row] = tileRow;
	    }
	    var tile = tileRow[col];
	    if (!tile) {
		tile = new lz.tile(this.container, {
		    x: col * this.tileSize,
		    y: row * this.tileSize
		});
	        tileRow[col] = tile;
	    }
	    return tile;
	  ]]>
	</method>


	<method name="updateViewRect"><![CDATA[
	    var col = this.screenCol;
	    var row = this.screenRow;
	    var cols = this.screenCols;
	    var rows = this.screenRows;

	    var left = col;
	    var top = row;
	    var right = col + cols;
	    var bottom = row + rows;

	    left = Math.max(0, left);
	    top = Math.max(0, top);
	    right = Math.min(right, this.worldCols);
	    bottom = Math.min(bottom, this.worldRows);

	    col = left
	    row = top;
	    cols = Math.max(0, right - left);
	    rows = Math.max(0, bottom - top);

	    this.setAttribute("viewCol", col);
	    this.setAttribute("viewRow", row);
	    this.setAttribute("viewCols", cols);
	    this.setAttribute("viewRows", rows);
	  ]]>
	</method>


	<method name="tick"><![CDATA[
	    //Debug.write("tick", this, this.viewCols, this.viewRows);
	    this.updateViewRect();
	  ]]>
	</method>


	<method name="animateTiles"><![CDATA[
	    this.updateViewRect();

	    var cols = this.viewCols;
	    var rows = this.viewRows;

	    if ((cols == 0) || (rows == 0)) {
		return;
	    }

	    var row = this.viewRow;
	    var col = this.viewCol;
	    var aniTiles = this.aniTiles;
	    var tileRows = this.tileRows;
	    var r, c;
	    for (r = 0; r < rows; r++) {
	        var tileRow = tileRows[row + r];
		for (c = 0; c < cols; c++) {
		    var tile = tileRow[col + c];
		    if (tile) {
			var tileIndex = tile.frame - 1;
			var nextTileIndex = aniTiles[tileIndex];
			if ((tileIndex != nextTileIndex) &&
			    ((nextTileIndex + 1) != tile.frame)) {
			    tile.setAttribute("frame", nextTileIndex + 1);
			}
		    }
		}
	    }
	  ]]>
	</method>


	<method name="refreshView"><![CDATA[
	  ]]>
	</method>


	<method name="updateTiles" args="col, row, cols, rows, format, tiles"><![CDATA[
	    //Debug.write("row", row, "col", col, "rows", rows, "cols", cols, "format", format);
	    //Debug.write("tiles.length", tiles.length, tiles.substr(0, 20));

	    var codeMap = this.codeMap;
	    switch (format) {

		case 0: {
		    var c, r;
		    var offset = 0;
		    for (r = 0; r < rows; r++) {
			for (c = 0; c < cols; c++) {
			    var tile = this.getTile(col + c, row + r);
			    var c1 = tiles.substr(offset, 1);
			    var c2 = tiles.substr(offset + 1, 1);
			    var frame = 
				(((codeMap[c2] * 64) + codeMap[c1]) & 1023) + 1;
			    if (frame != tile.frame) {
			        tile.setAttribute("frame", frame);
			    }
			    offset += 2;
			}
		    }
		    break;
		}

		case 1: {
		    var tileIndex = 0;
		    var tileIndexMax = rows * cols;
		    var offset = 0;
		    var offsetMax = tiles.length;
		    var bad = false;

		    function getNumber1()
		    {
			if (offset >= offsetMax) {
			    bad = true;
			    return 0;
			}
			var c1 = tiles.substr(offset, 1);
			offset += 1;
			return codeMap[c1];
		    }

		    function getNumber2()
		    {
			if ((offset + 1) >= offsetMax) {
			    bad = true;
			    return 0;
			}
			var c1 = tiles.substr(offset, 1);
			var c2 = tiles.substr(offset + 1, 1);
			offset += 2;
			return codeMap[c1] + (codeMap[c2] * 64);
		    }

		    function getNumber3()
		    {
			if ((offset + 2) >= offsetMax) {
			    bad = true;
			    return 0;
			}
			var c1 = tiles.substr(offset, 1);
			var c2 = tiles.substr(offset + 1, 1);
			var c3 = tiles.substr(offset + 2, 1);
			offset += 3;
			return codeMap[c1] + (codeMap[c2] * 64) + (codeMap[c2] * 4096);
		    }

		    while ((!bad) &&
			   (tileIndex >= 0) && 
			   (tileIndex < tileIndexMax) &&
			   (offset < offsetMax)) {

			var c1 = tiles.substr(offset, 1);
			offset++;

			if (c1 == '.') {
			    tileIndex++;
			    continue;
			} else if (c1 == '!') {
			    var skip = getNumber1() + 2;
			    tileIndex += skip;
			    continue;
			} else if (c1 == '@') {
			    tileIndex += getNumber2() + 2;
			    continue;
			} else if (c1 == '#') {
			    tileIndex += getNumber3() + 2;
			    continue;
			}

			if (offset >= offsetMax) {
			    bad = true;
			    break;
			}

			var c2 = tiles.substr(offset, 1);
			offset++

			if (!(c1 in codeMap)) {
			    Debug.write("Unrecognized c1", c1);
			}
			if (!(c2 in codeMap)) {
			    Debug.write("Unrecognized c2", c2);
			}

			var frame = 
			    (codeMap[c1] + (codeMap[c2] * 64)) + 1;

			var c = tileIndex % cols;
			var r = Math.floor(tileIndex / cols);

			var tile =
			    this.getTile(col + c, row + r);

			if (frame != tile.frame) {
			    tile.setAttribute("frame", frame);	
			}

			tileIndex++;

		    }
		    break;
		}

	    }
	  ]]>
	</method>


	<node name="tilesData"
	    datapath="ds_tick:/tick/tiles"
	>

	    <attribute name="row" type="number" value="$path{'@row'}"/>
	    <attribute name="col" type="number" value="$path{'@col'}"/>
	    <attribute name="rows" type="number" value="$path{'@rows'}"/>
	    <attribute name="cols" type="number" value="$path{'@cols'}"/>
	    <attribute name="format" type="number" value="$path{'@format'}"/>
	    <attribute name="tiles" type="string" value="$path{'text()'}"/>


	    <handler name="ondata"><![CDATA[
		var col = parseInt(this.col);
		var row = parseInt(this.row);
		var cols = parseInt(this.cols);
		var rows = parseInt(this.rows);
		var format = parseInt(this.format);
		var tiles = this.tiles;

		//Debug.write(col, row, cols, rows, format, tiles);

		if ((rows > 0) &&
		    (cols > 0) &&
		    tiles) {
		    classroot.updateTiles(
			col,
			row,
			cols,
			rows,
			format,
			tiles);
		}

	      ]]>
	    </handler>

	</node>


	<view name="container"
	    width="${classroot.worldCols * classroot.tileSize}"
	    height="${classroot.worldRows * classroot.tileSize}"
	    bgcolor="0xCC7F66"
	    onmousedown="dragger.setAttribute('applied', true)"
	    onmouseup="dragger.setAttribute('applied', false)"
	>

	    <dragstate name="dragger"/>


	    <handler name="onx"><![CDATA[
		classroot.refreshView();
	      ]]>
	    </handler>


	    <handler name="ony"><![CDATA[
		classroot.refreshView();
	      ]]>
	    </handler>


	</view>


    </class>


</library>
