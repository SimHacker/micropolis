[global]
# The settings in this file should not vary depending on the deployment
# environment. dev.cfg and prod.cfg are the locations for
# the different deployment settings. Settings in this file will
# be overridden by settings in those other files.

# The commented out values below are the defaults

# APPLICATION PACKAGE

package = "micropolis"

# VIEW

# which view (template engine) to use if one is not specified in the
# template name
tg.defaultview = "genshi"

# The following Genshi settings determine the settings used by the Genshi
# serializer.

# One of (html|html-strict|html-transitional|xhtml|xhtml-strict|html5|json)
# Warning: if you change this, you'll probably also want to change
# 'genshi.default_format' below.
# genshi.default_doctype = "html"

# genshi.encoding = "utf-8"

# genshi.auto_reload = "yes"

# One of (xml|xhtml|html|text)
# Warning: this setting will be overwritten by 'genshi.outputformat' if the
# latter is set.
# genshi.default_format = "html"

# genshi.variable_lookup

# lenient or strict
# genshi.lookup_errors = "lenient"

# The maximum number of templates that the loader will cache in memory.
# genshi.max_cache_size = 25

# file-system path names to be use to search for templates.
# genshi.search_path = ''

# The following Kid settings determine the settings used by the Kid serializer.

# Kid output method (e.g. html, html-strict, xhtml, xhtml-strict, xml, json)
# and formatting (e.g. default, straight, compact, newlines, wrap, nice)
# kid.outputformat = "html default"

# kid.encoding = "utf-8"

# The sitetemplate is used for overall styling of a site that
# includes multiple TurboGears applications
# tg.sitetemplate = "<packagename.templates.templatename>"

# Allow every exposed function to be called as json,
# tg.allow_json = False

# Control how MochiKit is loaded using tgMochiKit.
# See http://docs.turbogears.org/tgMochiKit for more information.
# tg_mochikit.packed = False
# tg_mochikit.xhtml = False
# TurboGears 1.1 needs MochiKit >= 1.4 for all JS-enhanced widgets to work
# correctly. Don't change the following setting unless you know what you are
# doing!
tg_mochikit.version = '1.4'

# List of Widgets to include on every page.
# tg.include_widgets = []
# For example to include the MochiKit library provided by TurboGears+tgMochiKit:
# tg.include_widgets = ['turbogears.mochikit']

# Set to True if the scheduler should be started
# tg.scheduler = False

# Set to True to allow paginate decorator redirects when page number gets
# out of bound. Useful for getting the real page id in the url
# paginate.redirect_on_out_of_range = True

# Set to True to allow paginate decorator redirects when last page is requested.
# This is useful for getting the real last page id in the url
# paginate.redirect_on_last_page = True

# Set session or cookie
# session_filter.on = True

# Set internationalization
# i18n.run_template_filter = True

# VISIT TRACKING
# --------------
# Each visit to your application will be assigned a unique visit ID tracked via
# a cookie sent to the visitor's browser.

# Enable Visit tracking
visit.on = True

# Number of minutes a visit may be idle before it expires.
# visit.timeout = 20

# Where to look for the key of an existing visit in the request and in which
# order. Comma-separated list of possible values: 'cookie', 'form'.
# By default only use visit key in session cookie.
# visit.source = "cookie"

# The name of the cookie to transmit to the visitor's browser.
# visit.cookie.name = "tg-visit"

# The name of the request parameter with the session key (for when
# 'visit.source' includes 'form'). Name MUST NOT contain dashes or dots!
# visit.form.name = "tg_visit"

# Domain name to specify when setting the cookie (must begin with . according to
# RFC 2109). The default (None) should work for most cases and will default to
# the machine to which the request was made. NOTE: localhost is NEVER a valid
# value and will NOT WORK.
# visit.cookie.domain = None

# Specific path for the cookie
# visit.cookie.path = "/"

# The name of the VisitManager plugin to use for visitor tracking.
visit.manager = "sqlalchemy"

# Database class to use for visit tracking
visit.saprovider.model = "micropolis.model.Visit"
identity.saprovider.model.visit = "micropolis.model.VisitIdentity"

# IDENTITY
# --------
# General configuration of the TurboGears Identity management module

# Switch to turn on or off the Identity management module
identity.on = True

# [REQUIRED] URL to which CherryPy will internally redirect when an access
# control check fails. If Identity management is turned on, a value for this
# option must be specified.
identity.failure_url = "/login"

# If force_external_redirect is set to True, then the identity
# framework will use an external redirection.
# This is mainly used to make sure that if you use
# an https:// url in the failure_url, this will be respected.
identity.force_external_redirect = False

identity.provider = 'sqlalchemy'

# The names of the fields on the login form containing the visitor's user ID
# and password. In addition, the submit button is specified simply so its
# existence may be stripped out prior to passing the form data to the target
# controller.
# identity.form.user_name = "user_name"
# identity.form.password = "password"
# identity.form.submit = "login"

# What sources should the identity provider consider when determining the
# identity associated with a request? Comma separated list of identity sources.
# Valid sources: form, visit, http_auth
# identity.source = "form,http_auth,visit"

# SqlAlchemyIdentityProvider
# --------------------------
# Configuration options for the default IdentityProvider

# The classes you wish to use for your Identity model. Remember to not use reserved
# SQL keywords for class names (at least unless you specify a different table
# name using sqlmeta).
identity.saprovider.model.user = "micropolis.model.User"
identity.saprovider.model.group = "micropolis.model.Group"
identity.saprovider.model.permission = "micropolis.model.Permission"

# The password encryption algorithm used when comparing passwords against what's
# stored in the database. Valid values are 'md5' or 'sha1'. If you do not
# specify an encryption algorithm, passwords are expected to be clear text.
# The SqlAlchemyProvider *will* encrypt passwords supplied as part of your login
# form.  If you set the password through the password property, like:
# my_user.password = 'secret'
# the password will be encrypted in the database, provided identity is up and
# running, or you have loaded the configuration specifying what encryption to
# use (in situations where identity may not yet be running, like tests).

#identity.saprovider.encryption_algorithm = None
identity.saprovider.encryption_algorithm = 'md5'

# compress the data sends to the web browser
# [/]
# gzip_filter.on = True
# gzip_filter.mime_types = ["application/json", "application/x-javascript",
#     "text/javascript", "text/html", "text/css", "text/plain"]

[/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/static"

[/favicon.ico]
static_filter.on = True
static_filter.file = "%(top_level_dir)s/static/images/favicon.ico"
